{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cool Tea's Site","text":"<p>This is the homepage.</p> <p>Here contain some notes of the courses learned or being learning. There are notes in Chinese or in English. This is decided by the language that the target course uses because this is convenient.  </p> <p>Most of the contents are copies of the textbook or slides or generated by AI. There is little originality.  </p> <p>Declaration</p> <p>If you find something here to be infringing, please leave your comments to let us know. We will be there to handle it.  </p>"},{"location":"#test","title":"Test","text":"<p>The following are some tests of what material can show.  </p>"},{"location":"#code-block","title":"Code block","text":"printf.c<pre><code>int a=10;\nprintf(\"Hello World!\");\n</code></pre>"},{"location":"#math","title":"Math","text":"\\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\]"},{"location":"#expandable-note","title":"Expandable note","text":"clickcontents an easy note <p>here is how the note tag is implemented.</p> a warning <p>This is a warning</p> <p>Info</p> <p>Info content <pre><code>def hello():\n    print(\"Hello, world!\")\n</code></pre></p> foldable info <p>Info content <pre><code>def hello():\n    print(\"Hello, world!\")\n</code></pre></p>"},{"location":"#footnotes","title":"footnotes","text":"<p>Sentence with footnote<sup>1</sup>\u3002 haafasdfeafesdfajjjakadfa;faeipfhawke</p>"},{"location":"#tasklist","title":"Tasklist","text":"<ul> <li> done</li> <li> to be done</li> </ul> <ol> <li> <p>This is the footnote content\u00a0\u21a9</p> </li> </ol>"},{"location":"about/","title":"About cool tea","text":"<p>The tea usually gets cooler over time.</p> <p>Tea that cools may get bitter.</p> <p>There are more than 1 person serving the tea.</p> <p>The tea contains some trival knowledge.</p> <p>Maybe it is a prove to show what the servers have served.</p>"},{"location":"link/","title":"Links","text":"<p>Here are some useful links that may be useful.</p> <p>The logos</p>"},{"location":"img/study/cs/sys2/review/","title":"review of sys2","text":""},{"location":"img/study/cs/sys2/review/#_1","title":"\u786c\u4ef6","text":""},{"location":"img/study/cs/sys2/review/#isa","title":"ISA","text":"<p>Arch:</p> <ol> <li>Stack architecture:</li> <li>Accumulator</li> <li>GPR</li> <li>Register-Memory</li> <li>load-store</li> </ol> <p>addressing mode:</p>"},{"location":"img/study/cs/sys2/review/#pipeline","title":"pipeline","text":"<p>class: </p>"},{"location":"img/study/cs/sys2/review/#performance","title":"Performance","text":"<ol> <li>TP(throughput):\\(TP=\\frac{n}{T}\\) </li> <li>Speedup </li> <li>Efficiency  \u4e3e\u4f8b\uff1a  </li> </ol>"},{"location":"img/study/cs/sys2/review/#hazard","title":"hazard","text":""},{"location":"img/study/cs/sys2/review/#structural","title":"structural","text":"<ol> <li>Df: A required resource is busy</li> <li>Sotution: Stall: insert bubble:addi x0, x0, 0</li> </ol>"},{"location":"img/study/cs/sys2/review/#data","title":"data","text":"<ol> <li>Df:<ol> <li>Data dependency between instructions</li> <li>Need to wait for previous instruction to complete its data read/write</li> </ol> </li> <li>Solution: </li> </ol> <ul> <li>detect and forwarding  </li> <li>Load-Use Hazard Detection: detect and insert bubble </li> </ul>"},{"location":"img/study/cs/sys2/review/#control","title":"control","text":""},{"location":"img/study/cs/sys2/review/#scheduling","title":"Scheduling","text":""},{"location":"img/study/cs/sys2/review/#prohibit-table","title":"Prohibit table","text":""},{"location":"img/study/cs/sys2/review/#initial-confict-vector","title":"initial confict vector","text":"<p>\u4e8c\u8fdb\u5236\u6570\u5b57\u4e32\uff0cprohibit table\u4e2d\u5bf9\u5e94\u6570\u5b57\u7684\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4e3a0</p>"},{"location":"img/study/cs/sys2/review/#state-transition-graph","title":"state transition graph","text":""},{"location":"img/study/cs/sys2/review/#multiple-issue","title":"Multiple issue","text":""},{"location":"img/study/cs/sys2/review/#multiple-issue-processor-type","title":"multiple-issue processor type","text":""},{"location":"img/study/cs/sys2/review/#superscalar","title":"Superscalar","text":""},{"location":"img/study/cs/sys2/review/#vliwvery-long-instruction-word","title":"VLIW(Very Long Instruction Word)","text":""},{"location":"img/study/cs/sys2/review/#exception-hardware-s-interface","title":"Exception&amp; Hardware-S interface","text":""},{"location":"img/study/cs/sys2/review/#_2","title":"\u8f6f\u4ef6","text":"<p>\u57fa\u672c\u8109\u7edc\uff1a process -&gt;process scheduling -&gt;IPC -&gt;thread -&gt;sychronization -&gt;deadlock</p> <p>\u8fdb\u7a0b\uff1a\u8d44\u6e90\u5206\u914d\u548c\u4fdd\u62a4\u5355\u5143 \u7ebf\u7a0b\uff1a\u8d44\u6e90\u6267\u884c\u5355\u5143</p>"},{"location":"img/study/cs/sys2/review/#_3","title":"\u795e\u56fe","text":""},{"location":"img/study/cs/sys2/review/#process","title":"process","text":""},{"location":"img/study/cs/sys2/review/#pcb","title":"PCB","text":""},{"location":"img/study/cs/sys2/review/#process-state","title":"Process State","text":"<ol> <li> <p>new:   :star:forK(syscall):\u8fd4\u56de\u4e24\u503c\uff08\u5bf9\u7236\u8fdb\u7a0b\uff1a\u5b50\u8fdb\u7a0bPID\uff1b\u5b50\u8fdb\u7a0b\uff1a0\uff09\uff0ccopy\u4e24\u4efduser space context(pt regs) \u91cd\u70b9\uff1afork \u51fa\u7684\u8fdb\u7a0b\u5904</p> </li> <li> <p>context_switch:\u5207\u6362stack,pc(\u6d89\u53ca\u786c\u4ef6\u8d44\u6e90\uff0c\u53d1\u751f\u5728kernel) </p> </li> </ol>"},{"location":"img/study/cs/sys2/review/#process-schedulingstar","title":"Process scheduling:star:","text":""},{"location":"img/study/cs/sys2/review/#ipc","title":"IPC","text":""},{"location":"img/study/cs/sys2/review/#thread","title":"Thread","text":"<p>\u8fdb\u7a0b\u7684\u6267\u884c\u5355\u5143\uff1a</p> <p></p> <p>\u8fdb\u7a0b\u6267\u884c\u987a\u5e8f\u56fe \u8fdb\u7a0bfork\u540e\u8fdb\u5165ready\u961f\u5217\u7b49\u5f85</p> <p>1\u4e2a\u8fdb\u7a0b\u4e2d\u6709n\u4e2a\u7ebf\u7a0b\uff1an\u4e2atask struct \u8fdb\u7a0b\u65e0task struct,\u5b83\u7528leader thread\u7684task_struct</p> <p>thread node thread group\u904d\u5386thread</p> <p>user space code\u4e0ekernel space code \u4e0d\u540c thread:user kernel\u4e00\u5bf9\u4e00</p> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u7684pt regs\uff0c\u662fthread kernel stack\u4e00\u90e8\u5206</p>"},{"location":"img/study/cs/sys2/review/#synchronization","title":"synchronization","text":""},{"location":"img/study/cs/sys2/review/#critical-section","title":"critical section","text":"<p>Critical section(\u4e34\u754c\u533a):\u6307\u5728\u5e76\u53d1\u7f16\u7a0b\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5171\u4eab\u7684\u8d44\u6e90\uff08\u4f8b\u5982\u5171\u4eab\u5185\u5b58\u3001\u6587\u4ef6\u3001\u8bbe\u5907\u7b49\uff09\u9700\u8981\u88ab\u8bbf\u95ee\u7684\u90a3\u6bb5\u4ee3\u7801\u3002\u4e34\u754c\u533a\u4e2d\u7684\u4ee3\u7801\u90e8\u5206\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\u8bbf\u95ee\uff0c\u4ee5\u907f\u514d\u7ade\u4e89\u6761\u4ef6\uff08race condition\uff09\u548c\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002</p> <p>solution to critical section \u6761\u4ef6\uff1a</p> <ol> <li>Mutual exclusion(\u4e92\u65a5\u8bbf\u95ee): critical section\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c</li> <li>Progress(\u7a7a\u95f2\u8ba9\u8fdb):\u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\uff0c\u4e14\u6709\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165\u4e34\u754c\u533a\u65f6\uff0c\u5fc5\u5b9a\u6709\u8fdb\u7a0b\u80fd\u591f\u8fdb\u5165\u4e34\u754c\u533a</li> <li>Bounded waiting(\u6709\u9650\u7b49\u5f85\u65f6\u95f4):\u9632\u6b62starvation</li> </ol>"},{"location":"img/study/cs/sys2/review/#petersons-solution","title":"peterson's solution:\u53ea\u80fd\u89e3\u51b3\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u51b2\u7a81","text":"<p>Peterson\u7684\u7b97\u6cd5\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u5171\u4eab\u53d8\u91cf\u6765\u63a7\u5236\u4e24\u4e2a\u8fdb\u7a0b\u7684\u884c\u4e3a\uff1a</p> <ul> <li>flag[0] \u548c flag[1]\uff1a\u8fd9\u4e24\u4e2a\u53d8\u91cf\u8868\u793a\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u662f\u5426\u5e0c\u671b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> <li>turn\uff1a\u8fd9\u4e2a\u53d8\u91cf\u8868\u793a\u5f53\u524d\u8f6e\u5230\u54ea\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> </ul> <p></p> <p>\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u4e09\u4e2a\u6761\u4ef6\uff0c\u4f46\u6709\u5982\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>Only works for two processes case</li> <li>It assumes that LOAD and STORE are atomic</li> <li>\u6ca1\u8003\u8651Instruction reorder\uff1a\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u6307\u4ee4\u91cd\u6392</li> </ul>"},{"location":"img/study/cs/sys2/review/#hardware-solution","title":"Hardware solution","text":"<ol> <li> <p>Memory barriers(\u4e00\u79cd\u5904\u7406\u5668\u6307\u4ee4)\uff1a\u5185\u5b58\u5c4f\u969c\u4f5c\u4e3a\u540c\u6b65\u539f\u8bed\u88ab\u7528\u6765\u5f3a\u5236\u6307\u4ee4\u6309\u7279\u5b9a\u987a\u5e8f\u6267\u884c\uff0c\u786e\u4fdd\u5bf9\u5171\u4eab\u6570\u636e\u7684\u8bbf\u95ee\u6309\u9884\u671f\u53d1\u751f\u3002 </p> </li> <li> <p>\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff1a</p> </li> <li>test and set(TAS):\u5148\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7279\u5b9a\u503c\uff08\u59821\uff09\uff0c\u5e76\u8fd4\u56de\u539f\u503c\u3002\u8be5\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u6210\u529f\u83b7\u53d6\u9501\u3002    </li> <li> <p>compare and swap(CAS):CAS\u64cd\u4f5c\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u4e0e\u63d0\u4f9b\u7684\u9884\u671f\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u5339\u914d\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u7684\u503c\u66ff\u6362\u4e3a\u65b0\u503c\uff1b\u5982\u679c\u4e0d\u5339\u914d\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u5e76\u8fd4\u56de\u5f53\u524d\u503c\u3002CAS\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u786e\u4fdd\u591a\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\u3002    </p> </li> <li> <p>Atomic variables:</p> </li> </ol>"},{"location":"img/study/cs/sys2/review/#mutex-locks","title":"Mutex locks\uff08\u4e92\u65a5\u9501\uff09","text":"<p>\u4fdd\u8bc1\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6301\u6709\u8be5\u9501\u5e76\u8fdb\u5165\u4e34\u754c\u533a\uff08critical section\uff09\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5fc5\u987b\u7b49\u5f85\uff0c\u76f4\u5230\u8be5\u9501\u88ab\u91ca\u653e\u3002 \u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>while(true){\n    acquire lock(atomic)\n    critical section\n    release lock(atomic)\n    remainder section\n}\n</code></pre> <ol> <li>\u81ea\u65cb\u9501\uff1a\u81ea\u65cb\u9501\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u9501\u5b9e\u73b0\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u7ebf\u7a0b\u65e0\u6cd5\u83b7\u5f97\u9501\u65f6\uff0c\u5b83\u4f1a\u4e0d\u65ad\u5faa\u73af\uff08\u81ea\u65cb\uff09\uff0c\u68c0\u67e5\u9501\u7684\u72b6\u6001\u662f\u5426\u53d8\u4e3a\u53ef\u7528\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u9501\u4e89\u7528\u4e0d\u9891\u7e41\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u81ea\u65cb\u4f1a\u6d88\u8017CPU\u8d44\u6e90\u3002 \u5b9e\u73b0\uff1a  acquire \u5230release\u4e4b\u95f4\u5176\u4ed6\u8fdb\u7a0b\u5728busy waiting\u2014\u2014too much spinning\uff0c\u6d6a\u8d39CPU time</li> <li>\u57fa\u4e8e\u961f\u5217\u7684\u9501\uff08Queue-based Locks\uff09\uff1a\u7ebf\u7a0b\u4f1a\u6309\u7167\u8bf7\u6c42\u9501\u7684\u987a\u5e8f\u8fdb\u5165\u961f\u5217\uff0c\u7b49\u5230\u9501\u91ca\u653e\u65f6\u6309\u7167\u987a\u5e8f\u88ab\u5524\u9192\u3002\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u673a\u5236\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6309\u7167\u516c\u5e73\u7684\u987a\u5e8f\u83b7\u5f97\u9501\u3002</li> </ol>"},{"location":"img/study/cs/sys2/review/#semaphore","title":"Semaphore\uff08\u4fe1\u53f7\u91cf\uff09","text":"<p>\u4fe1\u53f7\u91cf\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u7cfb\u7edf\u4e2d\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u589e\u52a0\u6216\u51cf\u5c11\uff0c\u901a\u5e38\u901a\u8fc7\u4e24\u79cd\u64cd\u4f5c\u6765\u63a7\u5236\uff1a</p> <ul> <li> <p>P\u64cd\u4f5c\uff08\u5c1d\u8bd5\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a wait\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u51cf\u5c11\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u82e5\u4fe1\u53f7\u91cf\u5927\u4e8e0\uff0c\u64cd\u4f5c\u6210\u529f\uff0c\u4fe1\u53f7\u91cf\u51cf1\uff1b\u82e5\u4fe1\u53f7\u91cf\u4e3a0\uff0c\u5219\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u5927\u4e8e0\u4e3a\u6b62\u3002</p> </li> <li> <p>V\u64cd\u4f5c\uff08\u589e\u52a0\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a signal\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u589e\u52a0\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u4fe1\u53f7\u91cf\u52a01\uff0c\u5982\u679c\u6709\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u56e0\u4e3a\u4fe1\u53f7\u91cf\u4e3a0\u800c\u88ab\u963b\u585e\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u4f1a\u88ab\u5524\u9192\u7ee7\u7eed\u6267\u884c\u3002 </p> </li> </ul> <p>\u5b9e\u73b0\uff1a  \u5b9e\u73b0\u4f7f\u7528\u4e86spinning lock\u4f1a\u6709</p>"},{"location":"img/study/cs/sys2/review/#deadlock-and-starvation","title":"Deadlock and starvation","text":"<p>Deadlock:</p> <ul> <li>\u6761\u4ef6\uff1a</li> <li>\u4e92\u65a5\u6761\u4ef6\uff08Mutual Exclusion\uff09\uff1a\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u5728\u5360\u7528\u8d44\u6e90\u65f6\uff0c\u8be5\u8d44\u6e90\u4e0d\u80fd\u540c\u65f6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bbf\u95ee\u3002</li> <li>\u5360\u6709\u5e76\u7b49\u5f85\uff08Hold and Wait\uff09\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u5176\u4ed6\u88ab\u5360\u7528\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff08No Preemption\uff09\uff1a\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u4ece\u8fdb\u7a0b\u4e2d\u5265\u593a\uff0c\u53ea\u80fd\u7531\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\uff08Circular Wait\uff09\uff1a\u5b58\u5728\u4e00\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u7684\u5faa\u73af\u94fe\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u91ca\u653e\u8d44\u6e90\u3002 \u793a\u4f8b\uff1a \u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0b A \u548c B \u5404\u81ea\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u53e6\u4e00\u4e2a\u8d44\u6e90\uff1a \u8fdb\u7a0b A \u6301\u6709\u8d44\u6e90 1\uff0c\u7b49\u5f85\u8d44\u6e90 2\u3002 \u8fdb\u7a0b B \u6301\u6709\u8d44\u6e90 2\uff0c\u7b49\u5f85\u8d44\u6e90 1\u3002 A,B\u76f8\u4e92\u7b49\u5f85\u5bfc\u81f4\u6b7b\u9501\u3002</li> </ul> <p>Starvation\uff1a</p>"},{"location":"img/study/cs/sys2/review/#atomic-variable","title":"Atomic variable","text":"<p>\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u7684\u53d8\u91cf\uff0c\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u3002</p>"},{"location":"img/study/cs/sys2/review/#star","title":"\u4e09\u4e2a\u95ee\u9898:star:","text":"<ol> <li>Bounded buffer problem: \u6709\u754c\u7f13\u51b2\u533a\u95ee\u9898\uff0c\u53c8\u79f0\u4e3a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u662f\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u7ecf\u5178\u540c\u6b65\u95ee\u9898\u3002\u5b83\u63cf\u8ff0\u4e86\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u5171\u4eab\u6709\u9650\u7f13\u51b2\u533a\u65f6\u5982\u4f55\u5b89\u5168\u6709\u6548\u5730\u4ea4\u6362\u6570\u636e\u7684\u573a\u666f\u3002</li> </ol> <p> 2. Readers-Writers Problem:</p>"},{"location":"img/study/cs/sys2/review/#deadlock","title":"Deadlock","text":""},{"location":"img/study/cs/sys2/review/#_4","title":"\u56db\u4e2a\u6761\u4ef6","text":"<p>\u6b7b\u9501\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a</p> <ol> <li>\u4e92\u65a5\u6761\u4ef6\uff1a\u6bcf\u4e2a\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u8be5\u8d44\u6e90\u5728\u88ab\u5360\u7528\u65f6\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u3002</li> <li>\u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u81f3\u5c11\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u4e14\u7b49\u5f85\u83b7\u53d6\u5176\u4ed6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff1a\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u5265\u593a\uff0c\u53ea\u80fd\u7b49\u8fdb\u7a0b\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u5b58\u5728\u8fdb\u7a0b\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u7684\u60c5\u51b5\u3002</li> </ol>"},{"location":"img/study/cs/sys2/review/#_5","title":"\u89e3\u51b3\u65b9\u6848","text":""},{"location":"img/study/cs/sys2/review/#deadlock-prevention","title":"Deadlock prevention","text":"<p>\u6253\u7834\u6b7b\u9501\u56db\u4e2a\u6761\u4ef6</p>"},{"location":"img/study/cs/sys2/review/#deadlock-aviodance","title":"Deadlock aviodance","text":"<p>Banker's algorithm:\u5728\u6bcf\u6b21\u8d44\u6e90\u5206\u914d\u524d\uff0c\u7cfb\u7edf\u901a\u8fc7\u6a21\u62df\u662f\u5426\u4f1a\u5bfc\u81f4\u6b7b\u9501\u6765\u5224\u65ad\u662f\u5426\u5206\u914d\u8be5\u8d44\u6e90\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u76ee\u6807\u662f\u786e\u4fdd\u7cfb\u7edf\u5904\u4e8e\u4e00\u4e2a\u201c\u5b89\u5168\u72b6\u6001\u201d\uff0c\u5373\u53ef\u4ee5\u907f\u514d\u6b7b\u9501\u7684\u53d1\u751f\u3002</p> <p></p>"},{"location":"img/study/cs/sys2/review/#deadlock-detection","title":"Deadlock detection","text":"<p>\u5bfb\u627e\u73af \u95ee\u9898\uff1astarvation</p>"},{"location":"img/study/cs/sys2/review/#deadlock-recovery","title":"Deadlock recovery","text":"<p>kill deadlock process</p>"},{"location":"img/study/cs/sys2/review/#software","title":"Software","text":"<p>\u5185\u5b58\u4e0d\u5b58\u6570\u636e\u7c7b\u578b</p> <ol> <li> <p>OS\uff1aresource allocator abstractor, in kernel mode</p> </li> <li> <p>events type in OS:interrupts(hardware) and exception(software)</p> </li> <li>:star:syscall(unprivileged):interface between user and kernel mode</li> <li>U-&gt;K: context is stored in kernel stack(kernel entry does this)</li> <li> <p>signals,timers and timeouts, user input events,process events, faults and exceptions</p> </li> <li> <p>Sys call:</p> </li> <li> <p>system service:</p> </li> <li>static linker:\u79fb\u690d\u6027\u66f4\u5f3a\uff0c\u9700\u5185\u5b58\u5927</li> <li>dynamic linker:</li> <li>loaders: a part of the operating system responsible for loading executable programs (or shared libraries) into memory for execution.  </li> </ol> <p>heap\u53ef\u5171\u4eab\uff1a stack(per-thread)\uff1a\u4e0d\u53ef\u5171\u4eab\uff1a\u6808\u5185\u5b58\u662f\u4e0e\u51fd\u6570\u8c03\u7528\u7d27\u5bc6\u7ed1\u5b9a\u7684\uff0c\u5e76\u4e14\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u88ab\u91ca\u653e\uff0c\u6240\u4ee5\u5b83\u7684\u751f\u547d\u5468\u671f\u662f\u77ed\u6682\u7684\u3001\u5c40\u90e8\u7684\u3002\u56e0\u6b64\uff0c\u6808\u4e0d\u9002\u5408\u5728\u4e0d\u540c\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\uff0c\u6808\u7684\u5185\u5bb9\u4e0d\u80fd\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u4f20\u9012\u3002</p> <ol> <li>Process(resource allocation and protection):</li> <li>PCB:\u5305\u542bPID,pstate,PC</li> </ol>"},{"location":"study/ailogic/","title":"Introduction","text":"<p>\u8fd9\u662f\u300a\u4eba\u5de5\u667a\u80fd\u903b\u8f91\u300b\u7684\u8bfe\u7a0b\u7b14\u8bb0\uff0c\u8bfe\u7a0b\u6559\u6750\u540c\u8bfe\u7a0b\u540d\u79f0\uff0c\u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e\uff08\u6b63\u5728\u51fa\u7248\uff09\u3002 \u8fd9\u91cc\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9\u90fd\u6765\u81ea\u4e66\u672c\u3002</p>"},{"location":"study/ailogic/first-order%20logic/","title":"\u4e00\u9636\u903b\u8f91","text":""},{"location":"study/ailogic/first-order%20logic/#_2","title":"\u8c13\u8bcd\u548c\u91cf\u8bcd","text":"<p>\u8bba\u57df\uff1a\u6240\u6709\u88ab\u8ba8\u8bba\u5bf9\u8c61\u7684\u96c6\u5408 \u4e2a\u4f53\uff1a\u8bba\u57df\u4e2d\u7684\u5143\u7d20\uff0c\u5373\u88ab\u8ba8\u8bba\u7684\u5bf9\u8c61</p> <p>\u5e38\u5143\uff1a\u7528\u4e8e\u8868\u793a\u786e\u5b9a\u5bf9\u8c61\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u53ef \u4ee5\u7528\u201cZS\u201d\u8868\u793a\u4e2a\u4f53\u201c\u5f20\u4e09\u201d\u3002 \u53d8\u5143\uff1a\u662f\u7528\u4e8e\u8868\u793a\u7ed9\u5b9a\u8bba\u57df\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u5bf9\u8c61\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5168\u603b\u4e2a\u4f53\u57df\uff0c\u8bed\u53e5\u201c\ud835\udc65 \u662f\u5b66\u751f\u201d\u4e2d\uff0c\ud835\udc65 \u662f\u53d8\u5143\u3002 \u51fd\u8bcd\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u8bba\u57df\uff0c\u4ece\u4e00\u7ec4\u4e2a\u4f53\u5230\u4e00\u4e2a\u4e2a\u4f53\u6620 \u5c04\u5173\u7cfb\u53ef\u4ee5\u7528\u51fd\u8bcd\u6765\u63cf\u8ff0\u3002\u4f8b\u5982\uff0c\u7528 \ud835\udc54(ZS) \u8868\u793a\u201c\u5f20\u4e09\u7684\u54e5\u54e5\u201d\u3002\u5176\u4e2d\uff0c\ud835\udc54(\ud835\udc65) \u662f \ud835\udc65 \u7684\u51fd\u8bcd\uff0c\u8868\u793a\u201c\ud835\udc65 \u7684\u54e5\u54e5\u201d\u3002</p> <p>\u9879\uff1a\u628a\u4e2a\u4f53\u5e38\u5143\u548c\u4e2a\u4f53\u53d8\u5143\u7edf\u79f0\u9879\u3002 \u8c13\u8bcd\uff1a\u7528\u4e8e\u63cf\u8ff0\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p>"},{"location":"study/ailogic/first-order%20logic/#_3","title":"\u4e00\u9636\u8bed\u8a00","text":"<p>\u4e00\u9636\u8bed\u8a00\u5305\u542b\u4e03\u7c7b\u7b26\u53f7\uff1a \u4e2a\u4f53\u5e38\u5143\uff1aa b c \u4e2a\u4f53\u53d8\u5143\uff1ax y z \u51fd\u6570\u7b26\u53f7\uff1af g h \u5173\u7cfb\u7b26\u53f7\uff1aF G H \u91cf\u8bcd\u7b26\u53f7\uff1a\\(\\forall, \\exist\\) \u8054\u7ed3\u7b26\u53f7\uff1a\\(\\lor, \\land\\)\u7b49 \u6807\u70b9\u7b26\u53f7\uff1a\u5de6\u62ec\u53f7\uff0c\u53f3\u62ec\u53f7\uff0c\u9017\u53f7</p> \u9879 <p>\u9879\u53ef\u5982\u4e0b\u5b9a\u4e49\uff1a (1) \u53d8\u5143\u548c\u5e38\u5143\u662f\u9879\u3002 (2) \u5982\u679c t1, . . . , t\ud835\udc5a \u662f\u9879\uff0cf \u662f \ud835\udc5a \u5143\u51fd\u6570\u7b26\u53f7\uff0c\u5219 f(t1, . . . , t\ud835\udc5a) \u662f\u9879\u3002 (3) \u53ea\u6709\u6709\u9650\u6b21\u4f7f\u7528 (1)(2) \u6761\u6b3e\u751f\u6210\u7684\u7b26\u53f7\u4e32\u624d\u662f\u9879\u3002</p> \u516c\u5f0f <p>\u516c\u5f0f\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\uff1a (1) F(t1, . . . , t\ud835\udc5b) \u662f\u516c\u5f0f\uff0c\u79f0\u4e3a\u539f\u5b50\u516c\u5f0f\u3002\u5176\u4e2d\uff0cF \u662f \ud835\udc5b \u5143\u5173\u7cfb\u7b26\u53f7\uff0c\u4e14 t1, . . . , t\ud835\udc5b \u662f\u9879\u3002 (2) \u5982\u679c t1 \u548c t2 \u662f\u9879\uff0c\u90a3\u4e48 (t1 \u2261 t2) \u662f\u539f\u5b50\u516c\u5f0f\u3002 (3) \u5982\u679c \ud835\udf19 \u548c \ud835\udf13 \u662f\u516c\u5f0f\uff0c\u4e14 \ud835\udc65 \u662f\u51fa\u73b0\u4e8e \ud835\udf19 \u4e2d\u7684\u81ea\u7531\u53d8\u5143\uff0c\u5219 (\u00ac\ud835\udf19)\uff0c(\ud835\udf19 \u2227 \ud835\udf13)\uff0c(\ud835\udf19 \u2228 \ud835\udf13)\uff0c(\ud835\udf19 \u2192 \ud835\udf13), (\ud835\udf19 \u2194 \ud835\udf13)\uff0c(\u2200\ud835\udc65\ud835\udf19), (\u2203\ud835\udc65\ud835\udf19) \u662f\u516c\u5f0f\u3002 (4) \u53ea\u6709\u6709\u9650\u6b21\u4f7f\u7528 (1)(2)(3) \u6761\u6b3e\u751f\u6210\u7684\u7b26\u53f7\u4e32\u624d\u662f\u516c\u5f0f\u3002</p> \u4ee3\u6362 <p>\u4ee3\u6362 \\(\\theta\\) \u662f\u4e00\u4e2a\u6709\u9650\u7684\u5bf9\u5b50\u96c6\u5408 \\(\\{x_1/t_1,\\dots, x_n/t_n\\}\\)\uff0c\u5176\u4e2d \\(x_i\\) \u662f\u53d8\u5143\uff0c\\(t_i\\) \u662f\u9879\u3002\u5982\u679c \\(\\phi\\) \u662f\u4e00\u4e2a\u516c\u5f0f\uff0c\\(\\theta\\) \u662f\u4e00\u4e2a\u4ee3\u6362\uff0c\u5219 \\(\\phi\\theta\\) \u662f\u4e00\u4e2a\u516c\u5f0f\u3002\u5728\u8be5\u516c\u5f0f\u4e2d\uff0c\u6240\u6709 \\(x_i\\) \u7684\u51fa\u73b0\u90fd\u88ab\u66ff\u6362\u4e3a \\(t_i\\)\u3002\u6709\u65f6\uff0c\u6211\u4eec\u4e5f\u628a \\(\\phi\\{x/t\\}\\)    \u4f5c \\(\\phi^{x}_t\\)</p>"},{"location":"study/ailogic/first-order%20logic/#_4","title":"\u8bed\u4e49","text":"<p>\u7ed9\u5b9a\u8bba\u57df \ud835\udc37\uff0c\u89e3\u91ca\u662f\u4e00\u4e2a\u6620\u5c04\uff0c\u628a\u4e2a\u4f53\u7b26\u53f7\u6620\u5c04\u4e3a \ud835\udc37 \u4e2d\u7684\u5bf9\u8c61\uff0c\u628a \ud835\udc5b \u5143\u51fd\u6570\u7b26\u53f7\u6620\u5c04\u4e3a\u4ece \ud835\udc37\ud835\udc5b \u5230 \ud835\udc37 \u7684\u51fd\u6570\uff0c\u628a \ud835\udc5b \u5143\u5173\u7cfb\u7b26\u53f7\u6620\u5c04\u4e3a \ud835\udc37 \u4e0a\u7684 \ud835\udc5b \u5143\u5173\u7cfb\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u81ea\u7531\u53d8\u5143\uff0c\u53ef\u4ee5\u628a\u8bba\u57df\u4e2d\u7684\u5bf9\u8c61\u6307\u6d3e\u7ed9\u5b83\u3002\u56e0\u6b64\uff0c\u6307\u6d3e\u4e5f\u662f\u4e00\u4e2a\u6620\u5c04\u3002\u6211\u4eec\u628a\u89e3\u91ca\u548c\u6307\u6d3e\u7edf\u79f0\u4f5c\u8d4b\u503c\uff0c\u8bb0\u4f5c\ud835\udc63\u3002</p> \u89e3\u91ca/\u6307\u6d3e <p>\u7ed9\u5b9a\u8bba\u57df \\(D\\)\uff0c\u6211\u4eec\u6709\uff1a - \u5bf9\u4e8e\u4e2a\u4f53\u5e38\u5143 a, \u628a\u5b83\u89e3\u91ca\u4e3a\u7684\u8bba\u57df\u4e2d\u7684\u4e2a\u4f53\uff0c\u8bb0\u4f5c \\(v(a)\\in D\\)\u3002 - \u5bf9\u4e8e \ud835\udc5b \u5143\u51fd\u6570\u7b26\u53f7 f, \u628a\u5b83\u89e3\u91ca\u4e3a\u4ece \\(D^n\\) \u5230 \ud835\udc37 \u7684\u51fd\u6570\uff0c\u8bb0\u4f5c \\(v(f): D^n\\mapsto D\\) - \u5bf9\u4e8e \ud835\udc5b \u5143\u8c13\u8bcd\u7b26\u53f7 F, \u628a\u5b83\u89e3\u91ca\u4e3a \ud835\udc37 \u4e0a\u7684 \ud835\udc5b \u5143\u5173\u7cfb\uff0c\u8bb0\u4f5c \\(v(F)\\subset D^n\\) - \u5bf9\u4e8e\u81ea\u7531\u53d8\u5143 x\uff0c\u7ed9\u5b83\u6307\u6d3e \ud835\udc37 \u4e2d\u7684\u4e2a\u4f53\uff0c\u8bb0\u4f5c \ud835\udc63(x) \u2208 \ud835\udc37\u3002 \u901a\u5e38\u628a \ud835\udc63(a), \ud835\udc63(f), \ud835\udc63(F), \ud835\udc63(x) \u5206\u522b\u8bb0\u4f5c \\(a^v,f^v, F^v,x^v\\).</p> <p>\u9879\u7684\u503c</p> <p>\u4e00\u9636\u903b\u8f91\u8bed\u8a00\u7684\u9879\u5728\u4ee5 \\(D\\) \u4e3a\u8bba\u57df\u7684\u8d4b\u503c \\(v\\) \u4e0b\u7684\u503c\u9012\u5f52\u5730\u5b9a\u4e49\u5982\u4e0b\uff1a 1. \\(a^v,x^v\\in D\\) 2. \\(f(t_1,\\dots,t_n)=f^v(t_1^v,\\dots,t_n^v)\\).</p> <p>\u4e3a\u4e86\u5b9a\u4e49\u516c\u5f0f\u5728\u8d4b\u503c\u4e4b\u4e0b\u7684\u771f\u5047\u503c\uff0c\u6211\u4eec\u7ea6\u5b9a\u5982\u4e0b\u4f7f\u7528\u7b26\u53f7\u7684\u89c4\u5b9a\u3002\u8bbe \ud835\udc63 \u662f\u4ee5 \ud835\udc37 \u4e3a\u8bba\u57df\u7684\u8d4b\u503c\uff0ca \u2208 \ud835\udc37, x \u662f\u81ea\u7531\u53d8\u5143\u7b26\u53f7\u3002\u6211\u4eec\u7528 \\(v(x/a)\\) \u8868\u793a\u4e00\u4e2a\u4ee5 \ud835\udc37 \u4e3a\u8bba\u57df\u7684\u8d4b\u503c\uff0c\u5b83\u9664\u4e86 \\(x^{v(x/a)}=a\\) \u4e4b\u5916\uff0c\u548c \\(v\\) \u5b8c\u5168\u76f8\u540c\u3002</p> <p>\u516c\u5f0f\u7684\u771f\u5047\u503c</p> <ul> <li>\\(F(t_1,\\dots,t_n)=\\begin{cases} 1,&amp; \\text{if}(t_1^v,\\cdots,t_n^v)\\in F^v\\\\ 0, &amp; \\text{else} \\end{cases}\\)</li> <li> <p>\\((\\neg \\phi)^v=\\begin{cases} 1, &amp; \\text{if}\\phi^v=0\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((t_1\\equiv t_2)=\\begin{cases} 1,&amp;\\text{if}t_1^v, t_2^v \\text{is the same in} D\\\\ 0,&amp;\\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\land \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v = \\psi^v = 1 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\lor \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v = 1 \\text{ or } \\psi^v = 1 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\rightarrow \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v = 0 \\text{ or } \\psi^v = 1 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\leftrightarrow \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v =\\psi^v\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\(\\top^v=1\\)</p> </li> <li> <p>\\(\\bot^v=0\\)</p> </li> <li> <p>\\(\\forall x\\phi^v=\\begin{cases} 1,&amp;\\text{if}\\phi^{v(x/a)}=1,\\text{for any} a\\in D\\\\ 0,&amp;\\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\(\\exist x\\phi^v=\\begin{cases} 1,&amp;\\text{if exist } a\\in D s.t. \\phi^{v(x/a)}=1,\\\\ 0,&amp;\\text{otherwise} \\end{cases}\\)</p> </li> </ul>"},{"location":"study/ailogic/first-order%20logic/#_5","title":"\u903b\u8f91\u63a8\u8bba","text":"<p>\u4e0e\u547d\u9898\u903b\u8f91\u5bf9\u5e94\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u4e00\u9636\u516c\u5f0f\u96c6\u5408 \\(\\Phi\\) \u4f5c\u4e3a\u524d\u63d0\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053 \\(\\Phi\\) \u662f\u5426\u5728\u903b\u8f91\u4e0a\u8574\u6db5\u67d0\u4e2a\u7ed3\u8bba \\(\\phi\\)\u3002</p> <p>\u903b\u8f91\u63a8\u8bba</p> <p>\u8bbe \\(\\Phi\\) \u662f\u4e00\u7ec4\u516c\u5f0f\u96c6\u5408\uff0c\\(\\phi\\) \u662f\u4e00\u4e2a\u516c\u5f0f\u3002\u903b\u8f91\u63a8\u8bba \\(\\Phi \\models \\phi\\) \u6210\u7acb\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u4efb\u610f\u975e\u7a7a\u8bba\u57df \\(D\\) \u4e0b\u7684\u8d4b\u503c \\(v\\)\uff0c\u5982\u679c \\(\\Phi^v=1\\) \u5219 \\(\\phi^v=1\\)\u3002</p> <p>\u53ef\u6ee1\u8db3\u6027\u4e0e\u6709\u6548\u6027</p> <p>\u8bbe \\(\\psi\\) \u662f\u4e00\u4e2a\u4e00\u9636\u516c\u5f0f - \\(\\psi\\) \u662f\u6709\u6548\u7684\uff0c\u5373 \\(\\models \\psi\\) \u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u4efb\u610f\u8bba\u57df \\(D\\) \u4e0b\u4efb\u4f55\u8d4b\u503c \\(v,\\psi^v=1\\) - \\(\\psi\\) \u662f\u53ef\u6ee1\u8db3\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u67d0\u4e2a\u8bba\u57df \\(D\\) \u4e0b\u7684\u8d4b\u503c \\(v\\) \u4f7f \\(\\psi^v=1\\)</p>"},{"location":"study/ailogic/introduction/","title":"\u8bfe\u7a0b\u5bfc\u8bba","text":"<p>\u65b9\u6cd5\u8bba\u89d2\u5ea6\u4e0a\uff0c\u5b9e\u73b0\u4eba\u5de5\u667a\u80fd\u7684\u9014\u5f84\uff1a</p> <ul> <li>\u7b26\u53f7\u4e3b\u4e49\uff1a\u4f7f\u7528\u7b26\u53f7\u8bed\u8a00\u8868\u793a\u77e5\u8bc6\uff0c\u901a\u8fc7\u7b26\u53f7\u8fd0\u7b97\u505a\u51fa\u51b3\u7b56\u548c\u5224\u65ad\u3002\u53ef\u4ee5\u63cf\u8ff0\u5404\u7c7b\u62bd\u8c61\u95ee\u9898\uff0c\u901a\u7528\u6027\u548c\u53ef\u89e3\u91ca\u6027\u597d\u3002</li> <li>\u4e9a\u7b26\u53f7\u4e3b\u4e49\uff1a\u91c7\u7528\u57fa\u4e8e\u6982\u7387\u7edf\u8ba1\u7684\u5b66\u4e60\uff0c\u5efa\u7acb\u5728\u5927\u6570\u636e\u57fa\u7840\u4e0a\uff0c\u53ef\u89e3\u91ca\u6027\u5dee\uff0c\u4e0d\u64c5\u957f\u89e3\u51b3\u6d89\u53ca\u590d\u6742\u903b\u8f91\u5173\u7cfb\u7684\u62bd\u8c61\u95ee\u9898\u3002</li> </ul> <p>\u7efc\u5408\u4e24\u8005\uff0c\u672c\u8bfe\u7a0b\u6db5\u76d6\u77e5\u8bc6\u7684\u8868\u793a\u548c\u63a8\u7406\u7684\u903b\u8f91\u5b66\u5185\u5bb9\u3002</p> <p>\u63a8\u7406\u7814\u7a76\u4e00\u7ec4\u547d\u9898\u96c6\u5408\u548c\u4e00\u4e2a\u65b0\u547d\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u524d\u8005\u4e3a\u524d\u63d0\uff0c\u540e\u8005\u4e3a\u7ed3\u8bba\u3002\u4f9d\u636e\u67d0\u79cd\u63a8\u7406\u5173\u7cfb\uff0c\u53ef\u4ee5\u4ece\u4e00\u7ec4\u524d\u63d0\u63a8\u51fa\u67d0\u4e2a\u7ed3\u8bba\u3002\u6211\u4eec\u628a\u524d\u63d0\u3001\u7ed3\u8bba\u548c\u63a8\u7406\u5173\u7cfb\u7ec4\u6210\u7684\u4e00\u4e2a\u7ed3\u6784\u79f0\u4e3a\u8bba\u8bc1\u3002</p> <p>\u63a8\u7406\u7c7b\u578b\uff1a</p> <ul> <li>\u4ece\u5df2\u6709\u77e5\u8bc6\u63a8\u51fa\u65b0\u77e5\u8bc6\uff1a\u6f14\u7ece\u63a8\u7406</li> <li>\u4ece\u6848\u4f8b\u5f52\u7eb3\u51fa\u65b0\u77e5\u8bc6\uff1a\u5f52\u7eb3\u63a8\u7406</li> <li>\u4ece\u6240\u89c2\u5bdf\u7684\u73b0\u8c61\u548c\u5df2\u6709\u77e5\u8bc6\u5bfb\u6c42\u6700\u4f73\u89e3\u91ca\uff1a\u6eaf\u56e0\u63a8\u7406</li> </ul>"},{"location":"study/ailogic/introduction/#_2","title":"\u63a8\u7406\u7c7b\u578b","text":"<p>\u547d\u9898\uff1a\u6709\u771f\u5047\u503c\u7684\u8bed\u53e5\u3002</p>"},{"location":"study/ailogic/introduction/#_3","title":"\u6f14\u7ece\u63a8\u7406","text":"<ol> <li>\u6709\u5355\u8c03\u6027\u7684\u6f14\u7ece\u63a8\u7406\uff1a\u8fd9\u79cd\u6f14\u7ece\u63a8\u7406\u53ef\u4ee5\u201c\u4fdd\u771f\u201d\uff08\u5982\u679c\u524d\u63d0\u4e3a\u771f\uff0c\u5219\u7ed3\u8bba\u5fc5\u4e3a\u771f\uff09</li> </ol> <p>\u7528\u6709\u6548\u6027\u6765\u523b\u753b\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u7684\u597d\u574f\u3002\u6211\u4eec\u8bf4\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u662f\u6709\u6548\u7684\u5f53\u4e14\u4ec5\u5f53\uff1a\u5982\u679c\u8be5\u8bba\u8bc1\u7684\u524d\u63d0\u4e3a\u771f\uff0c\u5219\u5176\u7ed3\u8bba\u4e5f\u5fc5\u7136\u4e3a\u771f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u4e0d\u662f\u6709\u6548\u7684\uff0c\u5219\u5b83\u4e0d\u80fd\u4fdd\u771f\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u8c2c\u8bef\u3002</p> <p>\u4f8b\uff1a \u6240\u6709M\u90fd\u662fP\u3002 \u6240\u6709S\u90fd\u662fM\u3002 \u56e0\u6b64\u6240\u6709S\u90fd\u662fP\u3002</p> <p>\u5355\u8c03\u6027\u6307\uff0c\u5982\u679c\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u7684\u7ed3\u8bba\u4e3a\u771f\uff0c\u90a3\u4e48\u5f53\u51fa\u73b0\u65b0\u524d\u63d0\u65f6\uff0c\u8be5\u7ed3\u8bba\u539f\u6765\u7684\u8bba\u8bc1\u4fdd\u6301\u4e3a\u771f\u3002</p> <ol> <li>\u975e\u5355\u8c03\u63a8\u7406\uff08\u62d3\u5c55\u6f14\u7ece\u63a8\u7406\uff09\uff1a\u6f14\u7ece\u8bba\u8bc1\u4e2d\u4fe1\u606f\u4e0d\u786e\u5b9a\u3001\u4e0d\u5b8c\u5907\u6216\u4e0d\u4e00\u81f4\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u5957\u7528\u4e0a\u8ff0\u63a8\u7406\u5f62\u5f0f\u800c\u5f97\u5230\u53ef\u9760\u7684\u7ed3\u8bba\u3002\u901a\u5e38\uff0c\u628a\u7ed3\u8bba\u53ef\u4ee5\u88ab\u65b0\u4fe1\u606f\u63a8\u7ffb\u7684\u63a8\u7406\u79f0\u4e3a\u975e\u5355\u8c03\u63a8\u7406\u3002</li> </ol> <p>\u4f8b\uff1a \u9e1f\u4f1a\u98de\u3002 \u591a\u90bb\u56fd\u662f\u9e1f\u3002 \u56e0\u6b64\u591a\u90bb\u56fd\u4f1a\u98de\u3002</p> <p>\u201c\u9e1f\u4f1a\u98de\u201d\u547d\u9898\u4e0d\u5b8c\u5907\u3002\u4e0d\u4e00\u5b9a\u6240\u6709\u9e1f\u90fd\u4f1a\u98de\u3002 \u4e3a\u4e86\u5bf9\u4e0d\u5b8c\u5907\u77e5\u8bc6\u8fdb\u884c\u63a8\u7406\uff0c\u53ef\u4ee5\u5728\u6f14\u7ece\u63a8\u7406\u4e2d\u4f7f\u7528\u201c\u6b63\u5e38\u6027\u5047\u8bbe\u201d\uff0c\u5e76\u7531\u6b64\u5f62\u6210\u57fa\u4e8e\u5047\u8bbe\u7684\u6f14\u7ece\u63a8\u7406\u3002</p> <p>\u4f8b\uff1a \u9e1f\u4f1a\u98de\uff0c\u9664\u975e\u53ef\u4ee5\u8bc1\u660e\u5b83\u4e0d\u6b63\u5e38\u3002 Tweety\u662f\u9e1f\u3002 \u56e0\u6b64\uff0cTweety\u4f1a\u98de\u3002</p> <p>\u9664\u4e86\u5728\u6f14\u7ece\u63a8\u7406\u4e2d\u4f7f\u7528\u201c\u6b63\u5e38\u6027\u5047\u8bbe\u201d\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u628a\u5305\u542b\u4f8b\u5916\u7684\u77e5\u8bc6\u8868\u793a\u6210\u53ef\u5e9f\u6b62\u89c4\u5219\u3002\u4e00\u822c\u5730\uff0c\u53ef\u5e9f\u6b62\u89c4\u5219\u53ef\u4ee5\u8868\u793a\u4e3a\u201c\u5178\u578b\u5730\uff0c\u5982\u679cA\u5219B\u201d\u3002B\u53ef\u88ab\u53cd\u9762\u8bc1\u636e\u63a8\u7ffb\u3002\u57fa\u4e8e\u53ef\u5e9f\u6b62\u89c4\u5219\u7684\u63a8\u7406\u79f0\u4e3a\u53ef\u5e9f\u6b62\u63a8\u7406\u3002</p>"},{"location":"study/ailogic/introduction/#_4","title":"\u5f52\u7eb3\u63a8\u7406","text":"<p>\u5f52\u7eb3\u63a8\u7406\uff1a\u4ece\u89c2\u5bdf\u4e8b\u4f8b\u5230\u4e00\u822c\u539f\u7406\u7684\u63a8\u7406\u3002\u5982\u679c\u4e00\u4e2a\u8bba\u8bc1\u4e2d\u7684\u63a8\u7406\u5173\u7cfb\u4e3a\u5f52\u7eb3\u63a8\u7406\uff0c\u5219\u79f0\u4e4b\u4e3a\u5f52\u7eb3\u8bba\u8bc1\u3002</p> <p>\u4f8b\uff1a \u8fd9\u4e9b\u8c46\u5b50\u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u3002 \u8fd9\u4e9b\u8c46\u5b50\u662f\u767d\u8272\u7684\u3002 \u56e0\u6b64\uff0c\u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u7684\u8c46\u5b50\u90fd\u662f\u767d\u8272\u7684\u3002</p> <p>\u7528\u5f52\u7eb3\u5f3a\u5ea6\u523b\u753b\u5f52\u7eb3\u8bba\u8bc1\u597d\u574f\uff1a\u4ece\u89c2\u5bdf\u4e8b\u4f8b\u5230\u4e00\u822c\u89c4\u5f8b\u7684\u63a8\u7406\u8fc7\u7a0b\u6709\u4e0d\u786e\u5b9a\u6027\uff0c\u53ef\u4ee5\u7528\u6982\u7387\u523b\u753b\uff0c\u6982\u7387\u5927\u5c0f\u53ef\u4ee5\u4f5c\u4e3a\u5f52\u7eb3\u5f3a\u5ea6\u3002</p>"},{"location":"study/ailogic/introduction/#_5","title":"\u6eaf\u56e0\u63a8\u7406","text":"<ol> <li> <p>\u6982\u5ff5\uff1a\u4ece\u89c2\u5bdf\u73b0\u8c61\u5230\u6700\u4f73\u89e3\u91ca\u7684\u63a8\u7406\u3002</p> </li> <li> <p>\u5f62\u5f0f\uff1a</p> </li> </ol> <p>\u5982\u679cp\u90a3\u4e48q\u3002 q\u6210\u7acb\u3002 \u56e0\u6b64p\u6210\u7acb\u3002</p> <p>\u4f8b\uff1a \u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u7684\u8c46\u5b50\u90fd\u662f\u767d\u8272\u7684\u3002 \u8fd9\u4e9b\u8c46\u5b50\u662f\u767d\u8272\u7684\u3002 \u56e0\u6b64\uff0c\u8fd9\u4e9b\u8c46\u5b50\u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u3002</p>"},{"location":"study/ailogic/introduction/#_6","title":"\u5173\u4e8e\u8bba\u8bc1\u7684\u63a8\u7406","text":"<p>\u5173\u4e8e\u8bba\u8bc1\u7684\u63a8\u7406\u662f\u4e00\u79cd\u901a\u8fc7\u6784\u9020\u8bba\u8bc1\u3001\u6bd4\u8f83\u8bba\u8bc1\u548c\u8bc4\u4f30\u8bba\u8bc1\u6765\u786e\u5b9a\u8bba\u8bc1\u7684\u53ef\u63a5\u53d7\u6027\u7684\u63a8\u7406\u3002\u5982\u4e24\u5c0f\u513f\u8fa9\u65e5\uff0c\u6bcf\u4eba\u90fd\u8bf4\u4e86\u4e24\u4e2a\u8bba\u8bc1\uff0c\u8bba\u8bc1\u95f4\u5b58\u5728\u53cd\u9a73\u5173\u7cfb\uff08\u7ed3\u8bba\u77db\u76fe\uff09\u3002\u6240\u4ee5\u5982\u679c\u63a5\u53d7\u4e00\u4e2a\u8bba\u8bc1\u5c31\u5fc5\u987b\u62d2\u7edd\u88ab\u5176\u53cd\u9a73\u7684\u8bba\u8bc1\u3002</p>"},{"location":"study/ailogic/introduction/#_7","title":"\u4eba\u5de5\u667a\u80fd\u903b\u8f91\u7684\u4e3b\u8981\u7814\u7a76\u65b9\u5411","text":""},{"location":"study/ailogic/introduction/#_8","title":"\u57fa\u4e8e\u6f14\u7ece\u63a8\u7406\u7684\u903b\u8f91","text":"<p>\u7ecf\u5178\u6f14\u7ece\u903b\u8f91\uff1a\u5bf9\u4e8e\u786e\u5b9a\u7684\u3001\u5b8c\u5907\u7684\u3001\u4e00\u81f4\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u91c7\u7528\u7ecf\u5178\u6f14\u7ece\u903b\u8f91\u6240\u63d0\u4f9b\u7684\u903b\u8f91\u8bed\u8a00\u548c\u63a8\u7406\u673a\u5236\u3002 \u5305\u62ec\u547d\u9898\u903b\u8f91\u548c\u4e00\u9636\u903b\u8f91\u3002\u5176\u4e2d\uff0c\u7ecf\u5178\u547d\u9898\u903b\u8f91\u4ee5\u7b80\u5355\u547d\u9898\u4f5c\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u7814\u7a76\u5982\u4f55\u4ece\u7b80\u5355\u547d\u9898\u51fa\u53d1\u901a\u8fc7\u8054\u7ed3\u8bcd\u6784\u9020\u590d\u5408\u547d\u9898\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u7814\u7a76\u590d\u5408\u547d\u9898\u4e4b\u95f4\u7684\u53ef\u63a8\u5bfc\u6027\u5173\u7cfb\u3002\u4e00\u9636\u903b\u8f91\u5728\u547d\u9898\u903b\u8f91\u7684\u57fa\u7840\u4e0a\uff0c\u7814\u7a76\u5305\u542b\u8c13\u8bcd\u548c\u91cf\u8bcd\u7684\u547d\u9898\u7684\u7ed3\u6784\u89c4\u5f8b\u4ee5\u53ca\u8fd9\u4e9b\u547d\u9898\u4e4b\u95f4\u7684\u53ef\u63a8\u5bfc\u6027\u5173\u7cfb\u3002</p> <p>\u975e\u5355\u8c03\u903b\u8f91\uff1a\u5f53\u77e5\u8bc6\u5b58\u5728\u4e0d\u5b8c\u5907\u6027\u548c\u4e0d\u4e00\u81f4\u6027\u65f6\uff0c\u7ecf\u5178\u4e00\u9636\u903b\u8f91\u4e0d\u8db3\u4ee5\u63d0\u4f9b\u5408\u9002\u7684\u8868\u793a\u8bed\u8a00\u548c\u63a8\u7406\u673a\u5236\uff0c\u9700\u8981\u52a0\u4ee5\u6269\u5c55\uff0c\u5f62\u6210\u5404\u79cd\u975e\u5355\u8c03\u903b\u8f91\u3002</p> <p>\u7ecf\u5178\u4e00\u9636\u903b\u8f91\u7684\u5c40\u9650\uff1a</p> <ul> <li>\u63a8\u7406\u65f6\u524d\u63d0\u6761\u4ef6\u53ef\u80fd\u6570\u91cf\u5f88\u5927\u6216\u8005\u96be\u4ee5\u7a77\u4e3e\uff0c\u65e0\u6cd5\u5728\u4e00\u9636\u903b\u8f91\u4e2d\u5f97\u5230\u5408\u7406\u8868\u8fbe\u3002\uff08\u8981\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\u9700\u8981\u8003\u8651\u5404\u4e2a\u65b9\u9762\u7684\u524d\u63d0\uff0c\u5c24\u5176\u662f\u5b9e\u8df5\u4e2d\uff09</li> <li>\u5b9e\u8df5\u63a8\u7406\u4e2d\u4e0d\u540c\u89c4\u8303\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u51b2\u7a81\u3002</li> </ul> <p>\u89e3\u51b3\u65b9\u5f0f\uff1a\u62d3\u5c55\u4e00\u9636\u903b\u8f91\u63a8\u7406\uff1a</p> <ol> <li>\u6dfb\u52a0\u6b63\u5e38\u6027\u5047\u8bbe\u800c\u6784\u9020\u7f3a\u7701\u89c4\u5219\u3002\u4e00\u6761\u7f3a\u7701\u89c4\u5219\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u201c\u5982\u679c\u524d\u63d0\u6761\u4ef6:\u8fa9\u62a4\u6761\u4ef6\uff0c\u90a3\u4e48\u7ed3\u8bba\u201d\u3002\u7ed9\u5b9a\u4e00\u6761\u7f3a\u7701\u89c4\u5219\uff0c\u5f53\u5176\u524d\u63d0\u6761\u4ef6\u53ef\u8bc1\uff0c\u800c\u8fa9\u62a4\u6761\u4ef6\u7684\u53cd\u9762\u4e0d\u53ef\u8bc1\u65f6\uff0c\u53ef\u4ee5\u63a8\u51fa\u7ed3\u8bba\u3002\u9700\u8981\u6ce8\u610f\uff0c\u65b0\u6761\u4ef6\u6dfb\u52a0\u53ef\u4ee5\u63a8\u7ffb\u7ed3\u8bba\u3002</li> </ol> <p>\u4f8b\uff1a\u201c\u8f6c\u52a8\u70b9\u706b\u94a5\u5319\uff1a\u53d1\u52a8\u673a\u542f\u52a8/\u53d1\u52a8\u673a\u542f\u52a8\u201d\u662f\u4e00\u6761\u7f3a\u7701\u89c4\u5219\u3002\u5f53\u5904\u4e8e\u201c\u8fa9\u62a4\u6761\u4ef6\u201d\u4f4d\u7f6e\u7684\u201c\u53d1\u52a8\u673a\u542f\u52a8\u201d\u7684\u53cd\u9762\uff0c\u5373\u201c\u53d1\u52a8\u673a\u65e0\u6cd5\u542f\u52a8\u201d\u4e0d\u53ef\u8bc1\u65f6\uff0c\u53ef\u4ee5\u63a8\u51fa\u201c\u53d1\u52a8\u673a\u542f\u52a8\u201d\u8fd9\u4e2a\u7ed3\u8bba\u3002</p> <ol> <li>\u6dfb\u52a0\u53ef\u5e9f\u6b62\u89c4\u5219\uff1a\u201c\u5178\u578b\u5730/\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679cA\u90a3\u4e48B\u201d</li> </ol>"},{"location":"study/ailogic/introduction/#_9","title":"\u5f52\u7eb3\u3001\u4e0d\u786e\u5b9a\u6027\u4e0e\u56e0\u679c\u63a8\u65ad","text":"<p>\u5f52\u7eb3\u903b\u8f91\u7f16\u7a0b\uff1a\u628a\u5f52\u7eb3\u63a8\u7406\u4e0e\u673a\u5668\u5b66\u4e60\u7406\u8bba\u76f8\u7ed3\u5408\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4ece\u6848\u4f8b\u4e2d\u81ea\u52a8\u5b66\u4e60\u4e00\u822c\u89c4\u5219\u3002\u7ed9\u5b9a\u80cc\u666f\u77e5\u8bc6\u53ca\u6848\u4f8b\uff0c\u5f52\u7eb3\u903b\u8f91\u7f16\u7a0b\u7cfb\u7edf\u81ea\u52a8\u63a8\u5bfc\u51fa\u4e00\u4e2a\u903b\u8f91\u7a0b\u5e8f\uff0c\u4f7f\u5176\u8574\u6db5\u6240\u6709\u7684\u6b63\u4f8b\uff0c\u800c\u4e0d\u8574\u6db5\u4efb\u4f55\u53cd\u4f8b\u3002</p> <p>\u4e0d\u786e\u5b9a\u63a8\u7406\uff1a\u5bf9\u4e8e\u4e0d\u786e\u5b9a\u7684\u77e5\u8bc6\uff0c\u4f9d\u636e\u4e0d\u786e\u5b9a\u6027\u7684\u7279\u70b9\uff0c\u53ef\u4ee5\u533a\u5206\u4e09\u79cd\u4e0d\u540c\u7684\u63a8\u7406\u7c7b\u578b\u3002\u7b2c\u4e00\u79cd\u63a8\u7406\u57fa\u4e8e\u5ba2\u89c2\u6982\u7387\u7406\u8bba\u3002\u5ba2\u89c2\u6982\u7387\u5173\u4e8e\u4e8b\u4ef6\u7684\u53d1\u751f\u7387\u3002\u7b2c\u4e8c\u79cd\u63a8\u7406\u57fa\u4e8e\u4e3b\u89c2\u6982\u7387\uff0c\u5373\u4e3b\u4f53\u5bf9\u547d\u9898\u786e\u5b9a\u6027\u7684\u4e3b\u89c2\u786e\u4fe1\u7a0b\u5ea6\u3002\u57fa\u4e8e\u4e3b\u89c2\u6982\u7387\u7684\u63a8\u7406\u6a21\u578b\u5305\u62ec\u8d1d\u53f6\u65af\u7f51\u7edc\u3001\u4fe1\u5ff5\u7f51\u7edc\u3001\u8bc1\u636e\u7406\u8bba\u7b49\u3002\u7b2c\u4e09\u79cd\u63a8\u7406\u57fa\u4e8e\u6a21\u7cca\u5ea6\u3002</p> <p>\u56e0\u679c\u63a8\u65ad\uff1a\u56e0\u679c\u63a8\u65ad\u7814\u7a76\u5982\u4f55\u4ece\u89c2\u6d4b\u7ed3\u679c\u4e2d\u5bfb\u627e\u5f15\u53d1\u7ed3\u679c\u7684\u539f\u56e0\uff0c\u8003\u8651\u6570\u636e\u751f\u6210\u7684\u8fc7\u7a0b\uff0c\u7531\u679c\u6eaf\u56e0\u3002\u56e0\u679c\u63a8\u65ad\u7684\u6a21\u578b\u5305\u62ec\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u548c\u56e0\u679c\u56fe\u3002</p>"},{"location":"study/ailogic/introduction/#_10","title":"\u77e5\u8bc6\u7684\u8868\u793a\u4e0e\u63a8\u7406","text":""},{"location":"study/ailogic/proposition/","title":"\u547d\u9898\u903b\u8f91","text":""},{"location":"study/ailogic/proposition/#_2","title":"\u547d\u9898\u4e0e\u8054\u7ed3\u8bcd","text":"<p>\u8054\u7ed3\u8bcd\uff1a\u5426\u5b9a\u8bcd\uff08\u5e76\u975e\uff09\u3001\u5408\u53d6\u8bcd\uff08\u5e76\u4e14\uff09\u3001\u6790\u53d6\u8bcd\uff08\u6216\uff09\u3001\u8574\u6db5\u8bcd\uff08\u5982\u679c . . . \u90a3\u4e48 . . . \uff09 \u548c\u7b49\u503c\u8bcd\uff08\u5f53\u4e14\u4ec5\u5f53\uff09 \u5176\u4e2d\u4ec5\u5426\u5b9a\u8bcd\u4e3a\u4e00\u5143\u8054\u7ed3\u8bcd\uff0c\u5176\u4ed6\u90fd\u662f\u4e8c\u5143\u3002</p>"},{"location":"study/ailogic/proposition/#mathcallp","title":"\u547d\u9898\u8bed\u8a00\\(\\mathcal{L}^p\\)","text":"<ol> <li>\u547d\u9898\u7b26\u53f7\uff1a<ul> <li>\u6c38\u771f\u547d\u9898\uff1a\\(\\top\\)</li> <li>\u6c38\u5047\u547d\u9898\uff1a\\(\\bot\\)</li> </ul> </li> <li>\u8054\u7ed3\u7b26\u53f7\uff1a\\(\\neg, \\lor, \\land, \\rightarrow, \\leftrightarrow\\)</li> <li>\u6807\u70b9\u7b26\u53f7\uff1a\u5de6\u3001\u53f3\u62ec\u53f7</li> </ol> <p>\u5b9a\u4e49\uff1a\u547d\u9898\u516c\u5f0f</p> <p>\u547d\u9898\u516c\u5f0f\uff0c\u7b80\u79f0\u516c\u5f0f\uff0c\u53ef\u5b9a\u4e49\u5982\u4e0b\uff1a (1) \u547d\u9898\u7b26\u53f7\u662f\u516c\u5f0f\uff0c\u79f0\u4e3a\u539f\u5b50\u516c\u5f0f\u3002 (2) \u5982\u679c \ud835\udf19 \u548c \ud835\udf13 \u662f\u516c\u5f0f\uff0c\u90a3\u4e48 (\u00ac\ud835\udf19), (\ud835\udf19 \u2227 \ud835\udf13), (\ud835\udf19 \u2228 \ud835\udf13), (\ud835\udf19 \u2192 \ud835\udf13), (\ud835\udf19 \u2194 \ud835\udf13) \u4e5f\u662f\u516c\u5f0f\u3002 (3) \u53ea\u6709\u6709\u9650\u6b21\u4f7f\u7528 (1) (2) \u6761\u6b3e\u6240\u7ec4\u6210\u7684\u7b26\u53f7\u4e32\u662f\u516c\u5f0f\u3002 \u6216\u53ef\u7528BNF\u5f62\u5f0f\u8868\u793a\u5982\u4e0b\uff1a $$ \\phi::=p|(\\neg \\phi)|(\\phi\\land \\phi)|(\\phi\\lor \\phi)|(\\phi\\rightarrow \\phi)|(\\phi\\leftrightarrow \\phi) $$</p> <p>\u4efb\u610f\u7684\u547d\u9898\u516c\u5f0f\u6709\u4e14\u53ea\u6709\u5982\u4e0b\u5f62\u5f0f\u4e4b\u4e00\uff1a\ud835\udc5d\uff0c(\u00ac\ud835\udf19)\uff0c(\ud835\udf19\u2227\ud835\udf13)\uff0c(\ud835\udf19\u2228\ud835\udf13)\uff0c(\ud835\udf19 \u2192 \ud835\udf13)\uff0c(\ud835\udf19 \u2194 \ud835\udf13)\u3002</p>"},{"location":"study/ailogic/proposition/#_3","title":"\u8bed\u4e49","text":"<p>\u5b9a\u4e49\uff1a\u771f\u5047\u8d4b\u503c</p> <p>\u771f\u5047\u8d4b\u503c\u662f\u4ee5\u6240\u6709\u547d\u9898\u7b26\u53f7\u7684\u96c6\u4e3a\u5b9a\u4e49\u57df\uff0c\u4ee5\u771f\u5047\u503c \\({1, 0}\\) \u4e3a\u503c\u57df\u7684\u51fd\u6570\u3002 \u771f\u5047\u8d4b\u503c \\(v\\) \u7ed9\u516c\u5f0f \\(p\\) \u8bb0\u4e3a \\(p^v\\).</p> <p>\u5b9a\u4e49\uff1a\u516c\u5f0f\u7684\u771f\u503c</p> <p>\u771f\u5047\u8d4b\u503c \ud835\udc63 \u7ed9\u516c\u5f0f\u6307\u6d3e\u7684\u771f\u503c\u9012\u5f52\u5730\u5b9a\u4e49\u5982\u4e0b\uff1a  </p> <ul> <li>\\(p^v\\in{1,0}\\)</li> <li> <p>\\((\\neg \\phi)^v=\\begin{cases} 1, &amp; \\text{if}\\phi^v=0\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\land \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v = \\psi^v = 1 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\lor \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v = 1 \\text{ or } \\psi^v = 1 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\rightarrow \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v = 0 \\text{ or } \\psi^v = 1 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li> <p>\\((\\phi \\leftrightarrow \\psi)^v = \\begin{cases} 1, &amp; \\text{if } \\phi^v =\\psi^v\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\)</p> </li> <li>\\(\\top^v=1\\)</li> <li>\\(\\bot^v=0\\)</li> </ul> <p>\u4e00\u4e2a\u547d\u9898\u516c\u5f0f\u5728\u4efb\u4f55\u771f\u5047\u8d4b\u503c\u4e0b\u5747\u4e3a\u771f\uff0c\u79f0\u4e3a\u91cd\u8a00\u5f0f\uff1b\u4e00\u4e2a\u547d\u9898\u516c\u5f0f\u5728\u4efb\u4f55\u771f\u5047\u8d4b\u503c\u4e0b\u5747\u4e3a\u5047\uff0c\u79f0\u4e3a\u77db\u76fe\u5f0f\uff1b\u4e00\u4e2a\u547d\u9898\u516c\u5f0f\u5728\u67d0\u4e2a\u771f\u5047\u8d4b\u503c\u4e3a\u771f\uff0c\u79f0\u4e3a\u53ef\u6ee1\u8db3\u5f0f\u3002</p>"},{"location":"study/ailogic/proposition/#_4","title":"\u903b\u8f91\u63a8\u8bba","text":"<p>\u7ed9\u5b9a\u4e00\u7ec4\u516c\u5f0f\u96c6\u5408 \\(\\Phi\\) \u4f5c\u4e3a\u524d\u63d0\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053 \\(\\Phi\\) \u662f\u5426\u5728\u903b\u8f91\u4e0a\u8574\u6db5\u67d0\u4e2a\u7ed3\u8bba \\(\\phi\\)\u3002\u5982\u679c\u5bf9 \u4e8e\u4efb\u4f55\u771f\u5047\u8d4b\u503c \\(v\\), \\(\\Phi^v=1\\)  \u603b\u662f\u8574\u6db5 \\(\\phi^v=1\\)\uff0c\u90a3\u4e48\u6211\u4eec\u8bf4 \\(\\phi\\) \u662f \\(\\Phi\\) \u7684\u903b\u8f91\u63a8\u8bba\uff0c\u8bb0\u4f5c \\(\\Phi\\models \\phi\\)</p> <p>\u5219\u53ef\u8fdb\u884c\u5982\u4e0b\u5b9a\u4e49\uff1a \u7ed9\u5b9a\u4e00\u7ec4\u547d\u9898\u516c\u5f0f\u96c6\u5408 \\(\\Phi\\) \u548c\u4e00\u4e2a\u547d\u9898\u516c\u5f0f \\(\\phi\\)\uff0c\\(\\Phi\\models\\phi\\) \u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u4efb\u610f \\(v\\)\uff0c\u5982\u679c \\(\\Phi^v=1\\) \uff0c\u90a3\u4e48 \\(\\phi^v=1\\)</p> <p>\u5b9a\u4e49\uff1a\u6709\u6548\u6027</p> <p>\u7ed9\u5b9a\u547d\u9898\u903b\u8f91\u516c\u5f0f \ud835\udf19\uff0c\u5982\u679c \\(\\models\\phi\\)\uff0c\u6211\u4eec\u8bf4 \ud835\udf19 \u662f\u6709\u6548\u7684\u3002</p> <p>\u5b9a\u74061</p> <p>\\({\\phi_1,\\phi_2,\\dots,\\phi_n}\\models\\phi\\) \u5f53\u4e14\u4ec5\u5f53 \\(\\models\\phi_1\\land\\phi_2\\land\\cdots\\phi_n\\rightarrow\\phi\\)</p> <p>\u5b9a\u74062\uff1a\u6709\u6548\u6027\u4e0e\u53ef\u6ee1\u8db3\u6027</p> <p>\u8bbe \ud835\udf19 \u662f\u547d\u9898\u516c\u5f0f\u3002\u90a3\u4e48\uff0c\ud835\udf19 \u662f\u53ef\u6ee1\u8db3\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \u00ac\ud835\udf19 \u4e0d\u662f\u6709\u6548\u7684\uff1b\ud835\udf19 \u662f\u6709\u6548\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \u00ac\ud835\udf19 \u4e0d\u662f\u53ef\u6ee1\u8db3\u7684\u3002</p> <p>\u5b9a\u7406</p> <p>\u03a6 |= \ud835\udf19\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\u03a6 \u222a {\u00ac\ud835\udf19} \u662f\u4e0d\u53ef\u6ee1\u8db3\u7684\uff0c\u5373 \u03a6 \u222a {\u00ac\ud835\udf19} |= \u22a5\u3002</p> <p>\u5b9a\u4e49\uff1a\u8bed\u4e49\u7b49\u4ef7\u6027</p> <p>\u8bbe \ud835\udf19 \u548c \ud835\udf13 \u662f\u547d\u9898\u516c\u5f0f\u3002\u6211\u4eec\u8bf4 \ud835\udf19 \u548c \ud835\udf13 \u8bed\u4e49\u7b49\u4ef7\uff0c\u8bb0\u4f5c \ud835\udf19 |=| \ud835\udf13\uff0c\u5f53\u4e14\u4ec5\u5f53 \ud835\udf19 |= \ud835\udf13 \u5e76\u4e14\ud835\udf13 |= \ud835\udf19\u3002</p> <p>\u5b9a\u7406\uff1a\u7b49\u503c\u66ff\u6362</p> <p>\u7ed9\u5b9a \ud835\udf19 |=| \ud835\udf13, \u4e14 \ud835\udf19 \u662f \ud835\udf11 \u7684\u4e00\u90e8\u5206\u3002\u628a \ud835\udf11 \u4e2d\u7684 \ud835\udf19 \u66ff\u6362\u6210 \ud835\udf13 \u5230 \ud835\udf11\u2032\u3002\u6211\u4eec\u6709 \ud835\udf11 |=| \ud835\udf11\u2032\u3002</p> <p>\u8bed\u4e49\u7b49\u4ef7\u5173\u7cfb\u6ee1\u8db3\u81ea\u53cd\u6027\u3001\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027\uff0c\u5373\u547d\u9898\u516c\u5f0f\u7684\u8bed\u4e49\u7b49\u4ef7\u5173\u7cfb\u662f\u4e00\u79cd\u7b49\u4ef7\u5173\u7cfb\u3002</p>"},{"location":"study/ailogic/proposition/#_5","title":"\u8303\u5f0f","text":"<p>\u5b9a\u4e49\uff1a\u5408\u53d6\u8303\u5f0f</p> <p>\u547d\u9898\u516c\u5f0f \ud835\udf19 \u79f0\u4e3a\u547d\u9898\u516c\u5f0f \ud835\udf13 \u7684\u5408\u53d6\u8303\u5f0f\uff0c\u5982\u679c \ud835\udf19 |=| \ud835\udf13\uff0c\u4e14 \ud835\udf19 \u5448\u5982\u4e0b\u5f62\u5f0f\uff1a $ D_1 \\land D_2\\land\\cdots\\land D_m$ \u5176\u4e2d\uff0c\\(D_i(i=1,2,\\dots,m)\\) \u79f0\u4e3a \\(\\phi\\) \u7684\u5b50\u53e5\uff0c\u5f62\u5982 $ L_1 \\lor L_2 \\lor \\cdots \\lor L_n$\u3002   \\(L_j\\) \u4e3a\u539f\u5b50\u516c\u5f0f\u6216\u539f\u5b50\u516c\u5f0f\u5426\u5b9a\uff0c\u79f0 \\(L_i\\) \u4e3a\u5b50\u53e5\u7684\u6587\u5b57\u3002</p> <p>\u5b9a\u7406</p> <p>\u4efb\u4f55\u547d\u9898\u516c\u5f0f\u4e0e\u5b83\u7684\u5408\u53d6\u8303\u5f0f\uff08\u6790\u53d6\u8303\u5f0f\uff09\u7b49\u4ef7\u3002</p>"},{"location":"study/ailogic/proposition/#_6","title":"\u5f62\u5f0f\u63a8\u6f14","text":"<p>\u76ee\u6807\uff1a\u5efa\u7acb\u4e00\u4e2a\u57fa\u4e8e\u89c4\u5219\u7684\u63a8\u7406\u7cfb\u7edf\uff0c\u6765\u5224\u65ad\u4e00\u4e2a\u6709\u6548\u63a8\u7406\u662f\u5426\u6210\u7acb\u3002\u8fd9\u6837\u7684\u89c4\u5219\u4e3a\u63a8\u7406\u89c4\u5219\u3002 MP\u89c4\u5219\uff08\u80af\u5b9a\u524d\u4ef6\u89c4\u5219\u3001\u8574\u542b\u6d88\u53bb\uff09\uff1a\u7531 \\(\\phi\\) \u548c \\(\\phi \\rightarrow \\psi\\) \u53ef\u5f97\u5230 \\(\\psi\\)\u3002</p> <p>\u5f62\u5f0f\u53ef\u63a8\u6f14</p> <p>\u7ed9\u5b9a\u4e00\u7ec4\u524d\u63d0\u96c6\u5408 \u03a6 = {\ud835\udf191, \ud835\udf192, \ud835\udf193, . . . , , \ud835\udf19\ud835\udc5b} \u548c\u4e00\u4e2a\u7ed3\u8bba \ud835\udf13, \u5176\u4e2d \ud835\udf19\ud835\udc56 \u548c \ud835\udf13 \u90fd\u662f\u516c\u5f0f\u3002\u6211\u4eec\u8bf4\u4ece\u8fd9\u7ec4\u524d\u63d0\u5230\u8fd9\u4e2a\u7ed3\u8bba\u662f\u5f62\u5f0f\u53ef\u63a8\u6f14\u7684\uff0c\u8bb0\u4f5c \u03a6 \u22a2 \ud835\udf13\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u8bc1\u660e\uff1a\\(\\psi_1, \\psi_2,\\cdots,\\psi_m\\) \u4f7f\u5f97 \\(\\psi_m=\\psi\\)\u3002\u5176\u4e2d\uff0c\u6bcf\u4e2a \\(\\psi_i(i=1,2,3,\\dots, m)\\) \u8981\u4e48\u5c5e\u4e8e {\ud835\udf191, \ud835\udf192, \ud835\udf193, . . . , , \ud835\udf19\ud835\udc5b}\uff0c\u8981\u4e48\u4f9d\u636e \\({\\psi_1,\\dots,\\psi_{i-1}}\\) \u4e2d\u7684\u516c\u5f0f\u901a\u8fc7\u5e94\u7528\u4e00\u6761\u63a8\u7406\u89c4\u5219\u5f97\u5230\u3002</p> <p>\u63a8\u7406\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u548c\u5b8c\u5907\u6027</p> <p>\u8bbe \u22a2\ud835\udc45 \u662f\u7531\u4e00\u7ec4\u5f62\u5f0f\u63a8\u6f14\u89c4\u5219\u96c6\u5408 \ud835\udc45 \u6784\u6210\u7684\u63a8\u7406\u7cfb\u7edf\uff0c\u79f0\u4e3a\u81ea\u7136\u6f14\u7ece\u7cfb\u7edf\u3002\u5bf9\u4e8e\u4efb\u610f\u516c\u5f0f\u96c6\u5408 \u03a6 \u548c\u516c\u5f0f \ud835\udf13, \u6211\u4eec\u8bf4: - \u22a2\ud835\udc45 \u662f\u53ef\u9760\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5982\u679c \u03a6 \u22a2\ud835\udc45 \ud835\udf13\uff0c\u5219 \u03a6 \\(\\models\\) \ud835\udf13\u3002 - \u22a2\ud835\udc45 \u662f\u5b8c\u5907\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5982\u679c \u03a6 \\(\\models\\) \ud835\udf13\uff0c\u5219 \u03a6 \u22a2\ud835\udc45 \ud835\udf13\u3002</p> <ul> <li>\u5982\u679c\u4e00\u4e2a\u63a8\u7406\u7cfb\u7edf\u662f\u53ef\u9760\u7684\uff0c\u90a3\u4e48\u5b83\u4ece\u4e00\u7ec4\u771f\u547d\u9898\u51fa\u53d1\uff0c\u901a\u8fc7\u5f62\u5f0f\u63a8\u6f14\u5f97\u5230\u7684\u7ed3\u8bba\u4e5f\u662f\u771f\u7684\u3002\u8fd9\u4e00\u70b9\u786e\u4fdd\u4e86\u63a8\u7406\u7cfb\u7edf\u7684\u6b63\u786e\u6027\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u63a8\u7406\u7cfb\u7edf\u662f\u5b8c\u5907\u7684\uff0c\u90a3\u4e48\u4ece\u4e00\u7ec4\u771f\u547d\u9898\u51fa\u53d1\uff0c\u53ef\u4ee5\u63a8\u51fa\u8fd9\u7ec4\u771f\u547d\u9898\u6240\u8574\u6db5\u7684\u6240\u6709\u7ed3\u8bba\u3002</li> </ul>"},{"location":"study/ailogic/proposition/#_7","title":"\u6d88\u89e3\u539f\u7406","text":""},{"location":"study/ailogic/proposition/#_8","title":"\u6d88\u89e3\u63a8\u6f14\u7cfb\u7edf","text":"<p>\u91c7\u7528\u5b50\u53e5\u516c\u5f0f\u8868\u793a\u5408\u53d6\u8303\u5f0f\uff1a\u4e00\u4e2a\u5b50\u53e5\u770b\u51fa\u4e00\u4e2a\u6587\u5b57\u7684\u96c6\u5408\uff0c\u4e00\u4e2a\u5408\u53d6\u8303\u5f0f\u770b\u6210\u5b50\u53e5\u7684\u96c6\u5408\u3002\uff08\u4e0d\u8003\u8651\u91cd\u590d\u548c\u987a\u5e8f\uff09</p> <p>\u5b50\u53e5\u516c\u5f0f</p> <p>\u5b50\u53e5\u516c\u5f0f\u662f\u5b50\u53e5\u7684\u96c6\u5408\uff0c\u53ef\u7406\u89e3\u4e3a\u5b50\u53e5\u7684\u5408\u53d6\u3002\u5b50\u53e5\u662f\u6587\u5b57\u7684\u96c6\u5408\uff0c\u53ef\u7406\u89e3\u4e3a\u6587\u5b57\u7684\u6790\u53d6\u3002\u4e3a\u4e86\u533a\u5206\u8fd9\u4e24\u79cd\u96c6\u5408\uff0c\u6211\u4eec\u628a\u6587\u5b57\u7684\u96c6\u5408\u8868\u793a\u4e3a [\ud835\udc3f1, \ud835\udc3f2, . . . , \ud835\udc3f\ud835\udc5b]\uff0c\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u6790\u53d6\u5f0f\ud835\udc3f1\u2228\ud835\udc3f2\u2228\u00b7 \u00b7 \u00b7\u2228\ud835\udc3f\ud835\udc5b\uff0c\u5176\u4e2d \ud835\udc3f\ud835\udc56 (\ud835\udc56 = 1, 2, . . . , \ud835\udc5b) \u662f\u6587\u5b57\uff1b\u628a\u5b50\u53e5\u7684\u96c6\u5408\u8868\u793a\u4e3a {\ud835\udc371, \ud835\udc372, . . . , \ud835\udc37\ud835\udc5a}\uff0c\u7b49\u4ef7\u4e8e \ud835\udc371 \u2227 \ud835\udc372 \u2227 \u00b7 \u00b7 \u00b7 \u2227 \ud835\udc37\ud835\udc5a\uff0c\u5176\u4e2d \ud835\udc37\ud835\udc56 (\ud835\udc56 = 1, 2, . . . , \ud835\udc5a) \u662f\u5b50\u53e5\u3002</p> <p>\u6d88\u89e3\u89c4\u5219</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b50\u53e5\uff0c\u63a8\u51fa\u4e00\u4e2a\u65b0\u5b50\u53e5\uff1a\u4ece\u5b50\u53e5 \ud835\udc371 \u222a {\ud835\udc3f} \u548c \ud835\udc372 \u222a {\\(\\bar{\ud835\udc3f}\\)} \u63a8\u51fa\u5b50\u53e5 \ud835\udc371 \u222a \ud835\udc372\u3002\u5176\u4e2d\uff0c\ud835\udc371 \u548c \ud835\udc372 \u53ef\u4e3a\u7a7a\u96c6\u3002\ud835\udc371 \u222a \ud835\udc372 \u79f0\u4e3a\u8f93\u5165\u5b50\u53e5\u5173\u4e8e \ud835\udc3f \u7684\u6d88\u89e3\u5f0f\u3002\u5176\u4e2d\uff0c\ud835\udc3f \u79f0\u4e3a \ud835\udc3f \u7684\u8865\u3002\u5bf9\u4e8e\u4efb\u610f\u539f\u5b50\u547d\u9898 \\(p: \\bar{p}=\\neg p, \\bar{\\bar{p}}=p\\)</p> <p>\u6d88\u89e3\u63a8\u7406</p> <p>\u4ece\u4e00\u4e2a\u96c6\u5408 \u03a6 \u63a8\u51fa\u4e00\u4e2a\u5b50\u53e5 \ud835\udc37 \u7684\u63a8\u6f14\uff0c\u8bb0\u4f5c \u03a6 \u22a2Res \ud835\udc37\uff0c\u662f\u4e00\u4e2a\u5b50\u53e5\u5e8f\u5217 \ud835\udc371, \ud835\udc372, . . . , \ud835\udc37\ud835\udc5b\uff0c\u5176\u4e2d \ud835\udc37\ud835\udc5b = \ud835\udc37, \u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a \ud835\udc37\ud835\udc56\uff0c\u8981\u4e48 \ud835\udc37\ud835\udc56 \u2208 \u03a6\uff0c\u8981\u4e48 \ud835\udc37\ud835\udc56 \u662f\u8be5\u63a8\u5bfc\u4e2d\u524d\u9762\u4e24\u4e2a\u5b50\u53e5\u7684\u6d88\u89e3\u5f0f\u3002</p>"},{"location":"study/ailogic/proposition/#_9","title":"\u53ef\u9760\u6027\u3001\u5b8c\u5168\u6027\u3001\u8ba1\u7b97\u590d\u6742\u6027","text":"<p>\u5b9a\u7406</p> <ol> <li>\u8bbe\u6709\u4e24\u4e2a\u5b50\u53e5 \ud835\udc371 \u222a {\ud835\udc3f} \u548c \ud835\udc372 \u222a {\\(\\bar{L}\\)}\uff0c\u5219 \ud835\udc371 \u222a {\ud835\udc3f}, \ud835\udc372 \u222a {\\(\\bar{L}\\)} |= \ud835\udc371 \u222a \ud835\udc372\u3002</li> <li>\u5982\u679c \u03a6 \u22a2Res \ud835\udc37 \u5219 \u03a6 |= \ud835\udc37\uff08\u53ef\u9760\u6027\uff09\uff1b\u53cd\u4e4b\uff08\u5b8c\u5907\u6027\uff09\uff0c\u4e0d\u6210\u7acb\u3002</li> <li>\u6d88\u89e3\u7cfb\u7edf\u662f\u4e00\u4e2a\u5b8c\u5907\u7684\u5426\u8bc1\u7cfb\u7edf\uff0c\u5373\uff1a\u4ece\u4e00\u7ec4\u6709\u7a77\u7684\u524d\u63d0\u96c6 \u03a6 \u51fa\u53d1\uff0c\u5982\u679c\u4e0d\u5b58\u5728 \u22a5 \u7684\u8bc1\u660e\uff0c\u90a3\u4e48 \u03a6 \u662f\u53ef\u6ee1\u8db3\u7684\u3002</li> </ol> <p>\u5b9a\u74062 \u8868\u660e\u6d88\u89e3\u63a8\u7406\u7cfb\u7edf\u662f\u53ef\u9760\u7684\uff0c\u4f46\u662f\u4e0d\u5b8c\u5907\u3002\u4f46\u662f\uff0c\u5f53 \\(D\\) \u4e3a\u7a7a\u5b50\u53e5\u65f6\uff0c\u6d88\u89e3\u63a8\u6f14\u53ca\u65f6\u53ef\u9760\u7684\u53c8\u662f\u5b8c\u5907\u7684\u3002</p> <p>\u6211\u4eec\u8bf4\u4e00\u4e2a\u8bc1\u660e\u7cfb\u7edf \ud835\udc45 \u662f\u5b8c\u5907\u7684\uff0c\u5982\u679c\u6bcf\u4e2a\u903b\u8f91\u63a8\u8bba\u90fd\u6709\u4e00\u4e2a\u8bc1\u660e\uff0c\u5373\u5982\u679c\u03a6 |= \ud835\udf19 \u5219\u03a6 \u22a2\ud835\udc45 \ud835\udf19\u3002\u5bf9\u4e8e\u6d88\u89e3\u7cfb\u7edf\u6765\u8bf4\uff0c\u5b83\u662f\u5426\u8bc1\u5b8c\u5907\u7684\uff0c\u5373\uff1a\u4ece\u4e00\u7ec4\u6709\u7a77\u7684\u524d\u63d0\u96c6 \u03a6 \u51fa\u53d1\uff0c\u5982\u679c\u6ca1\u6709\u22a5 \u7684\u8bc1\u660e\uff0c\u90a3\u4e48 \u03a6 \u662f\u53ef\u6ee1\u8db3\u7684\u3002\u53cd\u4e4b\uff0c\u5982\u679c \u03a6 \u662f\u4e0d\u53ef\u6ee1\u8db3\u7684\uff0c\u90a3\u4e48\u5c31\u6709\u4ece \u03a6 \u5230 \u22a5 \u7684\u8bc1\u660e\uff0c\u5373\u03a6 \u22a2Res \u22a5\u3002\u8fd9\u662f\u5b9a\u74063\u3002</p> <p>\u6d88\u89e3\u7b97\u6cd5\u590d\u6742\u6027</p> <p>\u5b58\u5728\u4e00\u4e2a\u6570\u5b57 \ud835\udc50 &gt; 1 \u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e2a \ud835\udc5b\uff0c\u5b58\u5728\u4e00\u4e2a\u4e0d\u53ef\u6ee1\u8db3\u7684\u516c\u5f0f\uff0c\u8be5\u516c\u5f0f\u5305\u62ec \ud835\udc5b \u4e2a\u547d\u9898\u7b26\u53f7\uff0c\u5176\u6700\u5c0f\u7684\u6d88\u89e3\u5426\u8bc1\u5305\u542b\u81f3\u5c11 \\(c^n\\) \u4e2a\u6b65\u9aa4\u3002</p>"},{"location":"study/ailogic/proposition/#_10","title":"\u970d\u6069\u5b50\u53e5\u903b\u8f91","text":"<p>\u970d\u6069\u5b50\u53e5</p> <p>\u5b50\u53e5 \ud835\udc3f1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 \ud835\udc3f\ud835\udc5b \u4e2d\u5982\u679c\u81f3\u591a\u5305\u542b\u4e00\u4e2a\u6b63\u6587\u5b57\uff0c\u90a3\u4e48\u8be5\u5b50\u53e5\u79f0\u4e3a\u970d\u6069\u5b50\u53e5\u3002</p> <p>\u970d\u6069\u5b57\u53e5\u6709\u5982\u4e0b\u56db\u79cd\u5f62\u5f0f\uff1a</p> <ol> <li>\\(p\\leftarrow q_1,\\dots,q_m(m\\neq 0)\\)</li> <li>\\(p\\leftarrow\\)(\u4e0a\u5f0f\u4e2d \\(m=0\\) )</li> <li>\\(\\leftarrow q_1,\\dots,q_m(m\\neq 0)\\)</li> <li>\\(\\square\\)(\u7a7a\u8bed\u53e5\uff0c\u4e0a\u5f0fm=0)</li> </ol> <p>\u5176\u4e2d \\(\\leftarrow\\) \u4e3a\u903b\u8f91\u7f16\u7a0b\u60ef\u4f8b\u5199\u6cd5\uff0c\u7ea6\u5b9a\u8574\u6db5\u524d\u4ef6\u7684\u6587\u5b57\u4e4b\u95f4\u6052\u4e3a\u5408\u53d6\uff0c\u800c\u8574\u6db5\u540e\u4ef6\uff08\u7bad\u5934\u5c16\u7aef\uff09\u7684\u6587\u5b57\u4e4b\u95f4\u6052\u4e3a\u6790\u53d6\u3002</p> <p>\u6211\u4eec\u628a\u4e00\u4e2a\u5f62\u5982 \ud835\udc5d \u2190 \ud835\udc5e1, . . . , \ud835\udc5e\ud835\udc5a \u7684\u970d\u6069\u5b50\u53e5\u79f0\u4e3a\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u628a \ud835\udc5d \u79f0\u4e3a\u8fc7\u7a0b\u540d\uff0c\u628a {\ud835\udc5e1, . . . ,\ud835\udc5e\ud835\udc5a} \u79f0\u4e3a\u8fc7\u7a0b\u4f53\uff0c\u5404\u4e2a \ud835\udc5e\ud835\udc56 \u53ef\u89e3\u91ca\u4e3a\u8fc7\u7a0b\u8c03\u7528\u3002\u628a\u5f62\u5982 \ud835\udc5d \u2190 \u7684\u970d\u6069\u5b50\u53e5\u770b\u4f5c\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u800c\u628a\u5f62\u5982 \u2190 \ud835\udc5e1, . . . , \ud835\udc5e\ud835\udc5a \u770b\u4f5c\u4e00\u4e2a\u76ee\u6807\u3002\u76ee\u6807\u5168\u90e8\u7531\u8fc7\u7a0b\u8c03\u7528\u6240\u7ec4\u6210\uff0c\u5e38\u7528\u6765\u8868\u793a\u4e00\u4e2a\u8be2\u95ee\u3002\u25a1 \u53ef\u79f0 \u4e3a\u505c\u673a\u8bed\u53e5\uff0c\u8868\u793a\u7a0b\u5e8f\u6267\u884c\uff08\u6210\u529f\uff09\u7ec8\u6b62\u3002</p> <p>\u970d\u6069\u5b50\u53e5\u903b\u8f91\u5c31\u662f\u7531\u8fd9\u79cd\u5b50\u53e5\u7ec4\u6210\u7684\u7cfb\u7edf\u3002\u5b83\u662f\u547d\u9898\u6f14\u7b97\u7cfb\u7edf\u7684\u5b50\u7cfb\u7edf\u3002\u970d\u6069\u5b50\u53e5\u903b\u8f91\u7a0b\u5e8f\u5c31\u662f\u6307\u8fd9\u6837\u4e00\u4e9b\u88ab\u79f0\u4e3a\u8fc7\u7a0b\u3001\u76ee\u6807\u548c\u4e8b\u5b9e\u7684\u970d\u6069\u5b50\u53e5\u7684\u96c6\u5408\u3002</p> <p>\u5f53\u4e00\u4e2a\u970d\u6069\u5b50\u53e5\u521a\u597d\u5305\u542b\u4e00\u4e2a\u80af\u5b9a\u6587\u5b57\u65f6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u80af\u5b9a\u7684\uff08\u6216\u786e\u5b9a\u7684\uff09\u970d\u6069\u5b50\u53e5\u3002\u5f53\u6ca1\u6709\u80af\u5b9a\u6587\u5b57\u65f6\uff0c\u8be5\u5b50\u53e5\u88ab\u79f0\u4e3a\u5426\u5b9a\u970d\u6069\u5b50\u53e5\u3002</p> <p>\u4f8b\u5982\uff0c\u5b50\u53e5 [\u00ac\ud835\udc5d1, \u00ac\ud835\udc5d2, . . . , \u00ac\ud835\udc5d\ud835\udc5b, \ud835\udc5e] \u8868\u793a\u7684\u662f \u00ac\ud835\udc5d1 \u2228 \u00ac\ud835\udc5d2 \u2228 \u00b7 \u00b7 \u00b7 \u2228 \u00ac\ud835\udc5d\ud835\udc5b \u2228 \ud835\udc5e\u3002\u53ef\u4ee5\u8bfb\u4f5c\uff1a\u5982\u679c \ud835\udc5d1 \u800c\u4e14 \ud835\udc5d2 \u800c\u4e14 . . . \u800c\u4e14 \ud835\udc5d\ud835\udc5b \u90a3\u4e48 \ud835\udc5e\u3002</p>"},{"location":"study/ailogic/proposition/#sat","title":"SAT","text":"<p>SAT \u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\u3002\u5b83\u4ece\u4e00\u7ec4\u5b50\u53e5\u96c6\u5408\u51fa\u53d1\uff0c\u5bfb\u627e\u4e00\u4e2a\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u4e9b\u5b50\u53e5\u7684\u771f\u5047\u8d4b\u503c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u516c\u5f0f (\ud835\udc5d \u2228 \ud835\udc5e) \u2227 (\u00ac\ud835\udc5d \u2228 \ud835\udc5f)\uff0c\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u771f\u5047\u8d4b\u503c \ud835\udc63 \u6ee1\u8db3\u8fd9\u4e2a\u516c\u5f0f.</p> <p></p>"},{"location":"study/cs/","title":"Computer system","text":"<p>This is the computer system course, including hardware part and software part. The course includes the content of CPU design and basic knowledge of OS.  </p>"},{"location":"study/cs/sys2/","title":"Computer System 2","text":""},{"location":"study/cs/sys2/sys2/","title":"review of sys2","text":""},{"location":"study/cs/sys2/sys2/#_1","title":"\u786c\u4ef6","text":""},{"location":"study/cs/sys2/sys2/#isa","title":"ISA","text":"<p>Arch:</p> <ol> <li>Stack architecture:</li> <li>Accumulator</li> <li>GPR</li> <li>Register-Memory</li> <li>load-store</li> </ol> <p>addressing mode:</p>"},{"location":"study/cs/sys2/sys2/#pipeline","title":"pipeline","text":"<p>class: </p>"},{"location":"study/cs/sys2/sys2/#performance","title":"Performance","text":"<ol> <li>TP(throughput):\\(TP=\\frac{n}{T}\\) </li> <li>Speedup </li> <li>Efficiency  \u4e3e\u4f8b\uff1a  </li> </ol>"},{"location":"study/cs/sys2/sys2/#hazard","title":"hazard","text":""},{"location":"study/cs/sys2/sys2/#structural","title":"structural","text":"<ol> <li>Df: A required resource is busy</li> <li>Sotution: Stall: insert bubble:addi x0, x0, 0</li> </ol>"},{"location":"study/cs/sys2/sys2/#data","title":"data","text":"<ol> <li>Df:<ol> <li>Data dependency between instructions</li> <li>Need to wait for previous instruction to complete its data read/write</li> </ol> </li> <li>Solution: </li> </ol> <ul> <li>detect and forwarding  </li> <li>Load-Use Hazard Detection: detect and insert bubble </li> </ul>"},{"location":"study/cs/sys2/sys2/#control","title":"control","text":""},{"location":"study/cs/sys2/sys2/#scheduling","title":"Scheduling","text":""},{"location":"study/cs/sys2/sys2/#prohibit-table","title":"Prohibit table","text":""},{"location":"study/cs/sys2/sys2/#initial-confict-vector","title":"initial confict vector","text":"<p>\u4e8c\u8fdb\u5236\u6570\u5b57\u4e32\uff0cprohibit table\u4e2d\u5bf9\u5e94\u6570\u5b57\u7684\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4e3a0</p>"},{"location":"study/cs/sys2/sys2/#state-transition-graph","title":"state transition graph","text":""},{"location":"study/cs/sys2/sys2/#multiple-issue","title":"Multiple issue","text":""},{"location":"study/cs/sys2/sys2/#multiple-issue-processor-type","title":"multiple-issue processor type","text":""},{"location":"study/cs/sys2/sys2/#superscalar","title":"Superscalar","text":""},{"location":"study/cs/sys2/sys2/#vliwvery-long-instruction-word","title":"VLIW(Very Long Instruction Word)","text":""},{"location":"study/cs/sys2/sys2/#exception-hardware-s-interface","title":"Exception&amp; Hardware-S interface","text":""},{"location":"study/cs/sys2/sys2/#_2","title":"\u8f6f\u4ef6","text":"<p>\u57fa\u672c\u8109\u7edc\uff1a process -&gt;process scheduling -&gt;IPC -&gt;thread -&gt;sychronization -&gt;deadlock</p> <p>\u8fdb\u7a0b\uff1a\u8d44\u6e90\u5206\u914d\u548c\u4fdd\u62a4\u5355\u5143 \u7ebf\u7a0b\uff1a\u8d44\u6e90\u6267\u884c\u5355\u5143</p>"},{"location":"study/cs/sys2/sys2/#_3","title":"\u795e\u56fe","text":""},{"location":"study/cs/sys2/sys2/#process","title":"process","text":""},{"location":"study/cs/sys2/sys2/#pcb","title":"PCB","text":""},{"location":"study/cs/sys2/sys2/#process-state","title":"Process State","text":"<ol> <li> <p>new:   :star:forK(syscall):\u8fd4\u56de\u4e24\u503c\uff08\u5bf9\u7236\u8fdb\u7a0b\uff1a\u5b50\u8fdb\u7a0bPID\uff1b\u5b50\u8fdb\u7a0b\uff1a0\uff09\uff0ccopy\u4e24\u4efduser space context(pt regs) \u91cd\u70b9\uff1afork \u51fa\u7684\u8fdb\u7a0b\u5904</p> </li> <li> <p>context_switch:\u5207\u6362stack,pc(\u6d89\u53ca\u786c\u4ef6\u8d44\u6e90\uff0c\u53d1\u751f\u5728kernel) </p> </li> </ol>"},{"location":"study/cs/sys2/sys2/#process-schedulingstar","title":"Process scheduling:star:","text":""},{"location":"study/cs/sys2/sys2/#ipc","title":"IPC","text":""},{"location":"study/cs/sys2/sys2/#thread","title":"Thread","text":"<p>\u8fdb\u7a0b\u7684\u6267\u884c\u5355\u5143\uff1a</p> <p></p> <p>\u8fdb\u7a0b\u6267\u884c\u987a\u5e8f\u56fe \u8fdb\u7a0bfork\u540e\u8fdb\u5165ready\u961f\u5217\u7b49\u5f85</p> <p>1\u4e2a\u8fdb\u7a0b\u4e2d\u6709n\u4e2a\u7ebf\u7a0b\uff1an\u4e2atask struct \u8fdb\u7a0b\u65e0task struct,\u5b83\u7528leader thread\u7684task_struct</p> <p>thread node thread group\u904d\u5386thread</p> <p>user space code\u4e0ekernel space code \u4e0d\u540c thread:user kernel\u4e00\u5bf9\u4e00</p> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u7684pt regs\uff0c\u662fthread kernel stack\u4e00\u90e8\u5206</p>"},{"location":"study/cs/sys2/sys2/#synchronization","title":"synchronization","text":""},{"location":"study/cs/sys2/sys2/#critical-section","title":"critical section","text":"<p>Critical section(\u4e34\u754c\u533a):\u6307\u5728\u5e76\u53d1\u7f16\u7a0b\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5171\u4eab\u7684\u8d44\u6e90\uff08\u4f8b\u5982\u5171\u4eab\u5185\u5b58\u3001\u6587\u4ef6\u3001\u8bbe\u5907\u7b49\uff09\u9700\u8981\u88ab\u8bbf\u95ee\u7684\u90a3\u6bb5\u4ee3\u7801\u3002\u4e34\u754c\u533a\u4e2d\u7684\u4ee3\u7801\u90e8\u5206\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\u8bbf\u95ee\uff0c\u4ee5\u907f\u514d\u7ade\u4e89\u6761\u4ef6\uff08race condition\uff09\u548c\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002</p> <p>solution to critical section \u6761\u4ef6\uff1a</p> <ol> <li>Mutual exclusion(\u4e92\u65a5\u8bbf\u95ee): critical section\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c</li> <li>Progress(\u7a7a\u95f2\u8ba9\u8fdb):\u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\uff0c\u4e14\u6709\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165\u4e34\u754c\u533a\u65f6\uff0c\u5fc5\u5b9a\u6709\u8fdb\u7a0b\u80fd\u591f\u8fdb\u5165\u4e34\u754c\u533a</li> <li>Bounded waiting(\u6709\u9650\u7b49\u5f85\u65f6\u95f4):\u9632\u6b62starvation</li> </ol>"},{"location":"study/cs/sys2/sys2/#petersons-solution","title":"peterson's solution:\u53ea\u80fd\u89e3\u51b3\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u51b2\u7a81","text":"<p>Peterson\u7684\u7b97\u6cd5\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u5171\u4eab\u53d8\u91cf\u6765\u63a7\u5236\u4e24\u4e2a\u8fdb\u7a0b\u7684\u884c\u4e3a\uff1a</p> <ul> <li>flag[0] \u548c flag[1]\uff1a\u8fd9\u4e24\u4e2a\u53d8\u91cf\u8868\u793a\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u662f\u5426\u5e0c\u671b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> <li>turn\uff1a\u8fd9\u4e2a\u53d8\u91cf\u8868\u793a\u5f53\u524d\u8f6e\u5230\u54ea\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> </ul> <p></p> <p>\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u4e09\u4e2a\u6761\u4ef6\uff0c\u4f46\u6709\u5982\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>Only works for two processes case</li> <li>It assumes that LOAD and STORE are atomic</li> <li>\u6ca1\u8003\u8651Instruction reorder\uff1a\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u6307\u4ee4\u91cd\u6392</li> </ul>"},{"location":"study/cs/sys2/sys2/#hardware-solution","title":"Hardware solution","text":"<ol> <li> <p>Memory barriers(\u4e00\u79cd\u5904\u7406\u5668\u6307\u4ee4)\uff1a\u5185\u5b58\u5c4f\u969c\u4f5c\u4e3a\u540c\u6b65\u539f\u8bed\u88ab\u7528\u6765\u5f3a\u5236\u6307\u4ee4\u6309\u7279\u5b9a\u987a\u5e8f\u6267\u884c\uff0c\u786e\u4fdd\u5bf9\u5171\u4eab\u6570\u636e\u7684\u8bbf\u95ee\u6309\u9884\u671f\u53d1\u751f\u3002 </p> </li> <li> <p>\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff1a</p> </li> <li>test and set(TAS):\u5148\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7279\u5b9a\u503c\uff08\u59821\uff09\uff0c\u5e76\u8fd4\u56de\u539f\u503c\u3002\u8be5\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u6210\u529f\u83b7\u53d6\u9501\u3002    </li> <li> <p>compare and swap(CAS):CAS\u64cd\u4f5c\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u4e0e\u63d0\u4f9b\u7684\u9884\u671f\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u5339\u914d\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u7684\u503c\u66ff\u6362\u4e3a\u65b0\u503c\uff1b\u5982\u679c\u4e0d\u5339\u914d\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u5e76\u8fd4\u56de\u5f53\u524d\u503c\u3002CAS\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u786e\u4fdd\u591a\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\u3002    </p> </li> <li> <p>Atomic variables:</p> </li> </ol>"},{"location":"study/cs/sys2/sys2/#mutex-locks","title":"Mutex locks\uff08\u4e92\u65a5\u9501\uff09","text":"<p>\u4fdd\u8bc1\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6301\u6709\u8be5\u9501\u5e76\u8fdb\u5165\u4e34\u754c\u533a\uff08critical section\uff09\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5fc5\u987b\u7b49\u5f85\uff0c\u76f4\u5230\u8be5\u9501\u88ab\u91ca\u653e\u3002 \u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>while(true){\n    acquire lock(atomic)\n    critical section\n    release lock(atomic)\n    remainder section\n}\n</code></pre> <ol> <li>\u81ea\u65cb\u9501\uff1a\u81ea\u65cb\u9501\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u9501\u5b9e\u73b0\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u7ebf\u7a0b\u65e0\u6cd5\u83b7\u5f97\u9501\u65f6\uff0c\u5b83\u4f1a\u4e0d\u65ad\u5faa\u73af\uff08\u81ea\u65cb\uff09\uff0c\u68c0\u67e5\u9501\u7684\u72b6\u6001\u662f\u5426\u53d8\u4e3a\u53ef\u7528\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u9501\u4e89\u7528\u4e0d\u9891\u7e41\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u81ea\u65cb\u4f1a\u6d88\u8017CPU\u8d44\u6e90\u3002 \u5b9e\u73b0\uff1a  acquire \u5230release\u4e4b\u95f4\u5176\u4ed6\u8fdb\u7a0b\u5728busy waiting\u2014\u2014too much spinning\uff0c\u6d6a\u8d39CPU time</li> <li>\u57fa\u4e8e\u961f\u5217\u7684\u9501\uff08Queue-based Locks\uff09\uff1a\u7ebf\u7a0b\u4f1a\u6309\u7167\u8bf7\u6c42\u9501\u7684\u987a\u5e8f\u8fdb\u5165\u961f\u5217\uff0c\u7b49\u5230\u9501\u91ca\u653e\u65f6\u6309\u7167\u987a\u5e8f\u88ab\u5524\u9192\u3002\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u673a\u5236\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6309\u7167\u516c\u5e73\u7684\u987a\u5e8f\u83b7\u5f97\u9501\u3002</li> </ol>"},{"location":"study/cs/sys2/sys2/#semaphore","title":"Semaphore\uff08\u4fe1\u53f7\u91cf\uff09","text":"<p>\u4fe1\u53f7\u91cf\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u7cfb\u7edf\u4e2d\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u589e\u52a0\u6216\u51cf\u5c11\uff0c\u901a\u5e38\u901a\u8fc7\u4e24\u79cd\u64cd\u4f5c\u6765\u63a7\u5236\uff1a</p> <ul> <li> <p>P\u64cd\u4f5c\uff08\u5c1d\u8bd5\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a wait\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u51cf\u5c11\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u82e5\u4fe1\u53f7\u91cf\u5927\u4e8e0\uff0c\u64cd\u4f5c\u6210\u529f\uff0c\u4fe1\u53f7\u91cf\u51cf1\uff1b\u82e5\u4fe1\u53f7\u91cf\u4e3a0\uff0c\u5219\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u5927\u4e8e0\u4e3a\u6b62\u3002</p> </li> <li> <p>V\u64cd\u4f5c\uff08\u589e\u52a0\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a signal\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u589e\u52a0\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u4fe1\u53f7\u91cf\u52a01\uff0c\u5982\u679c\u6709\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u56e0\u4e3a\u4fe1\u53f7\u91cf\u4e3a0\u800c\u88ab\u963b\u585e\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u4f1a\u88ab\u5524\u9192\u7ee7\u7eed\u6267\u884c\u3002 </p> </li> </ul> <p>\u5b9e\u73b0\uff1a  \u5b9e\u73b0\u4f7f\u7528\u4e86spinning lock\u4f1a\u6709</p>"},{"location":"study/cs/sys2/sys2/#deadlock-and-starvation","title":"Deadlock and starvation","text":"<p>Deadlock:</p> <ul> <li>\u6761\u4ef6\uff1a</li> <li>\u4e92\u65a5\u6761\u4ef6\uff08Mutual Exclusion\uff09\uff1a\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u5728\u5360\u7528\u8d44\u6e90\u65f6\uff0c\u8be5\u8d44\u6e90\u4e0d\u80fd\u540c\u65f6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bbf\u95ee\u3002</li> <li>\u5360\u6709\u5e76\u7b49\u5f85\uff08Hold and Wait\uff09\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u5176\u4ed6\u88ab\u5360\u7528\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff08No Preemption\uff09\uff1a\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u4ece\u8fdb\u7a0b\u4e2d\u5265\u593a\uff0c\u53ea\u80fd\u7531\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\uff08Circular Wait\uff09\uff1a\u5b58\u5728\u4e00\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u7684\u5faa\u73af\u94fe\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u91ca\u653e\u8d44\u6e90\u3002 \u793a\u4f8b\uff1a \u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0b A \u548c B \u5404\u81ea\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u53e6\u4e00\u4e2a\u8d44\u6e90\uff1a \u8fdb\u7a0b A \u6301\u6709\u8d44\u6e90 1\uff0c\u7b49\u5f85\u8d44\u6e90 2\u3002 \u8fdb\u7a0b B \u6301\u6709\u8d44\u6e90 2\uff0c\u7b49\u5f85\u8d44\u6e90 1\u3002 A,B\u76f8\u4e92\u7b49\u5f85\u5bfc\u81f4\u6b7b\u9501\u3002</li> </ul> <p>Starvation\uff1a</p>"},{"location":"study/cs/sys2/sys2/#atomic-variable","title":"Atomic variable","text":"<p>\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u7684\u53d8\u91cf\uff0c\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u3002</p>"},{"location":"study/cs/sys2/sys2/#star","title":"\u4e09\u4e2a\u95ee\u9898:star:","text":"<ol> <li>Bounded buffer problem: \u6709\u754c\u7f13\u51b2\u533a\u95ee\u9898\uff0c\u53c8\u79f0\u4e3a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u662f\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u7ecf\u5178\u540c\u6b65\u95ee\u9898\u3002\u5b83\u63cf\u8ff0\u4e86\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u5171\u4eab\u6709\u9650\u7f13\u51b2\u533a\u65f6\u5982\u4f55\u5b89\u5168\u6709\u6548\u5730\u4ea4\u6362\u6570\u636e\u7684\u573a\u666f\u3002</li> </ol> <p> 2. Readers-Writers Problem:</p>"},{"location":"study/cs/sys2/sys2/#deadlock","title":"Deadlock","text":""},{"location":"study/cs/sys2/sys2/#_4","title":"\u56db\u4e2a\u6761\u4ef6","text":"<p>\u6b7b\u9501\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a</p> <ol> <li>\u4e92\u65a5\u6761\u4ef6\uff1a\u6bcf\u4e2a\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u8be5\u8d44\u6e90\u5728\u88ab\u5360\u7528\u65f6\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u3002</li> <li>\u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u81f3\u5c11\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u4e14\u7b49\u5f85\u83b7\u53d6\u5176\u4ed6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff1a\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u5265\u593a\uff0c\u53ea\u80fd\u7b49\u8fdb\u7a0b\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u5b58\u5728\u8fdb\u7a0b\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u7684\u60c5\u51b5\u3002</li> </ol>"},{"location":"study/cs/sys2/sys2/#_5","title":"\u89e3\u51b3\u65b9\u6848","text":""},{"location":"study/cs/sys2/sys2/#deadlock-prevention","title":"Deadlock prevention","text":"<p>\u6253\u7834\u6b7b\u9501\u56db\u4e2a\u6761\u4ef6</p>"},{"location":"study/cs/sys2/sys2/#deadlock-aviodance","title":"Deadlock aviodance","text":"<p>Banker's algorithm:\u5728\u6bcf\u6b21\u8d44\u6e90\u5206\u914d\u524d\uff0c\u7cfb\u7edf\u901a\u8fc7\u6a21\u62df\u662f\u5426\u4f1a\u5bfc\u81f4\u6b7b\u9501\u6765\u5224\u65ad\u662f\u5426\u5206\u914d\u8be5\u8d44\u6e90\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u76ee\u6807\u662f\u786e\u4fdd\u7cfb\u7edf\u5904\u4e8e\u4e00\u4e2a\u201c\u5b89\u5168\u72b6\u6001\u201d\uff0c\u5373\u53ef\u4ee5\u907f\u514d\u6b7b\u9501\u7684\u53d1\u751f\u3002</p> <p></p>"},{"location":"study/cs/sys2/sys2/#deadlock-detection","title":"Deadlock detection","text":"<p>\u5bfb\u627e\u73af \u95ee\u9898\uff1astarvation</p>"},{"location":"study/cs/sys2/sys2/#deadlock-recovery","title":"Deadlock recovery","text":"<p>kill deadlock process</p>"},{"location":"study/cs/sys2/sys2/#software","title":"Software","text":"<p>\u5185\u5b58\u4e0d\u5b58\u6570\u636e\u7c7b\u578b</p> <ol> <li> <p>OS\uff1aresource allocator abstractor, in kernel mode</p> </li> <li> <p>events type in OS:interrupts(hardware) and exception(software)</p> </li> <li>:star:syscall(unprivileged):interface between user and kernel mode</li> <li>U-&gt;K: context is stored in kernel stack(kernel entry does this)</li> <li> <p>signals,timers and timeouts, user input events,process events, faults and exceptions</p> </li> <li> <p>Sys call:</p> </li> <li> <p>system service:</p> </li> <li>static linker:\u79fb\u690d\u6027\u66f4\u5f3a\uff0c\u9700\u5185\u5b58\u5927</li> <li>dynamic linker:</li> <li>loaders: a part of the operating system responsible for loading executable programs (or shared libraries) into memory for execution.  </li> </ol> <p>heap\u53ef\u5171\u4eab\uff1a stack(per-thread)\uff1a\u4e0d\u53ef\u5171\u4eab\uff1a\u6808\u5185\u5b58\u662f\u4e0e\u51fd\u6570\u8c03\u7528\u7d27\u5bc6\u7ed1\u5b9a\u7684\uff0c\u5e76\u4e14\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u88ab\u91ca\u653e\uff0c\u6240\u4ee5\u5b83\u7684\u751f\u547d\u5468\u671f\u662f\u77ed\u6682\u7684\u3001\u5c40\u90e8\u7684\u3002\u56e0\u6b64\uff0c\u6808\u4e0d\u9002\u5408\u5728\u4e0d\u540c\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\uff0c\u6808\u7684\u5185\u5bb9\u4e0d\u80fd\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u4f20\u9012\u3002</p> <ol> <li>Process(resource allocation and protection):</li> <li>PCB:\u5305\u542bPID,pstate,PC</li> </ol>"},{"location":"study/cs/sys3/","title":"Computer System 3","text":"<p>The course is based on this book: Computer Architecture: A Quantitative Approach 6th Edtion</p>"},{"location":"study/cs/sys3/ILP/","title":"ILP(Instruction level parallelism)","text":""},{"location":"study/cs/sys3/ILP/#dynamic-scheduling","title":"Dynamic scheduling","text":""},{"location":"study/cs/sys3/ILP/#why-need-this","title":"Why need this","text":"<p>Simple piplining techneques has limitation: they use in-order instruction issue and execution and need to stall for data dependency. The later instructions all have to wait.  </p> <p>Therefore we need out-of-order execution to speed up.</p>"},{"location":"study/cs/sys3/ILP/#basic-idea","title":"Basic idea","text":"<p>Break ID pipe stage into two stages:</p> <ul> <li>IS(issue):</li> <li>decode the instruction and check structural hazard</li> <li>in-order issue</li> <li>RO(read operands):</li> <li>wait until no data hazard and then read the operands</li> <li>out of order execution</li> </ul> <p>Out-of-order execution introduces the possibility of WAR(write after read) and WAW(write after write).</p> <pre><code>1. FDIV.D F10, F0, F2\n2. FSUB.D F10, F4, F6\n3. FADD.D F6, F8, F14\n</code></pre> <p>WAW:1,2 WAR:2,3</p>"},{"location":"study/cs/sys3/ILP/#scoreboard-algorithm","title":"Scoreboard Algorithm","text":"<p>In-order issue and out-of-order execution.</p> <p>Main Components of the Scoreboard:</p> <ol> <li> <p>Functional Units (FU): These are the execution units that perform operations (e.g., ALUs, floating-point units). The scoreboard keeps track of which units are busy and which are free.</p> </li> <li> <p>Registers: The scoreboard also monitors the status of registers to ensure that data is not overwritten prematurely, which could lead to incorrect results.</p> </li> <li> <p>Instruction Queue: Instructions waiting for operands or a free functional unit are stored in an instruction queue, where they wait for the necessary resources.</p> </li> <li> <p>Control Logic: This component tracks when each instruction can be dispatched for execution, based on the availability of its operands and functional units.</p> </li> </ol> <p>Summary:</p> <ul> <li>Hazards limit performance</li> <li>Structural: need more HW resources</li> <li>Data: need forwarding, compiler scheduling</li> <li>Control: early evaluation &amp; PC, delayed branch, prediction</li> <li>Increasing length of pipe increases impact of hazards</li> <li>Pipelining helps instruction bandwidth, not latency!</li> <li>Instruction Level Parallelism (ILP) found either by compiler or hardware.</li> </ul>"},{"location":"study/cs/sys3/ILP/#tomasulo-algorithm","title":"Tomasulo Algorithm","text":"<p>Main idea:</p> <ul> <li>three steps an instruction goes through: Issue, Execute, Write result</li> <li>Rename register in hardware to minimize WAW and WAR hazards</li> </ul> <p>Process:</p> <ol> <li> <p>Issue: Get the next instruction from the head of the instruction queue (FIFO)</p> <ul> <li>If there is a matching reservation station that is empty, issuethe instruction to the station with the operand values, if they are currently in the registers.</li> <li>If there is not an empty reservation station, then there is a structural hazardand the instruction stalls until a station or buffer is freed.</li> <li>If the operands are not in the registers, keep track of the functional units that will produce the operands.</li> </ul> </li> <li> <p>Execute:</p> <ul> <li>When all the operands are available, the operation can be executed at the corresponding functional unit.</li> <li>Loadand storerequire a two-step execution process\uff1a</li> <li>It computes the effective address when the base register is available.</li> <li>The effective address is then placed in the loador storebuffer.</li> </ul> </li> <li> <p>Write Results:</p> <ul> <li>When the result is available, write it on the CDBand from there into the registersand into any reservation stations (including storebuffers).</li> <li>Storesare buffered in the store buffer until both the value to be stored and the store address are available, then the result is written as soon as the memory unit is free.</li> </ul> </li> </ol>"},{"location":"study/cs/sys3/cache/","title":"Cache","text":""},{"location":"study/cs/sys3/cache/#different-types-of-memory","title":"Different Types of Memory","text":"<ul> <li> <p>Mechanical memory: Magnetic Drum/core memory</p> </li> <li> <p>Electronic memory:</p> </li> <li>SRAM(static random access memory)</li> <li>DRAM(dynamic random access memory)<ul> <li>SDRAM, DDR</li> </ul> </li> <li>ROM<ul> <li>EPROM,EEPROM(electrically erasable, programmable)</li> </ul> </li> <li>Flash: NAND, NOR</li> </ul> <p>Here\u2019s a breakdown of those different types of memory:</p> <ol> <li>SRAM (Static RAM)</li> <li>Type: Volatile</li> <li>Speed: Fast</li> <li>Use: Often used for cache memory in CPUs, GPUs, and other performance-critical applications.</li> <li>Why It's Fast: Doesn\u2019t need to be refreshed like DRAM.</li> <li>Drawback: More expensive and takes up more space than DRAM.</li> <li> <p>How It Works: Stores data in flip-flops, meaning each bit of data is stored in a set of transistors that don\u2019t require constant refreshing.</p> </li> <li> <p>DRAM (Dynamic RAM)</p> </li> <li>Type: Volatile</li> <li>Speed: Slower than SRAM</li> <li>Use: Main memory in computers (RAM).</li> <li>Why It's Slower: Requires constant refreshing because it stores data in capacitors, which leak charge over time.</li> <li> <p>Drawback: More power-hungry and slower than SRAM, but much cheaper and denser, allowing for larger amounts of memory.</p> </li> <li> <p>HBM (High Bandwidth Memory)</p> </li> <li>Type: Volatile</li> <li>Speed: Very high speed</li> <li>Use: Used in high-performance computing applications like GPUs and AI processing.</li> <li>Why It's Fast: Has a very wide memory interface and stacks chips vertically, reducing latency and increasing throughput.</li> <li> <p>Drawback: Expensive and not as widely used in consumer products.</p> </li> <li> <p>Flash(EEPROM)</p> </li> <li>Type: Non-volatile</li> <li>Speed: Slower than DRAM but faster than traditional hard drives.</li> <li>Use: Solid-state drives (SSDs), USB drives, memory cards, etc.</li> <li>Why It's Non-volatile: Retains data even when power is off.</li> <li>Drawback: Limited write endurance over time, but more durable and faster than HDDs.</li> </ol>"},{"location":"study/cs/sys3/cache/#key-differences","title":"Key Differences","text":"<ul> <li>Volatile vs. Non-volatile: SRAM, DRAM, HBM, and DDR are all volatile, meaning they lose data when power is off. Flash is non-volatile, meaning it keeps data even when powered down.</li> <li>Speed: HBM &gt; SRAM &gt; DRAM &gt; Flash.</li> <li>Cost: SRAM is the most expensive per bit, followed by HBM. DRAM,  and ROM(Flash) are more affordable for larger capacities.</li> </ul>"},{"location":"study/cs/sys3/cache/#memory-hierarchy","title":"Memory Hierarchy","text":"<p>Performance of high-speed computers is usually limited by memory bandwidth and latency.</p> <ul> <li>Latency :time for a single access</li> <li>Bandwidth: number of accesses per unit time</li> </ul> <p>Locality in Memory Hierarchy:</p> <ul> <li> <p>Temporal locality:if an item is referenced, it will tend to be referenced again soon.  </p> </li> <li> <p>Spatial locality: if an item is referenced, items whose addresses are close by will tend to be referenced soon.</p> </li> </ul> <p></p> <p></p>"},{"location":"study/cs/sys3/cache/#cache_1","title":"Cache","text":"<p>Cache: The highest or first level of the memory hierarchy encountered once the address leaves the processor. It employs buffering to reuse commonly occurring items.  </p> <p>Cache can be a relevant concept: the lower one is always the cache of the upper one:</p> <p></p>"},{"location":"study/cs/sys3/quantitative/","title":"Computer System","text":""},{"location":"study/cs/sys3/quantitative/#quantitative-approaches","title":"Quantitative approaches","text":"<p>\\(CPU\\_Time=IC\\times CPI\\times Clock Pereiod\\)</p> <p>\\(CPU\\_Time=\\frac{Instructions}{Program}\\times \\frac{Clock\\_cycles}{Instructions}\\times \\frac{Seconds}{Clock\\_cycles}\\)</p> <p>IC: instruction count</p> <ul> <li>If different instruction classes take different numbers of cycles:</li> </ul> <p>Clock Cycles=\\(\\sum_{i=1}^{n}(CPI_i\\times IC_i)\\)</p> <p>CPI=\\(\\frac{Clock Cycles}{IC}=\\sum_{i=1}^{n}(CPI_i\\times \\frac{IC_i}{IC})\\)</p>"},{"location":"study/cs/sys3/quantitative/#principles-of-computer-design","title":"Principles of computer design","text":"<ul> <li> <p>Use parallelism: multiple processors, disks, memmory banks, pipelining</p> </li> <li> <p>Principle of Locality: reuse data and instructions</p> </li> <li> <p>Focus on the common case: Amdahl's Law</p> </li> </ul> <p>Amdahl's Law: \\(T_{improved}=\\frac{T_{affected}}{improvement factor}+T_{unaffected}\\)</p> <p>\\(Fraction_{enhanced}\\) :proportion of segment can be enhanced</p> \\[ Execution\\_time_{new}=Exe\\_time_{can't be enhanced}+Ece time_{enhanced} \\] \\[ =Execution\\_time_{old}((1-Fraction_{enhanced})+\\frac{Fraction_{enhanced}}{Speedup_{enhanced}}) \\] \\[ Speedup_{overall}=\\frac{Exe\\_time_{old}}{Exe\\_time_{new}}=\\frac{1}{(1-Fraction_{enhanced})+\\frac{Fraction_{enhanced}}{Speedup_{enhanced}}} \\] <p>An example:</p> <p></p> <p>Important inference:</p> \\[ Speedup_{overall}&lt;1/(1-Fraction_{enhanced}) \\]"},{"location":"study/cs/sys3/quantitative/#great-architectures-ideas","title":"Great architectures ideas","text":"<ul> <li> <p>Design for Moore's law</p> </li> <li> <p>Use abstraction to simplify design</p> </li> <li> <p>Make the common case fast</p> </li> <li> <p>Improve performance via parallelism</p> </li> <li> <p>Improve performance via pipelining</p> </li> <li> <p>v=Improve performance via prediction</p> </li> <li> <p>Use a hierarchy of memories.</p> </li> <li> <p>Improve dependability via redudancy</p> </li> </ul>"},{"location":"study/datastructure/","title":"Data structure","text":""},{"location":"study/datastructure/algorithm/","title":"final exam review","text":""},{"location":"study/datastructure/algorithm/#backtracking","title":"Backtracking","text":""},{"location":"study/datastructure/algorithm/#_1","title":"\u601d\u60f3","text":"<p>\u51b3\u7b56\u8fc7\u7a0b\u7684\u5f62\u5f0f\u5316\uff1a\u6784\u5efa\u51b3\u7b56\u6811\uff0c\u8fdb\u884c\u526a\u679d</p>"},{"location":"study/datastructure/algorithm/#_2","title":"\u4f8b\u5b50","text":""},{"location":"study/datastructure/algorithm/#_3","title":"\u516b\u7687\u540e\u95ee\u9898","text":"<p>\\(8\\times 8\\)\u683c\u5b50\u4e0a\u653e8\u7687\u540e\uff0c\u6bcf\u884c/\u5217/\u659c\u7ebf\u4e0a\u4ec5\u6709\u4e00\u4e2a\u7687\u540e\u3002 \u5148\u5728\u7b2c\u4e00\u5217\u653e\uff0c\u7136\u540e\u8003\u8651\u7b2c\u4e8c\u5217\u53ef\u884c\u653e\u6cd5\uff0c\u518d\u8003\u8651\u7b2c\u4e09\u5217\uff0c\u4f9d\u6b21\u5411\u540e\u9762\u7684\u5217\u653e\u7f6e\uff0c\u5982\u679c\u6709\u54ea\u6b65\u4e0d\u884c\u5219\u56de\u9000\u5230\u4e0a\u4e00\u5217\u8003\u8651\u5176\u4ed6\u653e\u6cd5\u3002</p>"},{"location":"study/datastructure/algorithm/#turnpike-reconstructionnp-complete","title":"\u6536\u8d39\u516c\u8def\u95ee\u9898(turnpike reconstruction)\u2014\u2014NP-complete","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u70b9\u96c6\u4e2d\u70b9\u7684\u4e24\u4e24\u4e4b\u95f4\u8ddd\u79bb\uff0c\u8981\u6c42\u91cd\u6784\u51fa\u70b9\u96c6\u4e2d\u5404\u70b9\u4f4d\u7f6e\u3002\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u70b9\u7684\u5206\u5e03\u5373\u53ef\u3002 \u9996\u5148\u786e\u5b9a\u8ddd\u79bb\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u786e\u5b9a\u8ddd\u79bb\u6b21\u8fdc\u7684\u4e24\u4e2a\u70b9\uff08\u6b21\u8fdc\u8ddd\u79bb\u80af\u5b9a\u662f\u4e2d\u95f4\u67d0\u4e2a\u70b9\u4e0e\u7aef\u70b9\u7684\u8ddd\u79bb\uff0c\u56e0\u4e3a\u5982\u679c\u662f\u4e2d\u95f4\u4e24\u4e2a\u70b9\u8ddd\u79bb\u6b21\u8fdc\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fde\u63a5\u8fd9\u4e24\u4e2a\u70b9\u7136\u540e\u4efb\u610f\u5411\u4e00\u7aef\u5ef6\u4f38\u5230\u7aef\u70b9\uff0c\u5f97\u5230\u66f4\u8fdc\u7684\u8ddd\u79bb\uff0c\u4e0e\u6b21\u8fdc\u8ddd\u79bb\u77db\u76fe\uff09\u3002\u6211\u4eec\u6839\u636e\u8ddd\u79bb\u4ece\u8fdc\u5230\u8fd1\u4f9d\u6b21\u786e\u5b9a\u5404\u70b9\u7684\u4f4d\u7f6e\uff0c\u5f53\u52a0\u5165\u4e00\u4e2a\u4e0e\u7aef\u70b9\u8ddd\u79bb\u4e3a\\(d_i\\)\u7684\u70b9\u540e\uff0c\u8fd9\u4e2a\u70b9\u90fd\u4f1a\u548c\u5df2\u5b58\u5728\u7684\u6240\u6709\\(k\\)\u4e2a\u70b9\u4ea7\u751f\\(k\\)\u4e2a\u8ddd\u79bb\uff0c\u6211\u4eec\u8981\u5c06\u8fd9\\(k\\)\u4e2a\u8ddd\u79bb\u4ece\u7ed9\u51fa\u8ddd\u79bb\u96c6\u5408\u4e2d\u53bb\u6389\uff0c\u5982\u679c\u6709\u67d0\u4e2a\u8ddd\u79bb\u518d\u8ddd\u79bb\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u653e\u9519\u4e86\uff0c\u5b83\u5e94\u8be5\u653e\u5728\u653e\u5728\u4e0e\u53e6\u4e00\u4e2a\u7aef\u70b9\u8ddd\u79bb\u4e3a\\(d_i\\)\u7684\u5730\u65b9\uff0c\u5982\u679c\u8fd8\u4e0d\u884c\u5219\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u70b9\uff0c\u6539\u53d8\u4e0a\u4e00\u4e2a\u70b9\u7684\u653e\u7f6e\u3002</p>"},{"location":"study/datastructure/algorithm/#_4","title":"\u6700\u5927\u6700\u5c0f\u641c\u7d22","text":""},{"location":"study/datastructure/algorithm/#divide-and-conquer","title":"Divide and conquer","text":""},{"location":"study/datastructure/algorithm/#_5","title":"\u4e3b\u5b9a\u7406","text":"<p>\u4e3b\u5b9a\u7406\uff1a\\(T(n)=aT(\\frac{n}{b})+f(n)\\)  n\u662f\u95ee\u9898\u89c4\u6a21\u5927\u5c0f\uff1b  a\u662f\u539f\u95ee\u9898\u7684\u5b50\u95ee\u9898\u4e2a\u6570\uff1b  \\(n/b\\)\u662f\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u5927\u5c0f\uff0c\u8fd9\u91cc\u5047\u8bbe\u6bcf\u4e2a\u5b50\u95ee\u9898\u6709\u76f8\u540c\u7684\u89c4\u6a21\u5927\u5c0f\uff1b  \\(f(n)\\)\u662f\u5c06\u539f\u95ee\u9898\u5206\u89e3\u6210\u5b50\u95ee\u9898\u548c\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\u6210\u539f\u95ee\u9898\u7684\u89e3\u7684\u65f6\u95f4\u3002</p> <p></p> <ul> <li>\u82e5\\(n^{log_ba}&gt;f(n)\\)\uff0c\u5219\\(T(n)=\\Theta(n^{log_ba})\\)</li> <li>\u82e5\\(f(n)\\)\u66f4\u5927\uff0c\u4e14\u6ee1\u8db3\u89c4\u8303\u5316\u6761\u4ef6\\(af(n/b)\\leq cf(n)\\)\uff0c\u5219\\(T(n)=\\Theta(f(n))\\)</li> <li>\u82e5\u4e24\u51fd\u6570\u76f8\u7b49\uff0c\u5219\\(T(n)+\\Theta(n^{log_ba}log^{k+1}n)\\)</li> </ul> <p>\u65b9\u7a0b \\( af\\left(\\frac{N}{b}\\right) = f(N) \\)\uff0c\u5373\u8868\u793a \u5b50\u95ee\u9898\u7684\u5de5\u4f5c\u91cf\u7684\u603b\u548c \\(a \\cdot f\\left(\\frac{N}{b}\\right)\\) \u6070\u597d\u7b49\u4e8e \u5f53\u524d\u95ee\u9898\u7684\u5de5\u4f5c\u91cf \\(f(N)\\) \u8fd9\u610f\u5473\u7740\uff0c\u9012\u5f52\u6811\u7684\u6bcf\u4e00\u5c42\u7684\u603b\u5de5\u4f5c\u91cf\u76f8\u7b49\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\\( f(N) \\) \u7684\u589e\u957f\u901f\u5ea6\u4e0e\u9012\u5f52\u6811\u7684\u6df1\u5ea6\u662f\u5e73\u8861\u7684\uff0c\u56e0\u6b64\uff0c\u9012\u5f52\u6df1\u5ea6\u4e0e\u6bcf\u4e00\u5c42\u7684\u5de5\u4f5c\u91cf\u76f8\u4e58\uff0c\u6574\u4f53\u7684\u590d\u6742\u5ea6\u5c06\u662f \\( \\Theta(N^{\\log_b a} \\log N) \\)\uff0c\u5bf9\u5e94\u4e8e\u4e3b\u5b9a\u7406\u76842</p>"},{"location":"study/datastructure/algorithm/#_6","title":"\u66f4\u5f3a\u7684\u5f62\u5f0f","text":"<p>\u4e0e\u4e4b\u524d\u7684\u4e3b\u5b9a\u7406\u4e0d\u540c\u5728\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002</p> <p>\u8fd8\u53ef\u4ee5\u52a0\u5f3a\uff1a</p> <p></p>"},{"location":"study/datastructure/algorithm/#_7","title":"\u9012\u5f52\u6811","text":"<p>\u603b\u65f6\u95f4\u7b49\u4e8e\u5404\u5c42\u5408\u5e76\u65f6\u95f4\u52a0\u4e0a\u53f6\u8282\u70b9\u5904\u7406\u65f6\u95f4</p> <p>\u5e94\u7528\uff1a </p>"},{"location":"study/datastructure/algorithm/#_8","title":"\u4f8b\u5b50","text":""},{"location":"study/datastructure/algorithm/#_9","title":"\u6700\u5927\u5b50\u5e8f\u5217\u548c","text":"<p>\u5bfb\u627e\u4e00\u4e2a\u6570\u7ec4\u4e2d\u548c\u6700\u5927\u4e00\u4e2a\u5b50\u5e8f\u5217\uff1a\u5206\u4e3a\u4e24\u90e8\u5206A,B\uff0c\u5c06A,B\u5404\u81ea\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\u8de8A,B\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\u5927\u5c0f\u6bd4\u8f83\uff0c\u8de8A,B\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\u6c42\u89e3\u662f\u7ebf\u6027\u65f6\u95f4\uff0c\u56e0\u4e3a\u4ece\u539f\u6570\u7ec4\u7684\u4e2d\u95f4\u5411\u5de6\u53f3\u4e24\u8fb9\u904d\u5386\u5bfb\u627e\u5373\u53ef\u3002</p> <p>\\(T(n) = 2T(n/2) + O(n)\\) \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(nlogn)\\)</p>"},{"location":"study/datastructure/algorithm/#_10","title":"\u9006\u5e8f\u5bf9\u8ba1\u6570","text":"<p>\u4e00\u4e2a\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u662f\u6307\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20 \\(A[i]\\) \u548c \\(A[j]\\)\uff0c\u5982\u679c \\(i &lt; j\\) \u4e14 \\(A[i] &gt; A[j]\\)\uff0c\u5219\u79f0 \\(A[i]\\) \u548c \\(A[j]\\) \u6784\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002</p> <p>\u7b97\u6cd5\uff1a\u5728\u5f52\u5e76\u6392\u5e8f\u7684\u5408\u5e76\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8ba1\u6570\u9006\u5e8f\u5bf9\u3002\u82e5\u5df2\u5c06\u6570\u7ec4\u5212\u5206\u4e3a\u4e24\u90e8\u5206A,B\u4e14\u5206\u522b\u6392\u597d\u5e8f\uff0c\u5219\u9006\u5e8f\u5bf9\u7b49\u4e8eA,B\u5404\u81ea\u9006\u5e8f\u5bf9\u4e2a\u6570\u52a0\u4e0a\u8de8A,B\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u8fd9\u4e2a\u8de8A,B\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u53ef\u4ee5\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u8ba1\u6570\uff1a</p> <pre><code>while(i&lt;n&amp;&amp;j&lt;n){\n    if(i&lt;n&amp;&amp;j&lt;n&amp;&amp;A[i]&lt;=B[j]){\n        C[k++]=A[i++];\n    }else if(i&lt;n&amp;&amp;j&lt;n&amp;&amp;A[i]&gt;B[j]){\n        inv_cnt+=n-i;\n        C[k++]=B[j++]\n    }\n}\n...//\u590d\u5236A\u6216B\u4e2d\u6ca1\u5b8c\u6210\u7684\u90e8\u5206\n</code></pre>"},{"location":"study/datastructure/algorithm/#_11","title":"\u6700\u8fd1\u70b9\u5bf9\u95ee\u9898","text":"<p>\u53d6\u6240\u6709\u70b9x\u5750\u6807\u5747\u503c\u4f5c\u4e3a\u5212\u5206\u7ebf\u5c06\u70b9\u96c6\u5212\u5206\u4e3a\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u6c42\u5176\u6700\u8fd1\u70b9\u5bf9\u8ddd\u79bb\uff08\u9012\u5f52\u5730\u505a\uff09\uff0c\u53d6\u4e24\u8005\u95f4\u8f83\u5c0f\u7684\\(\\delta\\)\uff0c\u7136\u540e\u627e\u8de8\u4e24\u533a\u57df\u7684\u6700\u8fd1\u70b9\u5bf9\uff1a \u5728\\(x\\in [\\bar{x}-\\delta,\\bar{x}+\\delta]\\)\u533a\u57df\u5185\uff0c\u6309\u533a\u57df\u4e2d\u7684\u70b9\u7684\\(y_i\\)\u5750\u6807\u4ece\u4e0b\u5230\u8fbe\u5411\u4e0a\u8ba1\u7b97\u5904\u4e8e\u533a\u57df\\(\\{x\\in[(x,y)|\\bar{x}-\\delta,\\bar{x}+\\delta],y\\in [y_i,y_i+\\delta]\\}\\)\u4e2d\u70b9\u5bf9\u7684\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u533a\u57df\u5212\u5206\u4e3a\u5982\u4e0b\u516b\u4e2a\u6b63\u65b9\u5f62\uff1a  \u7531\u5de6\u53f3\u533a\u57df\u95f4\u6700\u5c0f\u8ddd\u79bb\u4e3a\\(\\delta\\)\u53ef\u77e5\uff0c\u6bcf\u4e2a\u6b63\u65b9\u5f62\u4e2d\u6700\u591a\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u904d\u5386\u6700\u591a\\(O(7n)=O(n)\\)\u6b21\uff0c\u7ebf\u6027\u65f6\u95f4\u3002 \\(T(n)=2T(n/2)+O(n)\\) \u65f6\u95f4\u590d\u6742\u5ea6\\(O(nlogn)\\)</p>"},{"location":"study/datastructure/algorithm/#_12","title":"\u4e58\u6cd5\u548c\u77e9\u9635\u4e58\u6cd5","text":"<p>\u4e00\u822c\u7684\u7ad6\u5f0f\u4e58\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u4e2an\u4f4d\u4e58\u6570\\(a,b\\) \u5199\u4e3a \\(a=10^{n/2}a_1+b_1,b=10^{n/2}a_2+b_2\\)\uff0c\u8fd9\u6837\\(a_i,b_i\\)\u4e3an/2\u4f4d\u4e58\u6cd5\uff0c\u5b9e\u73b0\u4e86\u5206\u6cbb\uff0c\u800c [ab=10^na_1a_2+10^{n/2}(a_1b_2+a_2b_1)+b_1b_2]</p> \\[a_1b_2+a_2b_1=(a_1+a_2)(b_1+b_2)-a_1a_2-b_1b_2\\] <p>\u5206\u6cbb\u540e\u603b\u9700\u7b973\u6b21\u4e58\u6cd5\u3002\u6240\u4ee5\uff1a\\(T(n)=3T(n/2)+O(n)\\),\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n^{log_23})\\)</p>"},{"location":"study/datastructure/algorithm/#dynamic-programming-","title":"Dynamic programming-\u52a8\u6001\u89c4\u5212","text":""},{"location":"study/datastructure/algorithm/#_13","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u662f\u4e00\u79cd\u6c42\u89e3\u590d\u6742\u95ee\u9898\u7684\u7b97\u6cd5\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u7279\u522b\u9002\u7528\u4e8e\u90a3\u4e9b\u53ef\u4ee5\u5206\u89e3\u4e3a\u5b50\u95ee\u9898\u7684\u4f18\u5316\u95ee\u9898\u3002\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u901a\u8fc7\u5c06\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u6765\u89e3\u51b3\uff0c\u5e76\u5c06\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u5b58\u50a8\u8d77\u6765\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002</p> <ul> <li>\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u901a\u8fc7\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6765\u6784\u9020\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u539f\u95ee\u9898\u7684\u89e3\u662f\u5176\u5b50\u95ee\u9898\u89e3\u7684\u67d0\u79cd\u7ec4\u5408\u3002</li> <li>\u91cd\u53e0\u5b50\u95ee\u9898\uff1a\u4e0d\u540c\u7684\u5b50\u95ee\u9898\u4f1a\u91cd\u590d\u8ba1\u7b97\u76f8\u540c\u7684\u5b50\u95ee\u9898\u3002\u52a8\u6001\u89c4\u5212\u901a\u8fc7\u7f13\u5b58\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002</li> </ul>"},{"location":"study/datastructure/algorithm/#_14","title":"\u95ee\u9898","text":""},{"location":"study/datastructure/algorithm/#fibonacci","title":"Fibonacci\u6570\u8ba1\u7b97","text":"<p>\u57fa\u672c\u95ee\u9898\uff1a\u6c42Fibonacci\u6570\\(F(n)=F(n-1)+F(n-2)\\):\u9012\u5f52\u6c42\u89e3\u65f6\uff0c\u7531\u51b3\u7b56\u6811\u53ef\u77e5\uff0cF(n-1)\u548cF(n-2)\u5747\u8ba1\u7b97\u4e86\\(F(n-3),F(i),i&lt;n-3\\) \u7b49\uff0c\u5b58\u5728\u5927\u91cf\u91cd\u590d\u8ba1\u7b97\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u5f20\u8868\u5c06\u5df2\u7ecf\u8ba1\u7b97\u7684\u7ed3\u679c\u4fdd\u5b58\u4e0b\u6765\uff0c\u53ef\u4ee5\u4fdd\u5b581~n\u7684\u6240\u6709Fibonacci\u6570\uff0c\u4e5f\u53ef\u4ee5\u53ea\u4fdd\u5b58\u6700\u540e\u8ba1\u7b97\u7684\u90a3\u4e24\u4e2a\u3002</p> <pre><code>f0=1\nf1=1\nfor i in range(n-1):\n    f=f0+f1\n    f0=f1\n    f1=f\n#\u4fdd\u5b58\u6240\u6709\u6570\nf=[0 for _ in range(n+1)]\nf[0]=f[1]=1\nfor i in range(2,n+1):\n    f[i]=f[i-1]+f[i-2]\n</code></pre>"},{"location":"study/datastructure/algorithm/#_15","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6c42\u627e\u51fa\u5b83\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LCS\uff09\uff0c\u5373\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u90fd\u6709\u7684\u5b57\u7b26\uff0c\u4e14\u8fd9\u4e9b\u5b57\u7b26\u5728\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u4e00\u81f4\u3002</p>"},{"location":"study/datastructure/algorithm/#_16","title":"\u52a0\u6743\u72ec\u7acb\u96c6\u5408\u95ee\u9898","text":"<p>\u8003\u8651\u4e00\u7ef4\u60c5\u51b5\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe\\(G=(V,E)\\)\uff0c\u548c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u91cd\\(w(v_i)\\)\uff0c\u8981\u6c42\u627e\u5230\u4e00\u4e2a\u72ec\u7acb\u96c6\u5408\\(I\\subset V\\)\uff0c\u4f7f\u5f97I\u4e2d\u8282\u70b9\u95f4\u65e0\u4efb\u4f55\u8fb9\u76f8\u8fde\u4e14\u6743\u91cd\u548c\u6700\u5927\u3002 \u52a8\u6001\u89c4\u5212\u65b9\u7a0b\uff1a\u4ec5\u65e0\u8d1f\u6743\u91cd\u60c5\u51b5\u3002 \\(W_n=max\\{W_{n-1},W_{n-2}+wn\\}\\)</p> <p></p> <p>\u4ece\u4f2a\u4ee3\u7801\u6765\u770b\uff0c\u5982\u679c\u6709\u8d1f\u6743\u91cd\uff0c\u6bd4\u5982\\(w_1=-3,w_2=-1\\)\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u5faa\u73af\u4f1a\u5f97\u5230\\(A[2]=-1\\)\uff0c\u8fd9\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u5b83\u6700\u5927\u53ef\u4ee5\u662f0\uff0c\u5373\u4ec0\u4e48\u4e5f\u4e0d\u9009\u3002</p>"},{"location":"study/datastructure/algorithm/#2","title":"\u6700\u5927\u5b50\u5e8f\u5217\u548c\u95ee\u98982","text":"<p>\u5b9a\u4e49\\(dp[i]\\)\u4e3a\u4ee5\u7b2ci\u4e2a\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c [dp[i]=max{dp[i-1]+w_i,w_i}] O(n)\u65f6\u95f4\u6c42\u51fadp[i],i=0,..n\uff0c\u7136\u540e\u904d\u5386dp[i]\u627e\u51fa\u6700\u5927\u7684\u90a3\u4e2a\uff0c\u6bd4\u5982\u4e3adp[k]\u3002 \u627e\u51fa\u8fd9\u4e2a\u548c\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff1a\u4ecedp[k]\u5411\u524d\u904d\u5386\uff0c\u5224\u65ad\\(dp[t]=dp[t-1]+w_t,t=k,...0\\)\u662f\u5426\u6210\u7acb\uff0c\u5982\u679c\u6210\u7acb\uff0c\u8bf4\u660e\u5b50\u5e8f\u5217\u53ef\u4ee5\u7ee7\u7eed\u5411\u524d\u6269\u5145\uff0c\u5982\u679c\u4e0d\u6210\u7acb\u8bf4\u660e\u6700\u5927\u548c\u5b50\u5e8f\u5217\u4e2d\u6b62\u4e8e\\(t\\)</p> <p>O(n)</p>"},{"location":"study/datastructure/algorithm/#_17","title":"\u96f6\u94b1\u5151\u6362\u95ee\u9898","text":"<p>\u5b9a\u4e49\\(dp[i]\\)\u4e3ai\u5143\u94b1\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\uff0c\u5219\u52a8\u6001\u89c4\u5212\u65b9\u7a0b\u4e3a\\(dp[i]=min\\{dp[i],dp[i-coin]+1\\} for coin in coins\\)\uff0c\u5373\u5c06\u5f53\u524d\u95ee\u9898\u8f6c\u5316\u5230\u603b\u94b1\u6570\u4e3a\\(i-coin\\)\u7684\u5df2\u89e3\u51b3\u95ee\u9898\u4e0a\uff0c\u4e0d\u65ad\u904d\u5386\\(coin\\)\u3002</p> <p></p> <p>O(n) \u5982\u4f55\u6784\u9020\u51fa\u5151\u6362\u65b9\u5f0f\uff1a\u6211\u4eec\u9700\u8981\u8ffd\u8e2adp[amount]\u662f\u5982\u4f55\u88ab\u53d6\u5230\u7684\uff0c\u5b83\u662f\u7531min{dp[amount-coin]+1}, for coin in coins,\u51b3\u5b9a\u7684\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5b83\u8f6c\u5316\u65f6\u5bf9\u5e94\u7684coin\uff0c\u7136\u540e\u518d\u8003\u8651dp[amount-coin]\u8f6c\u5316\u5230\u66f4\u5c11\u94b1\u6570\u65f6\u5bf9\u5e94\u7684coin\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u66f4\u65b0\u6bcf\u4e2adp[i]\u65f6\u8bb0\u5f55\u5b83\u4eec\u6700\u540e\u4e00\u6b21\u8f6c\u5316\uff08\u4e5f\u5c31\u662f\u7528\u786c\u5e01\u6700\u5c11\u7684\u60c5\u51b5\uff09\u65f6\u7684coin\u3002</p>"},{"location":"study/datastructure/algorithm/#_18","title":"\u80cc\u5305\u95ee\u9898","text":"<p>0-1\u80cc\u5305\u95ee\u9898\uff1a\u6211\u4eec\u6709 n \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u7684\u91cd\u91cf\u4e3a si\uff0c\u4ef7\u503c\u4e3a vi\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a C \u7684\u80cc \u5305\uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u6700\u4f18\u7684\u88c5\u8f7d\u65b9\u6848\uff0c\u4f7f\u5f97\u80cc\u5305\u4e2d\u7684\u7269\u54c1\u603b\u4ef7\u503c\u6700\u5927\u3002 \u5b9a\u4e49\\(dp[i][j]\\)\u4e3a\u5bb9\u91cf\u4e3ai\u7684\u80cc\u5305\u5728\u8003\u8651\u524dj\u4e2a\u7269\u54c1\u65f6\u53ef\u88c5\u7684\u6700\u5927\u4ef7\u503c\uff0c \\(i&gt;s_j\\):</p> \\[dp[i] [j]=max\\{dp [i-s_j] [j-1] + v_j,dp [i] [j-1]\\}\\] <p>\\(i&lt;s_j\\):\u5373\u80cc\u5305\u653e\u4e0d\u4e0b\u7b2cj\u4e2a\u7269\u54c1</p> \\[dp[i] [j]=dp[i] [j-1]\\]"},{"location":"study/datastructure/algorithm/#_19","title":"\u77e9\u9635\u8fde\u4e58\u95ee\u9898","text":"<p>\u6211\u4eec\u8003\u8651\u77e9\u9635\u94fe\u76f8\u4e58 M1M2 \u00b7 \u00b7 \u00b7 Mn\uff0c\u6bcf\u4e2a\u77e9\u9635\u7684\u5927\u5c0f\u4e3a \\(r_i\u22121 \u00d7 r_i\\)\u3002 \u5bf9\u4e8en\u4e2a\u77e9\u9635\u6574\u4f53\u800c\u8a00\uff0c\u5b83\u6700\u7ec8\u8fd8\u662f\u8981\u5316\u4e3a\u4e24\u4e2a\u77e9\u9635\u4e58\u6cd5:\\(M_{1,i}*M_{i+1,n}\\)\uff0c\u7528\\(m_{1n}\\)\u8868\u793a\u4eceM1\u4e58\u5230Mn\u6240\u7528\u7684\u6700\u5c11\u4e58\u6cd5\u6b21\u6570\uff0c\u5219 [m_{1n}=\\min\\limits_{1\\leq k\\lt n}{m_{1,k}+m_{k+1,n}+r_0r_kr_n}]</p> <p>\u8fdb\u4e00\u6b65\u63a8\u5e7f\u53ef\u5f97\uff1a [ m_{ij}= \\begin{cases} m_{ij}=\\min\\limits_{i\\leq k\\lt j}{m_{i,k}+m_{k+1,j}+r_{i-1}r_kr_j} &amp; i&lt;j\\ 0  &amp; i=j \\end{cases} ]</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n^3)\\)</p>"},{"location":"study/datastructure/algorithm/#_20","title":"\u6700\u4f18\u4e8c\u53c9\u641c\u7d22\u6811","text":"\\[c_{ij} = \\sum\\limits_{k=i}^{j} + \\min\\limits_{i\u2a7dk\u2a7dj}\\{c_{i,k\u22121} + c_{k+1,j}\\}, i \u2a7d j.\\] <p>\u7b2c\u4e00\u9879\u7684\u610f\u4e49\u5728\u4e8e\uff0c\u56e0\u4e3a\u6839\u7ed3\u70b9\u7684\u5b58\u5728\uff0c\u5bfc\u81f4\u6240\u6709 i \u5230 j \u7684\u5355\u8bcd\u90fd\u52a0\u6df1\u4e00\u5c42\uff0c\u662f\u4e24\u4e2a\u5b50\u95ee\u9898\u7ed3\u5408 \u8d77\u6765\u589e\u52a0\u7684\u4ee3\u4ef7\u3002\u7b2c\u4e8c\u9879\u5219\u662f\u5de6\u53f3\u5b50\u6811\u5b50\u95ee\u9898\u7684\u60c5\u51b5\u3002</p> <p>\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p></p> <p>\\(O(n^3)\\)</p>"},{"location":"study/datastructure/algorithm/#_21","title":"\u6700\u77ed\u8def\u5f84\u95ee\u9898","text":""},{"location":"study/datastructure/algorithm/#greedy","title":"Greedy","text":""},{"location":"study/datastructure/algorithm/#_22","title":"\u6d3b\u52a8\u9009\u62e9\u95ee\u9898","text":"<p>\u8d2a\u5fc3\u7b56\u7565\uff1a\u5c06\u6d3b\u52a8\u6309\u7ed3\u675f\u65f6\u95f4\u4ece\u65e9\u5230\u665a\u6392\u5e8f\uff0c\u4f9d\u6b21\u9009\u62e9\u6d3b\u52a8\uff0c\u5982\u679c\u5f53\u524d\u6d3b\u52a8\u4e0d\u4e0e\u4e4b\u524d\u6d3b\u52a8\u51b2\u7a81\uff0c\u5219\u9009\u62e9\u5b83\u3002 \u7b49\u4ef7\u7b56\u7565\uff1a\u4ece\u540e\u5f80\u524d\u4f9d\u6b21\u9009\u62e9\u4e0d\u51b2\u7a81\u7684\u6700\u665a\u5f00\u59cb\u7684\u6d3b\u52a8\u3002</p>"},{"location":"study/datastructure/algorithm/#_23","title":"\u8c03\u5ea6\u95ee\u9898","text":"<p>\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709 n \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1 i \u90fd\u6709\u4e00\u4e2a\u6b63\u7684\u5b8c\u6210\u9700\u8981\u7684\u65f6\u95f4 li \u548c\u4e00\u4e2a\u6743\u91cd wi\u3002\u5047\u5b9a\u6211\u4eec\u53ea\u80fd\u6309\u4e00\u5b9a\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u4e0d\u80fd\u5e76\u884c\u3002\u8bb0\u4efb\u52a1i\u5b8c\u6210\u65f6\u95f4\u4e3a\\(C_i(\\sigma)\\),\u5b83\u7b49\u4e8e\u8c03\u5ea6\u5f00\u59cb\u5230\u5b83\u88ab\u5b8c\u6210\u7684\u65f6\u95f4\u3002 \u76ee\u6807\u4e3a\u6700\u5c0f\u5316\u6240\u6709\u4efb\u52a1\u7684\u52a0\u6743\u5b8c\u6210\u65f6\u95f4\u4e4b\u548c\uff1a [T=\\min\\limits_{\\sigma}\\sum\\limits_{i=1}^{n}w_iC_i(\\sigma)] \u8d2a\u5fc3\u65b9\u5f0f\uff1a\u5c3d\u53ef\u80fd\u5148\u653e\u6743\u91cd\u5927\u7684\u65f6\u95f4\u77ed\u7684\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u4efb\u52a1\u7684\\(w_i/l_i\\)\u6309\u4ece\u5927\u5230\u5c0f\u8c03\u5ea6\u3002</p>"},{"location":"study/datastructure/algorithm/#optimal-prefix-code","title":"Optimal prefix code(\u6700\u4f18\u524d\u7f00\u7f16\u7801)","text":""},{"location":"study/datastructure/algorithm/#_24","title":"\u7f16\u7801\u6811","text":"<ul> <li> <p>\u6ee1\u4e8c\u53c9\u6811\uff1a\u6240\u6709\u8282\u70b9\u8981\u4e48\u662f\u53f6\u5b50\u8981\u4e48\u6709\u4e24\u4e2a\u513f\u5b50</p> </li> <li> <p>\u6700\u4f18\u524d\u7f00\u7801\u7684\u7f16\u7801\u6811\u4e00\u5b9a\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\uff1a\u6700\u4f18\u524d\u7f00\u7801\uff08\u5982\u970d\u592b\u66fc\u7f16\u7801\uff09\u8981\u6c42\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u5904\u4e8e\u6811\u7684\u6700\u5e95\u5c42\u6216\u63a5\u8fd1\u6700\u5e95\u5c42\u3002\u5982\u679c\u4e8c\u53c9\u6811\u662f\u975e\u6ee1\u7684\uff0c\u67d0\u4e9b\u53f6\u5b50\u8282\u70b9\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u8f83\u9ad8\u7684\u5c42\u7ea7\uff0c\u8fd9\u5c31\u8fdd\u53cd\u4e86\u6700\u4f18\u524d\u7f00\u7801\u7684\u6784\u9020\u8981\u6c42\uff1a\u9891\u7387\u8f83\u9ad8\u7684\u7b26\u53f7\u5e94\u8be5\u88ab\u5206\u914d\u8f83\u77ed\u7684\u7f16\u7801\uff0c\u610f\u5473\u7740\u5b83\u4eec\u5e94\u8be5\u4f4d\u4e8e\u8f83\u4f4e\u7684\u5c42\u7ea7\u3002</p> </li> </ul>"},{"location":"study/datastructure/algorithm/#huffman","title":"Huffman\u7f16\u7801","text":"<p>\u5bfb\u627e\u51fa\u73b0\u9891\u7387\u6700\u4f4e\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u7528\u4e00\u4e2a\u7a7a\u8282\u70b9\u5c06\u5b83\u4eec\u8fde\u63a5\uff0c\u9891\u7387\u5c0f\u7684\u653e\u5de6\u8fb9\uff0c\u5927\u7684\u653e\u53f3\u8fb9\uff0c\u7a7a\u8282\u70b9\u9891\u7387\u4e3a\u88ab\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u9891\u7387\u548c\u3002\u8fd9\u6837\uff0c\u6240\u6709\u5b57\u7b26\u6700\u7ec8\u8fde\u63a5\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\u4e0a\uff0c\u4e14\u5b57\u7b26\u4e3a\u53f6\u8282\u70b9\u3002</p> <ul> <li>\u54c8\u592b\u66fc\u6811\u7f16\u7801k\u4e2a\u5b57\u7b26\uff0c\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4e3a\uff1a\u53f6\u8282\u70b9+\u975e\u53f6\u8282\u70b9=k+k-1=2k-1\u3002</li> </ul> <p>\u975e\u53f6\u5b50\u8282\u70b9\u7531\u5408\u5e76\u800c\u6765\uff0ck\u4e2a\u8282\u70b9\u6700\u7ec8\u5408\u5e76\u4e3a1\u68f5\u6811\u9700\u8981\u5408\u5e76k-1\u6b21\u3002</p>"},{"location":"study/datastructure/algorithm/#k-","title":"K-\u805a\u7c7b\u95ee\u9898","text":"<p>\u4e00\u79cd\u65e0\u76d1\u7763\u673a\u5668\u5b66\u4e60\u95ee\u9898 \u76ee\u6807\uff1a\u6700\u5927\u5316\u7c7b\u95f4\u95f4\u8ddd\uff08\u5b9a\u4e49\u4e3a\u4e24\u7c7b\u4e2d\u8ddd\u79bb\u6700\u8fd1\u70b9\u5bf9\u7684\u8ddd\u79bb\uff09\uff08\u5b9e\u9645\u4e0a\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5316\u7c7b\u5185\uff08\u5230\u4e2d\u5fc3\uff09\u8ddd\u79bb\uff09\u3002 \u8d2a\u5a6a\u7b97\u6cd5\uff1a\u8ba1\u7b97\u4efb\u610f\u4e24\u70b9\u95f4\u8ddd\u79bb\uff0c\u6392\u5e8f\uff0c\u4f9d\u6b21\u5c06\u6700\u5c0f\u8fb9\u8fde\u4e0a\uff0c\u76f4\u5230\u5269\u4e0bK\u4e2a\u8054\u901a\u5206\u91cf\uff08\u4e0eKruskra\u7b97\u6cd5\u751f\u6210\u6700\u5c0f\u751f\u6210\u6811\u76f8\u540c\uff09\u3002</p>"},{"location":"study/datastructure/algorithm/#np","title":"NP","text":""},{"location":"study/datastructure/algorithm/#_25","title":"\u6982\u5ff5","text":"<ul> <li>NP NP\u7c7b\u95ee\u9898\u662f\u6307\u90a3\u4e9b\u53ef\u4ee5\u5728\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u4e0a\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u7b49\u4ef7\u4e8e\uff1a\u53ea\u8981\u6c42\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u89e3\uff0c</li> <li>NP-complete \u662f NP \u95ee\u9898\u4e2d\u6700\u96be\u7684\u4e00\u7c7b\uff0c\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u80fd\u89e3\u51b3\u4e00\u4e2a NP-complete \u95ee\u9898\uff0c\u90a3\u4e48\u6240\u6709 NP \u95ee\u9898\u90fd\u80fd\u88ab\u89e3\u51b3\uff0c\u5373\u6240\u6709NP\u95ee\u9898\u53ef\u4ee5\u5f52\u7ea6\u5230NPC\u95ee\u9898\u3002</li> <li>NP-hard \u662f\u6240\u6709\u6700\u96be\u95ee\u9898\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ef\u80fd\u5e76\u4e0d\u5c5e\u4e8e NP \u7c7b\uff0c\u4e5f\u5c31\u662f\u5b83\u4eec\u7684\u89e3\u6709\u53ef\u80fd\u4e0d\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\uff0c\u6216\u8005\u6839\u672c\u5c31\u6ca1\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u9a8c\u8bc1\u8fc7\u7a0b\u3002</li> <li>co-NP:NP\u95ee\u9898\u7684\u5bf9\u5076\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u53cd\u4f8b\uff08\u5373\u95ee\u9898\u7684\u8d1f\u9762\u89e3\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u8fd9\u4e2a\u53cd\u4f8b\u7684\u6709\u6548\u6027\u3002   \u4f8b\u5b50\uff1a3-SAT\u7684\u5bf9\u5076\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e03\u5c14\u516c\u5f0f\uff0c\u5224\u65ad\u662f\u5426\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u4f7f\u5f97\u8be5\u516c\u5f0f\u4e3a\u771f\u3002</li> </ul>"},{"location":"study/datastructure/algorithm/#reduction","title":"\u5f52\u7ea6\uff08reduction\uff09","text":"<ul> <li>A language L1 is polynomial-time reducible to a language \\(L2 ( L1 \\leq_p L2 )\\) if there exists a polynomial-time computable function  \\(f : \\{0, 1\\}* \u2192 \\{0,1\\}*\\) such that for all $x \\in{0, 1}*,  x\\in L1 $ iff $  f(x) \\in L2$. \\(A \\leq_P B\\)\u8868\u793aA\u53ef\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\u5230B\uff0c\u610f\u5473\u7740A\u4e0d\u6bd4B\u96be\uff0c\u6216\u8005B\u81f3\u5c11\u548cA\u4e00\u6837\u96be</li> </ul>"},{"location":"study/datastructure/algorithm/#_26","title":"\u57fa\u672c\u601d\u60f3","text":"<p>\u5f52\u7ea6\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u6211\u4eec\u80fd\u591f\u5c06\u4e00\u4e2a\u5df2\u77e5\u96be\u5ea6\u7684 \u95ee\u9898 A \u8f6c\u5316\u4e3a\u53e6\u4e00\u4e2a\u95ee\u9898 B\uff0c\u5e76\u4e14\u80fd\u6709\u6548\u5730\u6c42\u89e3\u95ee\u9898 B\uff0c\u90a3\u4e48\u95ee\u9898 A \u4e5f\u5c31\u53d8\u5f97\u53ef\u89e3\u4e86\u3002\u901a\u8fc7\u5f52\u7ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5df2\u7ecf\u89e3\u51b3\u7684\u66f4\u7b80\u5355\u6216\u5df2\u77e5\u66f4\u96be\u7684\u95ee\u9898\u6765\u89e3\u51b3\u66f4\u590d\u6742\u7684\u95ee\u9898\u3002</p> <p>\u5f52\u7ea6\u901a\u5e38\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a</p> <ol> <li>\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\uff1a\u6307\u5c06\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u53e6\u4e00\u4e2a\u95ee\u9898\u7684\u8fc7\u7a0b\u6240\u9700\u7684\u65f6\u95f4\u662f\u591a\u9879\u5f0f\u7ea7\u522b\u7684\uff0c\u5373\u5bf9\u4e8e\u8f93\u5165\u7684\u5927\u5c0f \\(n\\)\uff0c\u8f6c\u6362\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n^k)\\)\uff0c\u5176\u4e2d \\(k\\) \u662f\u5e38\u6570\u3002</li> <li>\u53ef\u5224\u5b9a\u5f52\u7ea6\uff1a\u6307\u901a\u8fc7\u5f52\u7ea6\uff0c\u95ee\u9898\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f97\u5230\u89e3\u51b3\u3002</li> </ol>"},{"location":"study/datastructure/algorithm/#_27","title":"\u5f52\u7ea6\u7684\u5177\u4f53\u8fc7\u7a0b","text":"<ol> <li>\u8f93\u5165\u8f6c\u6362\uff1a\u5c06\u95ee\u9898 \\(A\\) \u7684\u8f93\u5165\u8f6c\u6362\u6210\u95ee\u9898 \\(B\\) \u7684\u8f93\u5165\u3002\u8f6c\u6362\u5fc5\u987b\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5b8c\u6210\u3002</li> <li>\u6c42\u89e3\u95ee\u9898 \\(B\\)\uff1a\u7528\u5df2\u77e5\u7684\u7b97\u6cd5\u6c42\u89e3\u95ee\u9898 \\(B\\)\u3002</li> <li>\u8f93\u51fa\u8f6c\u6362\uff1a\u5c06\u95ee\u9898 \\(B\\) \u7684\u89e3\u8f6c\u6362\u56de\u95ee\u9898 \\(A\\) \u7684\u89e3\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e5f\u5fc5\u987b\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5b8c\u6210\u3002</li> </ol>"},{"location":"study/datastructure/algorithm/#_28","title":"\u5f52\u7ea6\u7684\u5e94\u7528","text":"<ol> <li>\u8bc1\u660e\u95ee\u9898\u7684 NP-hard \u6027\uff1a\u4e3a\u4e86\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u662f NP-hard\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u5c06\u5df2\u77e5\u7684 NP-hard \u95ee\u9898\u5f52\u7ea6\u5230\u8be5\u95ee\u9898\u3002\u5982\u679c\u4e00\u4e2a\u5df2\u77e5\u7684 NP-hard \u95ee\u9898\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u7ea6\u5230\u67d0\u4e2a\u95ee\u9898 \\(A\\)\uff0c\u90a3\u4e48\u95ee\u9898 \\(A\\) \u5c31\u662f NP-hard \u7684\u3002</li> <li> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 \u65c5\u884c\u5546\u95ee\u9898\uff08TSP\uff09 \u6216 \u80cc\u5305\u95ee\u9898\uff08Knapsack Problem\uff09 \u7b49\u5df2\u77e5\u7684 NP-hard \u95ee\u9898\u5f52\u7ea6\u5230\u67d0\u4e2a\u65b0\u95ee\u9898\uff0c\u6765\u8bc1\u660e\u65b0\u95ee\u9898\u662f NP-hard \u7684\u3002</p> </li> <li> <p>\u8bbe\u8ba1\u4f18\u5316\u7b97\u6cd5\uff1a\u6709\u65f6\u5f52\u7ea6\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u8bbe\u8ba1\u4f18\u5316\u95ee\u9898\u7684\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u7279\u522b\u662f\u5728\u89e3\u7b54\u590d\u6742\u95ee\u9898\u65f6\uff0c\u5f52\u7ea6\u5e2e\u52a9\u6211\u4eec\u901a\u8fc7\u5229\u7528\u5df2\u6709\u7684\u89e3\u6cd5\u6765\u51cf\u5c11\u6c42\u89e3\u590d\u6742\u5ea6\u3002</p> </li> </ol>"},{"location":"study/datastructure/algorithm/#_29","title":"\u5f52\u7ea6\u7684\u4f8b\u5b50","text":""},{"location":"study/datastructure/algorithm/#1-tsp","title":"1. TSP\uff08\u65c5\u884c\u5546\u95ee\u9898\uff09\u5f52\u7ea6\u5230\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u95ee\u9898","text":"<p>\u5047\u8bbe\u4f60\u77e5\u9053 \u65c5\u884c\u5546\u95ee\u9898 \u662f NP-complete \u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6 \u5c06 \u65c5\u884c\u5546\u95ee\u9898\uff08TSP\uff09 \u5f52\u7ea6\u5230\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u95ee\u9898\uff0c\u6765\u8bc1\u660eHamiltonian\u95ee\u9898\u4e5f\u662f NP-complete \u7684\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6743\u56fe\uff0c\u5e76\u4e14\u8981\u6c42\u627e\u5230\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u603b\u6743\u91cd\u6700\u5c0f\u4e14\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9\u6070\u597d\u4e00\u6b21\uff0c\u56de\u5230\u8d77\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u95ee\u9898\u3002\u5728\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u4ec5\u5173\u5fc3\u662f\u5426\u5b58\u5728\u4e00\u6761\u4e0d\u91cd\u590d\u7ecf\u8fc7\u6bcf\u4e2a\u8282\u70b9\u7684\u56de\u8def\uff0c\u4e0d\u8003\u8651\u8fb9\u7684\u6743\u91cd\u3002\u901a\u8fc7\u9002\u5f53\u7684\u8f6c\u6362\uff0c\u6211\u4eec\u5c31\u80fd\u628a\u65c5\u884c\u5546\u95ee\u9898\u8f6c\u5316\u4e3a\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u95ee\u9898\uff0c\u5e76\u8bc1\u660e\u5b83\u7684\u96be\u5ea6\u3002</p>"},{"location":"study/datastructure/algorithm/#2-3sat","title":"2. 3SAT \u5f52\u7ea6\u5230\u72ec\u7acb\u96c6\u95ee\u9898","text":"<p>\u5047\u8bbe\u4f60\u60f3\u8bc1\u660e \u72ec\u7acb\u96c6\u95ee\u9898\uff08Independent Set Problem\uff09 \u662f NP-complete \u7684\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u5df2\u77e5\u7684 NP-complete \u95ee\u9898 3SAT\uff083-\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff09 \u5f52\u7ea6\u5230\u72ec\u7acb\u96c6\u95ee\u9898\u6765\u8bc1\u660e\u30023SAT \u95ee\u9898\u662f\u7ed9\u5b9a\u4e00\u4e2a\u5e03\u5c14\u516c\u5f0f\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u79cd\u53d8\u91cf\u7684\u8d4b\u503c\u4f7f\u5f97\u516c\u5f0f\u4e3a\u771f\u3002\u901a\u8fc7\u5408\u7406\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u8f6c\u6362\uff0c\u5c06 3SAT \u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72ec\u7acb\u96c6\u95ee\u9898\uff0c\u8bc1\u660e\u72ec\u7acb\u96c6\u95ee\u9898\u662f NP-complete \u7684\u3002</p>"},{"location":"study/datastructure/algorithm/#_30","title":"\u5f52\u7ea6\u7684\u5206\u7c7b","text":"<ul> <li> <p>\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\uff08Polynomial-time Reduction\uff09\uff1a\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u5f52\u7ea6\u7c7b\u578b\u3002\u5982\u679c\u95ee\u9898 \\(A\\) \u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u7ea6\u5230\u95ee\u9898 \\(B\\)\uff0c\u5e76\u4e14\u6211\u4eec\u77e5\u9053 \\(B\\) \u662f NP-hard \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad \\(A\\) \u81f3\u5c11\u662f NP-hard \u7684\u3002</p> </li> <li> <p>\u591a\u9879\u5f0f\u65f6\u95f4\u53ef\u5f52\u7ea6\uff08Polynomial-time Reducible\uff09\uff1a\u5982\u679c\u95ee\u9898 \\(A\\) \u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u7ea6\u4e3a\u95ee\u9898 \\(B\\)\uff0c\u6211\u4eec\u8bf4 \\(A\\) \u662f\u53ef\u5f52\u7ea6\u7684\u3002\u8fd9\u6837\u7684\u5f52\u7ea6\u5e2e\u52a9\u6211\u4eec\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u7684\u96be\u5ea6\u3002</p> </li> <li> <p>\u5f52\u7ea6\u5230\u4f18\u5316\u95ee\u9898\uff08Reduction to Optimization Problems\uff09\uff1a\u5728\u4f18\u5316\u95ee\u9898\u4e2d\uff0c\u5e38\u5e38\u5c06\u4e00\u4e2a\u95ee\u9898\u5f52\u7ea6\u4e3a\u5176\u5bf9\u5e94\u7684\u51b3\u7b56\u95ee\u9898\uff0c\u7136\u540e\u901a\u8fc7\u6c42\u89e3\u51b3\u7b56\u95ee\u9898\u6765\u4f18\u5316\u89e3\u3002</p> </li> </ul>"},{"location":"study/datastructure/algorithm/#_31","title":"\u95ee\u9898","text":""},{"location":"study/datastructure/algorithm/#satnpc","title":"SAT(\u53ef\u6ee1\u8db3\u6027\u95ee\u9898)\u2014\u2014NPC","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e03\u5c14\u516c\u5f0f\uff08\u901a\u5e38\u662f\u5408\u53d6\u8303\u5f0f\uff09\uff0c\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u6c42\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u4f7f\u5f97\u6574\u4e2a\u516c\u5f0f\u7684\u503c\u4e3a\u771f\u3002</p> <p>\u7279\u4f8b\uff1a3SAT\u95ee\u9898NPC\uff1a\u5408\u53d6\u8303\u5f0f\u7684\u6bcf\u4e2a\u5b50\u53e5\u4e2d\u6700\u591a\u6709\u4e09\u4e2a\u53d8\u91cf\u3002</p>"},{"location":"study/datastructure/algorithm/#vertex-covernpc","title":"Vertex cover(\u9876\u70b9\u8986\u76d6)\u2014\u2014NPC","text":"<ul> <li>\u9876\u70b9\u8986\u76d6\u95ee\u9898\uff1a\u7ed9\u5b9a\u56fe \\( G = (V, E) \\)\uff0c\u5bfb\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\u9876\u70b9\u96c6\u5408 \\( C \\subseteq V \\)\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u6761\u8fb9 \\( (u, v) \\in E \\)\uff0c\u8981\u4e48 \\( u \\in C \\)\uff0c\u8981\u4e48 \\( v \\in C \\)\u3002</li> </ul>"},{"location":"study/datastructure/algorithm/#donimatiing-setnpc","title":"Donimatiing set(\u652f\u914d\u96c6)\u2014\u2014NPC","text":"<ul> <li>\u652f\u914d\u96c6\u95ee\u9898\uff1a\u7ed9\u5b9a\u56fe \\( G = (V, E) \\)\uff0c\u5bfb\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\u9876\u70b9\u96c6\u5408 \\( D \\subseteq V \\)\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e2a \\( v \\in V \\)\uff0c\u5982\u679c \\( v \\notin D \\)\uff0c\u5219\u5b58\u5728\u4e00\u4e2a\u9876\u70b9 \\( u \\in D \\)\uff0c\u4f7f\u5f97 \\( (u, v) \\in E \\)\uff0c\u5373 \\( u \\) \u548c \\( v \\) \u662f\u90bb\u5c45\u3002</li> </ul> <p>\u6ce8\u610f\u4e0e\u9876\u70b9\u8986\u76d6\u95ee\u9898\u7684\u4e0d\u540c\uff0c\u8fd9\u91cc\u6ce8\u91cd\u7684\u662f\u9876\u70b9\u7684\u652f\u914d\u5173\u7cfb\uff0c\u800c\u9876\u70b9\u8986\u76d6\u6ce8\u91cd\u7684\u662f\u8fb9\u7684\u8986\u76d6\u3002\u6bd4\u5982\u4e00\u4e2a\u4e09\u89d2\u5f62\u73af\uff0c\u9876\u70b9\u8986\u76d6\u95ee\u9898\u9700\u9009\u4e24\u4e2a\u9876\u70b9\u800c\u652f\u914d\u96c6\u95ee\u9898\u53ea\u9700\u9009\u4e00\u4e2a\u9876\u70b9\u3002</p>"},{"location":"study/datastructure/algorithm/#hamiltonian-curcuitnpc","title":"Hamiltonian curcuit\u2014\u2014NPC","text":"<p>\u54c8\u5bc6\u987f\u56de\u8def\u7684\u5b9a\u4e49\uff1a\u56fe\u4e2d\u5b58\u5728\u4e00\u4e2a\u56de\u8def\uff08\u95ed\u5408\u8def\u5f84\uff09\uff0c\u5b83\u5305\u542b\u56fe\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u4e14\u6bcf\u4e2a\u9876\u70b9\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002</p>"},{"location":"study/datastructure/algorithm/#tsp","title":"TSP(\u65c5\u884c\u5546\u95ee\u9898)","text":"<ul> <li>\u4f18\u5316\u7248\u672c\uff08NP-hard\uff09\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u5168\u56fe G = (V, E)\uff0c\u6bcf\u6761\u8fb9 e \u2208 E \u6709\u4e00\u4e2a\u6743\u91cd w(e)\uff0c\u6c42\u4e00\u6761\u7ecf\u8fc7\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5373\u4e00\u6761\u6743\u91cd\u4e4b\u548c\u6700\u5c0f\u7684\u54c8\u5bc6\u987f\u56de\u8def\u3002</li> <li> <p>\u4e0d\u53ef\u8fd1\u4f3c\u6027\uff1a\u9664\u975eP=NP\uff0c\u5426\u5219\u5bf9\u4e8e\u4efb\u610f\\(k\\geq 1\\)\uff0cTSP\u4e0d\u5b58\u5728k-\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u4f46\u662f\u6dfb\u52a0\u4e86\u5ea6\u91cf\u7a7a\u95f4\u7684\u6761\u4ef6\u540e\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a   </p> </li> <li> <p>\u5224\u5b9a\u7248\u672c\uff08NPC\uff09\uff1a\u8981\u6c42\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5176\u603b\u6743\u91cd\u4e0d\u8d85\u8fc7\u4e00\u4e2a\u7ed9\u5b9a\u7684\u9608\u503cC\u3002</p> </li> </ul>"},{"location":"study/datastructure/algorithm/#approximation-","title":"Approximation-\u8fd1\u4f3c\u7b97\u6cd5","text":"<p>\u5bf9\u4e8e\u4e0d\u80fd\u540c\u65f6\u6ee1\u8db3\u4e0b\u9762\u4e09\u4e2a\u7279\u6027\u7684NP\u95ee\u9898\u6765\u8bf4\uff0c\u5982\u679c\u6ee1\u8db3\u4e8623\u4f46\u4e0d\u6ee1\u8db31\uff0c\u90a3\u4e48\u5c31\u662f\u8fd1\u4f3c\u7b97\u6cd5\u3002</p> <ul> <li>1.optimality(\u627e\u5230\u6700\u4f18\u89e3)</li> <li>2.efficiency(\u591a\u9879\u5f0f\u65f6\u95f4\u5b8c\u6210)</li> <li>3.all instances(\u901a\u7528)</li> </ul>"},{"location":"study/datastructure/algorithm/#_32","title":"\u6982\u5ff5","text":""},{"location":"study/datastructure/algorithm/#_33","title":"\u8fd1\u4f3c\u6bd4","text":"<ul> <li>\u8fd1\u4f3c\u6bd4\uff1a</li> </ul>"},{"location":"study/datastructure/algorithm/#ptas","title":"PTAS","text":"<p>PTAS\uff08Polynomial Time Approximation Scheme\uff09 \u662f\u4e00\u79cd\u7528\u4e8e\u6c42\u89e3\u4f18\u5316\u95ee\u9898\u7684\u7b97\u6cd5\u6846\u67b6\uff0c\u5b83\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u63d0\u4f9b\u63a5\u8fd1\u6700\u4f18\u89e3\u7684\u8fd1\u4f3c\u89e3\u3002\u5177\u4f53\u6765\u8bf4\uff0cPTAS \u662f\u4e00\u79cd\u7b97\u6cd5\uff0c\u5b83\u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u8bef\u5dee\u53c2\u6570\\(\\epsilon\\)\u63d0\u4f9b\u4e00\u4e2a\u95ee\u9898\u7684\u8fd1\u4f3c\u89e3\uff0c\u4e14\u8fd9\u4e2a\u89e3\u7684\u8d28\u91cf\u4e0e\u6700\u4f18\u89e3\u7684\u8bef\u5dee\u6bd4\u4f8b\u5c0f\u4e8e\\(1+\\epsilon\\)\uff0c\u5373\u76f8\u5bf9\u4e8e\u6700\u4f18\u89e3\u7684\u8bef\u5dee\u7387\u4e3a</p> <ol> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u9879\u5f0f\u7ea7\u522b\u7684\uff0c\u4f46\u968f\u7740 \\( \\epsilon \\) \u7684\u51cf\u5c0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u4f1a\u4f9d\u8d56\u4e8e \\( \\frac{1}{\\epsilon} \\)\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5c0f\u7684 \\( \\epsilon \\)\uff0cPTAS \u53ef\u80fd\u9700\u8981\u8f83\u957f\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u4ecd\u7136\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7684\u53ef\u63a5\u53d7\u89e3\u3002</li> <li>\u8fd1\u4f3c\u6027\uff1a\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684 \\( \\epsilon &gt; 0 \\)\uff0c\u7b97\u6cd5\u8f93\u51fa\u7684\u89e3\u7684\u8d28\u91cf\u5728\u6700\u4f18\u89e3 \\( OPT \\) \u7684 \\( (1 + \\epsilon) \\) \u500d\u4e4b\u5185\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7b97\u6cd5\u8f93\u51fa\u7684\u89e3 \\( A \\) \u6ee1\u8db3\uff1a    [    (1 - \\epsilon) \\cdot OPT \\leq A \\leq (1 + \\epsilon) \\cdot OPT    ]</li> <li> <p>\u9002\u7528\u8303\u56f4\uff1aPTAS \u901a\u5e38\u9002\u7528\u4e8e NP-hard \u95ee\u9898\u7684\u8fd1\u4f3c\u6c42\u89e3\u3002</p> </li> <li> <p>FPTAS\uff08Fully Polynomial-Time Approximation Scheme\uff09\uff1a</p> </li> <li>FPTAS \u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684 PTAS\uff0c\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u8fd1\u4f3c\u4f18\u5316\u95ee\u9898\uff0c\u800c\u4e14\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e \\( 1/\\epsilon \\) \u76f8\u5173\uff0c\u4f46\u4ecd\u7136\u662f\u591a\u9879\u5f0f\u7684\uff0c\u5373\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u9879\u5f0f\u51fd\u6570\uff0c\u65e2\u4e0e\u8f93\u5165\u5927\u5c0f\u6709\u5173\uff0c\u4e5f\u4e0e \\( 1/\\epsilon \\) \u6709\u5173\u3002</li> <li>FPTAS \u9002\u7528\u4e8e\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u7ed3\u6784\u7684\u4f18\u5316\u95ee\u9898\uff08\u5982\u7ebf\u6027\u89c4\u5212\u95ee\u9898\uff09\u3002</li> </ol>"},{"location":"study/datastructure/algorithm/#_34","title":"\u6700\u5c0f\u5316\u5de5\u65f6\u8c03\u5ea6\u95ee\u9898","text":""},{"location":"study/datastructure/algorithm/#_35","title":"\u4e00\u7ef4\u88c5\u7bb1\u95ee\u9898","text":"<p>NF,FF,BF</p>"},{"location":"study/datastructure/algorithm/#0-1","title":"0-1\u80cc\u5305","text":""},{"location":"study/datastructure/algorithm/#k2","title":"K\u805a\u7c7b\u95ee\u98982","text":"<ul> <li>\u95ee\u9898\u63cf\u8ff0\uff1a\u6700\u5c0f\u5316\u7c7b\u5185\u95f4\u8ddd\uff08\u4e4b\u524d\u662f\u6700\u5927\u5316\u7c7b\u95f4\u95f4\u8ddd\uff09\uff1a     \u8f93\u5165 n \u4e2a\u70b9\u7684\u4f4d\u7f6e s1, \u00b7 \u00b7 \u00b7 , sn\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k\uff0c\u8981\u6c42\u9009\u62e9 K \u4e2a\u4e2d\u5fc3\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u5230\u6700\u8fd1\u7684\u4e2d\u5fc3\u7684\u8ddd\u79bb\u6700\u5927\u503c r(C) \u6700\u5c0f\u5316\u3002</li> </ul>"},{"location":"study/datastructure/algorithm/#greedy-2r","title":"Greedy-2r\u7b97\u6cd5","text":"<ul> <li>\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u4e86r(C)\u7684\u6700\u5c0f\u503c\u4e3ar\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u4ece\u70b9\u96c6\u4e2d\u9009\u53d6\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u4e2d\u5fc3\uff0c\u628a\u5b83\u52a0\u5165\u4e2d\u5fc3\u70b9\u96c6\uff0c\u7136\u540e\u5220\u9664\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\u534a\u5f84\u4e3a2r\u7684\u5706\u5185\u7684\u6240\u6709\u70b9\uff0c\u7b97\u6cd5\u5fc5\u5728k\u6b65\u5185\u4e2d\u6b62\u3002   \u4e3a\u4ec0\u4e48k\u6b65\u5185\u4e2d\u6b62\uff1a\u7531\u5047\u8bbe\u77e5\u5f53r(C)\u4e3ar\u65f6\u6211\u4eec\u53ef\u4ee5\u9009\u51fak\u4e2a\u4e2d\u5fc3\u8fdb\u884c\u805a\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\u534a\u5f84\u4e3ar\uff0c\u90a3\u4e48\u4efb\u610f\u4e00\u4e2a\u70b9s\u5fc5\u7136\u5728\u4ee5\u67d0\u4e2a\u70b9\\(C*\\)\u4e3a\u5706\u5fc3\u534a\u5f84\u4e3ar\u7684\u5706\u5185\uff0c\u5f53\u4ee5\u70b9s\u4e3a\u5706\u5fc3\u534a\u5f84\u4e3a2r\u4f5c\u5706\u65f6\uff0c\u8fd9\u4e2a\u5706\u4f1a\u5305\u542b\u5706\\(C*\\)\u4e2d\u7684\u6240\u6709\u70b9\uff0c\u6240\u4ee5\u5c062r\u5706\u8303\u56f4\u5185\u70b9\u5220\u53bb\u81f3\u5c11\u4f1a\u51cf\u5c11\u4e00\u4e2a\u7c7b\uff0c\u6240\u4ee5K\u6b65\u4e4b\u5185\u5fc5\u7136\u4e2d\u6b62\u3002</li> <li>Greedy-2r\u7b97\u6cd5\u5728\u7ed9\u5b9a\u6700\u4f18\u89e3r(C)\u7684\u60c5\u51b5\u4e0b\u4e3a2-\u8fd1\u4f3c\u7b97\u6cd5\u3002 \u4f46\u662f\u6700\u4f18\u89e3r(C)\u672a\u5fc5\u7ed9\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u5c1d\u8bd5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u9009\u62e9r(C)\uff0c\u5982\u679c\u9009\u7684r(C)\u4e0d\u80fd\u4f7f\u7b97\u6cd5\u5728K\u6b65\u5185\u4e2d\u6b62\uff0c\u90a3\u4e48\u8bf4\u660er(C*)\u9009\u5c0f\u4e86\u3002</li> </ul>"},{"location":"study/datastructure/algorithm/#greedy-kcenter","title":"Greedy-Kcenter\u7b97\u6cd5","text":"<p>\u6211\u4eec\u9996\u5148\u4ece\u8f93\u5165\u70b9\u96c6\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u4e2d\u5fc3\uff0c\u52a0\u5165\u4e2d\u5fc3\u70b9\u96c6 C\u3002\u7136\u540e\u6bcf\u8f6e\u5faa\u73af\u5728\u5269\u4f59\u7684\u70b9\u4e2d\u627e\u5230\u4e00\u4e2a\u70b9 s \u7684 dist(s, C) \u6700\u5927\uff0c\u5373 s \u662f\u5230\u73b0\u6709\u4e2d\u5fc3\u6700\u77ed\u8ddd\u79bb\u6700\u5927\u7684\u70b9\uff0c\u5c06\u5176\u52a0\u5165\u4e2d\u70b9\u96c6C\uff0c\u76f4\u5230 C \u4e2d\u6709 K \u4e2a\u70b9\u3002\u8fd9\u4e00\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u662f 2\u3002</p>"},{"location":"study/datastructure/algorithm/#_36","title":"\u805a\u7c7b\u95ee\u9898\u6700\u4f18\u8fd1\u4f3c\u6bd4","text":"<ul> <li>\u5b9a\u7406\uff1a\u9664\u975e P = NP\uff0c\u5426\u5219 K-center \u95ee\u9898\u4e0d\u5b58\u5728 \u03c1-\u8fd1\u4f3c\u7b97\u6cd5\uff08\u03c1 &lt; 2\uff09\u3002 \u8bc1\u660e\u662f\u5c06NPC\u95ee\u9898dominating set\u5f52\u7ea6\u5230k-center\u95ee\u9898\u3002 dominating set \u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe G = (V, E)\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5927\u5c0f\u4e3a k\u7684\u96c6\u5408 S \u2282 V \uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u8981\u4e48\u5728 S \u4e2d\uff0c\u8981\u4e48\u4e0eS \u4e2d\u7684\u67d0\u4e2a\u70b9\u76f8\u90bb\u3002</li> </ul>"},{"location":"study/datastructure/algorithm/#local-search-","title":"Local search-\u5c40\u90e8\u641c\u7d22","text":""},{"location":"study/datastructure/algorithm/#_37","title":"\u95ee\u9898","text":""},{"location":"study/datastructure/algorithm/#_38","title":"\u9876\u70b9\u8986\u76d6\u95ee\u9898","text":"<ul> <li> <p>\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u9009\u53d6\u4efb\u610f\u4e00\u6761\u8fb9 (u, v)\uff0c\u5c06 u \u548c v \u540c\u65f6\u52a0\u5165\u5230 C \u4e2d\uff0c\u7136\u540e\u628a u \u548c v \u6240\u5728\u7684\u6240\u6709\u8fb9\u5168\u90e8\u79fb\u9664\uff0c\u4e0b\u4e00\u8f6e\u7ee7\u7eed\u5728\u5269\u4e0b\u7684\u8fb9\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u6761\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u7684\u8fb9\u90fd \u88ab\u5220\u9664\u4e3a\u6b62\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u4e3a2\u3002</p> </li> <li> <p>\u68af\u5ea6\u4e0b\u964d\uff1a\u9996\u5148\u5b9a\u4e49\u89e3\u7684\u201c\u90bb\u5c45\u201d\uff1a\u6bd4\u5f53\u524d\u89e3\u5c11\u4e00\u4e2a\u9876\u70b9\u7684\u89e3\u3002\u6240\u4ee5\u7b97\u6cd5\u6d41\u7a0b\u53ef\u4ee5\u662f\uff1a   \u8bbe\u89e3\u7684\u9876\u70b9\u96c6\u4e3aS\uff0c\u4ece\u6240\u6709\u9876\u70b9\u51fa\u53d1\uff0c\u4ee4S=V\uff0c\u9010\u6b65\u4eceS\u4e2d\u51cf\u53bb\u4e00\u4e2a\u9876\u70b9v\uff0c\u7136\u540e\u68c0\u67e5S-{v}\u662f\u5426\u4ecd\u672a\u4e00\u4e2a\u8986\u76d6\u3002</p> </li> <li> <p>\u6a21\u62df\u9000\u706b\uff1a </p> </li> </ul> <p> \u8fd9\u4e2a\u8fc7\u7a0b\u4e2dT\u9010\u6b65\u51cf\u5c11\u5373\u4e3a\u6a21\u62df\u9000\u706b\u3002</p>"},{"location":"study/datastructure/algorithm/#hopfield","title":"Hopfield\u795e\u7ecf\u7f51\u7edc\u7684\u7a33\u5b9a\u6784\u578b","text":"<p>\u9996\u5148\u7ed9\u51fa\u4e00\u4e9b\u5b9a\u4e49\uff1a</p> <p></p> <p>\u6211\u4eec\u79f0\u4e00\u4e2a\u6784\u578b\u662f\u7a33\u5b9a\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u70b9\u90fd\u662f\u6ee1\u610f\u7684\u3002 \u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a Hopfield \u795e\u7ecf\u7f51\u7edc\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u7a33\u5b9a\u6784\u578b\uff1f\u5982\u679c\u5b58\u5728\uff0c\u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u7a33\u5b9a\u6784\u578b\uff1f \u7b97\u6cd5\uff1a</p> <p></p> <p>\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u7b97\u6cd5\u6709\u9650\u6b65\u4f1a\u4e2d\u6b62\uff0c\u6700\u591a\u7ffb\u8f6c\\(\\sum\\limits_{e\\in E}|w_e|\\)</p>"},{"location":"study/datastructure/algorithm/#_39","title":"\u6700\u5927\u5272\u95ee\u9898","text":"<p>\u5272\u8fb9\u6743\u91cd\u548c\u6700\u5927\uff1a</p> <p></p> <p>\u7b97\u6cd5\uff08\u8f6c\u5316\u4e3aHopfield\u795e\u7ecf\u7f51\u7edc\u7a33\u5b9a\u6784\u578b\u95ee\u9898\uff09\uff1a</p> <p></p>"},{"location":"study/datastructure/algorithm/#random-algorithm","title":"random algorithm","text":""},{"location":"study/datastructure/algorithm/#parallel-algorithm-","title":"parallel algorithm-\u5e76\u884c\u7b97\u6cd5","text":""},{"location":"study/datastructure/algorithm/#pramparallel-random-access-machine","title":"PRAM\uff08parallel random access machine\uff09\u6a21\u578b","text":"<p>\u591a\u4e2a\u5904\u7406\u5668\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u5185\u5b58\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u5171\u4eab\u5185\u5b58</p> <p>\u5171\u4eab\u5185\u5b58\uff1a\u6240\u6709\u7684\u5904\u7406\u5668\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\uff0c\u6ca1\u6709\u660e\u786e\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u7cfb\u7edf\u7684\u6982\u5ff5\u3002 \u65e0\u9650\u5e76\u884c\u5904\u7406\u5668\uff1aPRAM \u5047\u8bbe\u6709\u65e0\u9650\u6570\u91cf\u7684\u5904\u7406\u5668\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u7406\u8bba\u4e0a\u540c\u65f6\u8fdb\u884c\u5927\u91cf\u7684\u8ba1\u7b97\u3002\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u5904\u7406\u5668\u6570\u91cf\u662f\u6709\u9650\u7684\uff0c\u4f46PRAM\u6a21\u578b\u901a\u5e38\u7528\u6765\u5206\u6790\u5e76\u884c\u7b97\u6cd5\u7684\u7406\u60f3\u6027\u80fd\u3002 \u540c\u6b65\uff1a\u6240\u6709\u7684\u5904\u7406\u5668\u5728\u540c\u4e00\u65f6\u523b\u6267\u884c\u6307\u4ee4\uff0c\u4f46\u5185\u5b58\u8bbf\u95ee\u6709\u4e0d\u540c\u7684\u8bbf\u95ee\u89c4\u5219\u3002</p>"},{"location":"study/datastructure/algorithm/#_40","title":"\u6839\u636e\u5185\u5b58\u8bbf\u95ee\u7c7b\u578b\u5206\u7c7b","text":"<p>EREW (Exclusive Read Exclusive Write)\uff1a\u6bcf\u4e2a\u5904\u7406\u5668\u5728\u67d0\u4e00\u65f6\u523b\u53ea\u80fd\u8bfb\u5199\u5185\u5b58\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u540c\u65f6\u8bfb\u53d6\u6216\u5199\u5165\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002 CREW (Concurrent Read Exclusive Write)\uff1a\u5141\u8bb8\u591a\u4e2a\u5904\u7406\u5668\u540c\u65f6\u8bfb\u53d6\u540c\u4e00\u5185\u5b58\u4f4d\u7f6e\uff0c\u4f46\u5199\u64cd\u4f5c\u4ecd\u7136\u662f\u6392\u4ed6\u7684\u3002 CRCW (Concurrent Read Concurrent Write)\uff1a\u5141\u8bb8\u591a\u4e2a\u5904\u7406\u5668\u540c\u65f6\u8bfb\u53d6\u548c\u5199\u5165\u540c\u4e00\u5185\u5b58\u4f4d\u7f6e\uff0c\u901a\u5e38\u9700\u8981\u989d\u5916\u7684\u540c\u6b65\u673a\u5236\u6765\u907f\u514d\u51b2\u7a81\u3002</p>"},{"location":"study/datastructure/algorithm/#wdwork-depth","title":"WD\uff08work depth\uff09","text":"<ol> <li>work:\u8861\u91cf\u8ba1\u7b97\u603b\u91cf</li> <li>depth:\u8861\u91cf\u6700\u957f\u4f9d\u8d56\u8def\u5f84\uff0c\u51b3\u5b9a\u4e86\u5e76\u884c\u8ba1\u7b97\u7684\u4e0a\u754c \\(T_{para}=\\frac{W(n)}{P(n)}+T(n)\\) n\u53ef\u4ee5\u8868\u793a\u95ee\u9898\u89c4\u6a21\uff0cW(n)\u4e3a\u5de5\u4f5c\u603b\u91cf\uff0cP(n)\u4e3a\u5904\u7406\u5668\u6570\u91cf\uff0c T(n)\u4e3aDepth\uff0c\u5e76\u884c\u5316\u4e0a\u754c\u3002 \u5f53P(n)\u8f83\u5c0f\u65f6\uff0c\u65f6\u95f4\u7531\u524d\u4e00\u9879\u51b3\u5b9a\uff0c\u95ee\u9898\u8f83\u5927\u65f6\u5e76\u884c\u65f6\u95f4\u7531\u540e\u4e00\u9879\u51b3\u5b9a\u3002</li> </ol>"},{"location":"study/datastructure/algorithm/#_41","title":"\u6c42\u548c\u95ee\u9898","text":"<p>\u6c42\u548c\u95ee\u9898\u7684Work-Depth presentation:</p> <p></p> <p>\\(T(n)=logn+2\uff0c W(n)=n+n/2+n/2^2+\\cdots n/2^k+1=2n, 2^k=n\\) W(n)\u76f8\u5f53\u4e8e\u8ba1\u7b97\u6811\u7684\u8282\u70b9\u4e2a\u6570</p> <p></p>"},{"location":"study/datastructure/algorithm/#_42","title":"\u524d\u7f00\u548c\u95ee\u9898","text":"<p>\u5728\u57fa\u672c\u7684\u6c42\u548c\u6811\u4e0a\u65b0\u5b9a\u4e49\\(C(h,i)=\\sum\\limits_{k=1}^{\\alpha}A(k)\uff0cA(k)\u5373\u8f93\u5165\u7684\u6240\u6709\u6570\uff0c(0,\\alpha)\\) \u4e3a\u5f53\u524d\u8282\u70b9\\((h,i)\\)\u7684\u5b50\u6811\u4e2d\u7684\u6700\u53f3\u4e0b\u7684\u8282\u70b9\u3002</p> <ul> <li>\u601d\u8def\uff1a\u5728\u5df2\u7ecf\u6784\u9020\u51fa\u7684\u6c42\u548c\u6811\u4e2d\uff0c\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u8ba1\u7b97\uff0c\u6bcf\u5c42\u5e76\u884c\u8ba1\u7b97\u3002 \u6839\u8282\u70b9C\u503c\uff08\u524d\u7f00\u548c\uff09\u7b49\u4e8eB\u503c\uff08\u6c42\u548c\u95ee\u9898\u4e2d\u7684\u548c\uff09\uff0c\u4e4b\u540e\u7684\u6bcf\u4e00\u5c42\uff08\u9664\u6700\u5e95\u5c42\uff09\uff1a</li> <li>\u7b2c\u4e00\u4e2a\u8282\u70b9\\((h,1)\\)\u7684C\u503c\u7b49\u4e8eB\u503c</li> <li>\u5076\u6570\u8282\u70b9\uff08\u53f3\u513f\u5b50\uff09\u7684\u524d\u7f00\u548c\u7b49\u4e8e\u7236\u8282\u70b9\u7684\u524d\u7f00\u548c\u3002</li> <li>\u5947\u6570\u8282\u70b9\uff08\u5de6\u513f\u5b50\uff0c\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\\(C(h,i)=C(h,i+1)-B(h,i+1)\\)\uff0c\u4f46\u662f\\(C(h,i)\\)\u548c\\(C(h,i+1)\\)\u4e3a\u540c\u65f6\u8ba1\u7b97\uff0c\u8fd9\u6837\u4f1a\u51fa\u9519\uff0c\u91cd\u65b0\u8003\u8651:\\(C(h,i)=C(h+1,(i-1)/2)+B(h,i)\\) \u4ee3\u7801\u5982\u4e0b\uff1a</li> </ul> <p></p> <p>\\(T(n)=O(logn),W(n)=O(n)\\)</p>"},{"location":"study/datastructure/algorithm/#_43","title":"\u5408\u5e76\u975e\u9012\u51cf\u6570\u7ec4\u95ee\u9898","text":"<p>\u5373\u5408\u5e76\u5927\u5c0f\u4e3an\u7684A\uff0cB\u4e3aC\uff0c\u4fdd\u6301\u975e\u51cf.</p>"},{"location":"study/datastructure/algorithm/#_44","title":"\u89e3\u6cd5","text":"<p>\u5b9a\u4e49\\(Rank()\\)\uff0c\u5c06\u6392\u5e8f\u95ee\u9898\u8f6c\u5316\u4e00\u4e0b:</p> <p></p> <p>\u53ef\u89c1\u4e0a\u9762 RANK(j,A) \u7684\u503c\u8868\u793a\\(B[j]\\)\u5728A\u6570\u7ec4\u4e2d\u7684\u5927\u5c0f\u6392\u540d\uff0c\u4e5f\u8bf4\u660e\u4e86A\u4e2d\u6709\u591a\u5c11\u4e2a\u6bd4B[j]\u5c0f\u7684\u5143\u7d20\u3002 \u540c\u7406 RANK(j,B) \u7684\u503c\u8868\u793a\\(A[j]\\)\u5728B\u6570\u7ec4\u4e2d\u7684\u5927\u5c0f\u6392\u540d\u3002 \u5982\u679c\u6709\u4e86RANK\uff0c\u5c31\u77e5\u9053\u4e86A,B\u4e2d\u5143\u7d20\u5728\u5408\u5e76\u540e\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\\(O(1)\\)\u7684\u65f6\u95f4\u548c\\(O(n+m)\\)\u7684\u5de5\u4f5c\u91cf\u5b8c\u6210\u5408\u5e76\uff1a</p> <p></p> <p>\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u662f\u5982\u4f55\u6c42RANK\uff0c\u4e0b\u9762\u7ed9\u51fa\u5e76\u884c\u548c\u4e32\u884c\u7b97\u6cd5\uff1a</p> <p></p> <p>\u4e0b\u9762\u57fa\u4e8eSerial ranking\u6765\u4f18\u5316\u51fa\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\uff1a</p> <p></p> <p>\u5148\u5206\u5272\u4e14\u8ba1\u7b97\u9009\u4e2d\u5143\u7d20\u7684RANK\uff08\u53ef\u4ee5\u5e76\u884c\u7528\u4e8c\u5206\u641c\u7d22\uff09\uff0c\u7136\u540e\u5bf9\u5206\u5272\u540e\u5f62\u6210\u7684\u6700\u591a2p\u4e2a\u533a\u57df\uff08\u4e24\u6761\u76f8\u90bb\u8fde\u7ebf\u4e2d\u95f4\u7684\u533a\u57df\uff09\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97RANK\uff0c\u6bcf\u4e2a\u90fd\u7528Serial ranking</p>"},{"location":"study/datastructure/algorithm/#_45","title":"\u5bfb\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u95ee\u9898","text":"<p>\u6cd51\uff1a\u5e76\u884c\u6bd4\u8f83\u6240\u6709\\(n^2\\)\u5bf9\u6570\uff0c\u5927\u7684\u8d4b\u503c\u4e3a0\uff0c\u5c0f\u7684\u8d4b\u4e3a1\uff0c\u7136\u540e\u5e76\u884c\u67e5\u770bn\u4e2a\u65700\uff0c1\u60c5\u51b5\uff0c\u662f0\u7684\u5c31\u662f\u6700\u5927\u6570\uff08\u6bd4\u8f83\u5e76\u8d4b\u503c\u8fc7\u7a0b\u53ef\u80fd\u6709\u8bbf\u95ee\u51b2\u7a81\uff09</p> <p></p> <p>\u6cd52\uff1a\\(\\sqrt n\\)\u5206\u5272</p> <p></p> <p>\u6cd53\uff1a\\(loglogn\\)\u5206\u5272</p> <p></p> <p>\u6cd54\uff1a\u89c4\u6a21\\(n^{7/8}\\)\u968f\u673a\u91c7\u6837\uff0c\u7136\u540e\u5148\u6309\\(n^{1/8}\\)\u5927\u5c0f\u5206\u5272\u4e3a\\(n^{3/4}\\)\u5757\uff0c\u6bcf\u5757\u901a\u8fc7\u6cd51\u5e76\u884c\u5f97\u5230\u6700\u5927\u503c\uff0c\u5c31\u6709\u4e86\\(n^{3/4}\\)\u4e2a\u503c\u91cd\u65b0\u6bd4\u8f83\u5927\u5c0f\uff0c\u518d\u5c06\u5b83\u6309\\(n^{1/4}\\)\u5927\u5c0f\u5206\u4e3a\\(n^{1/2}\\)\u5757\uff0c\u6700\u540e\u8fd9\\(n^{1/2}\\)\u5757\u901a\u8fc7\u6cd51\u6bd4\u8f83\u5927\u5c0f\uff0c\\(T(n)=O(1),W(n)=O([n^{1/2}]^2)=O(n)\\)</p> <p></p> <p></p> <p>\u4f46\u662f\u968f\u673a\u7684\\(n^{7/8}\\)\u89c4\u6a21\u6570\u636e\u4e2d\u53ef\u80fd\u4e0d\u5305\u62ec\u6700\u5927\u503c\uff0c\u6240\u4ee5\u8981\u5c06\u5f97\u5230\u7684\u6700\u5927\u503c\u4e0e\u5269\u4e0b\u6240\u6709\u7684\\(n^{1/8}\\)\u4e2a\u6570\u636e\u6309\\(O(1)\\)\u65f6\u95f4\u6bd4\u8f83\u5927\u5c0f\uff0c\u5982\u679c\u6709\u6bd4\u5b83\u5927\u7684\u5219\u5c06\\(n^{1/8}\\)\u4e2a\u6570\u52a0\u5165\u91cd\u65b0\u968f\u673a\u3002</p>"},{"location":"study/datastructure/algorithm/#external-sorting","title":"External sorting","text":""},{"location":"study/datastructure/algorithm/#_46","title":"\u591a\u8def\u5408\u5e76","text":"<p>\u51cf\u5c11\u4e86\u5408\u5e76\u7684\u6b21\u6570\uff0c\u4f46\u662f\u6240\u9700\u78c1\u5e26\u589e\u52a0\uff0ck-way:2k\u4e2a\u78c1\u5e26 \u5de5\u4f5c\uff08\u4e0e\u78c1\u5e26\u4ea4\u4e92\uff09\u8d9f\u6570\uff1a\\(1+\\lceil \\log_k{(N/M)}\\rceil\\)</p>"},{"location":"study/datastructure/algorithm/#_47","title":"\u7f13\u5b58\u5e76\u884c\u5904\u7406","text":"<p>k\u8def\u5408\u5e76\u65f6\uff0c\u9700\u89812k\u4e2a\u78c1\u5e26\uff0c\u4e5f\u9700\u89812k\u4e2a\u8f93\u5165\u7f13\u5b58\u533a\u548c2\u4e2a\u8f93\u51fa\u7f13\u5b58\u533a\u3002</p> <p>\u591a\u8def\u5408\u5e76\u5e76\u4e0d\u662f\u78c1\u5e26\u8d8a\u591a\u8d8a\u597d\uff0ck\u8def\u5408\u5e76\u65f6\u5e94\u5f53\u5c06\u6574\u4e2a\u5185\u5b58\u533a\u57df\u5212\u5206\u6210 2k \u4e2a\u8f93\u5165\u7f13\u5b58\u533a\u5408 2 \u4e2a\u8f93\u51fa\u7f13\u5b58\u533a\uff0c\u8fd9\u6837\u5f53 k \u5f88\u5927\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u8f93\u5165\u7f13\u5b58\u5c31\u4f1a\u88ab\u5212\u5206\u5f97\u5f88\u7ec6\uff0c\u4e00\u6b21\u80fd\u8bfb\u5165\u8f93\u5165\u7f13\u5b58\u7684\u6570\u636e\u91cf\u5c31\u4f1a\u51cf\u5c0f\uff08\u4e5f\u5c31\u662f block \u5927\u5c0f\u964d\u4f4e\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u7684 I/O \u64cd\u4f5c\u5c31\u4f1a\u53d8\u591a\u3002</p>"},{"location":"study/datastructure/algorithm/#polyphase","title":"\u591a\u76f8\u5408\u5e76\uff08Polyphase\uff09","text":"<p>\u4f7f\u6bcf\u4e2a\u78c1\u5e26\u4e0a\u987a\u4e32\u4e2a\u6570\u4e3a\u76f8\u90bb\u7684Fibonacci\u6570\uff0c\u6bd4\u5982\u8bfb\u516534\u4e2a\u987a\u4e32\u53ef\u4ee5\u5c06\u5176\u4e2d13\u4e2a\u8bfb\u5165\u53e6\u4e00\u4e2a\u78c1\u5e26\u8fdb\u884c\u5408\u5e76\u3002</p>"},{"location":"study/datastructure/algorithm/#replacement-selection-","title":"Replacement Selection-\u66ff\u6362\u9009\u62e9","text":"<p>\u4f18\u5316\u987a\u4e32\uff08\u6bcf\u7ec4\u6392\u5e8f\u597d\u7684\u8bb0\u5f55\uff09\u7684\u6784\u9020\uff0c\u4ee5\u5f80\u987a\u4e32\uff1a\u6839\u636e\u5185\u5b58\u5927\u5c0f\u6765\u5b9a\uff0c\u56fa\u5b9a\u6570\u76ee\u5730\u53d6\u3002 \u73b0\u5728\uff1a\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u6bd4\u5f53\u524d\u987a\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u66f4\u5927\u7684\u5143\u7d20\uff0c\u5199\u5165\u78c1\u76d8\uff0c\u7136\u540e\u518d\u4ece\u78c1\u76d8\u4e2d\u8bfb\u5165\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u4e2d\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u7684\u5143\u7d20\u90fd\u6bd4\u987a\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u8981\u5c0f\uff0c\u5c31\u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u987a\u4e32\u3002\u6240\u4ee5\u987a\u4e32\u7684\u957f\u5ea6\u4e0d\u5b9a\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u5408\u5e76\u3002</p> <p>\u4f18\u5316\u987a\u4e32\u5408\u5e76\uff1aHuffman\u6811\uff0c\u6bcf\u6b21\u5408\u5e76\u6700\u77ed\u7684\u4e24\u4e2a\u987a\u4e32\u3002</p>"},{"location":"study/datastructure/graph/","title":"Graph","text":"<p>Overall Introduction</p> <p>The graph is powerful tool to handle many practical problems, especially the routine management ones, like crossing the river. There are may algorithms, both referred to in the data structure course and discrete mathematics courses. The theory and the relative proofs are indeed important, which verifies the validity of these algorithms. However, as for my current situation, I think the most urgent thing is to know how to implement the in code.  </p>"},{"location":"study/datastructure/graph/#dfs-and-its-application","title":"DFS and its application","text":"<p>DFS is used to traverse the graph, each vertex only once, and it will give a spanning tree if we record the edges throughout the whole process.</p> <p>Here is the general code: The graph here is a UDAG(undirected acyclic) and unweighted.</p> <pre><code>void DFS(int G[][], int v, int Nv, int visited[] ){\n    visited[v]=1;\n    for(int i=0; i&lt;Nv; i++){\n        if( G[v][i]&amp;&amp;!visited[i] ){\n            DFS(G, i, Nv, visited);\n        }\n    }\n}\n</code></pre>"},{"location":"study/datastructure/graph/#topological-sort","title":"Topological Sort","text":"<p>The graph is a DAG, unweighted and connected.</p> <pre><code>int top=0;\nvoid DFS(int a[][], int v, int Nv, int visited[], int stack){\n    visited[v]=true;\n    for(int i=0;i&lt;Nv;i++){\n        if(a[v][i]&amp;&amp;!visited[i]){\n            DFS(a, i, Nv, visited);\n        }\n    }\n    stack[top++]=v;\n}\nvoid topologcial_sort(int G[][], int Nv){\n    int stack[Nv];\n    int visited[Nv];\n    for(int i=0;i&lt;Nv;i++){\n        visited[i]=0;\n    }\n    DFS(G, 0, Nv, visited, stack);\n    while(top&gt;-1){\n        printf(\"%d \",stack[top--]);\n    }\n}\n</code></pre>"},{"location":"study/datastructure/graph/#circle-detection","title":"Circle detection","text":""},{"location":"study/datastructure/graph/#strongly-connected-components-computation","title":"Strongly Connected components computation","text":"<p>Tarjan\u7b97\u6cd5\u662f\u7528\u6765\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components, SCC\uff09\u7684\u7ecf\u5178\u7b97\u6cd5\u3002\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u6307\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u6700\u5927\u5b50\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e00\u5bf9\u9876\u70b9\u90fd\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u3002Tarjan\u7b97\u6cd5\u662f\u57fa\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\uff08O(V + E)\uff09\u3002</p>"},{"location":"study/datastructure/graph/#tarjan","title":"Tarjan\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3","text":"<p>Tarjan\u7b97\u6cd5\u4f7f\u7528\u4e00\u4e2a\u6808\u548c\u4e00\u4e9b\u8f85\u52a9\u6570\u7ec4\u6765\u8bb0\u5f55\u9876\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\u3002\u5728DFS\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u9876\u70b9\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u7f16\u53f7\uff08DFS\u7f16\u53f7\uff09\u548c\u4e00\u4e2a\u6700\u4f4e\u53ef\u8fbe\u7f16\u53f7\uff08Low-link\u503c\uff09\u3002\u901a\u8fc7\u8fd9\u4e9b\u7f16\u53f7\uff0c\u53ef\u4ee5\u5224\u65ad\u9876\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p>"},{"location":"study/datastructure/graph/#_1","title":"\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u8bbe\u7f6eDFS\u7f16\u53f7\u3001Low-link\u503c\u7b49\u8f85\u52a9\u6570\u7ec4\uff0c\u5e76\u521d\u59cb\u5316\u6808\u3002</li> <li>DFS\u904d\u5386\uff1a\u5bf9\u6bcf\u4e2a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u6267\u884cDFS\uff0c\u9012\u5f52\u5730\u8bbf\u95ee\u6240\u6709\u53ef\u8fbe\u7684\u9876\u70b9\u3002</li> <li>\u66f4\u65b0Low-link\u503c\uff1a\u5728DFS\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u5f53\u524d\u9876\u70b9\u548c\u5176\u540e\u7ee7\u9876\u70b9\u7684Low-link\u503c\u3002</li> <li>\u8bc6\u522b\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5f53\u53d1\u73b0\u4e00\u4e2a\u9876\u70b9\u7684DFS\u7f16\u53f7\u548cLow-link\u503c\u76f8\u7b49\u65f6\uff0c\u5b83\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff0c\u5c06\u6808\u4e2d\u6240\u6709\u5230\u8fbe\u8be5\u9876\u70b9\u7684\u9876\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/datastructure/graph/#_2","title":"\u4f2a\u4ee3\u7801","text":"<p>\u4e0b\u9762\u662fTarjan\u7b97\u6cd5\u7684\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>// n \u662f\u56fe\u4e2d\u7684\u9876\u70b9\u6570\nindex = 0\nstack = []\nindices = [-1] * n\nlowlink = [0] * n\nonStack = [False] * n\nSCCs = []\n\nfunction strongconnect(v):\n    indices[v] = index\n    lowlink[v] = index\n    index += 1\n    stack.push(v)\n    onStack[v] = True\n\n    // \u8003\u8651 v \u7684\u6bcf\u4e2a\u540e\u7ee7\u9876\u70b9 w\n    for each (v, w) in edges:\n        if indices[w] == -1:\n            // w \u8fd8\u672a\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u8bbf\u95ee\u5b83\n            strongconnect(w)\n            lowlink[v] = min(lowlink[v], lowlink[w])\n        else if onStack[w]:\n            // w \u5728\u6808\u4e2d\uff0c\u662f\u4e00\u4e2a\u56de\u8fb9\n            lowlink[v] = min(lowlink[v], indices[w])\n\n    // \u5982\u679c v \u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\n    if lowlink[v] == indices[v]:\n        SCC = []\n        while True:\n            w = stack.pop()\n            onStack[w] = False\n            SCC.append(w)\n            if w == v:\n                break\n        SCCs.append(SCC)\n\nfor each v in vertices:\n    if indices[v] == -1:\n        strongconnect(v)\n\nreturn SCCs\n</code></pre>"},{"location":"study/datastructure/graph/#c","title":"C\u8bed\u8a00\u5b9e\u73b0","text":"<p>\u4e0b\u9762\u662fTarjan\u7b97\u6cd5\u5728C\u8bed\u8a00\u4e2d\u7684\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAX 100\n\nint index = 0, n;\nint indices[MAX], lowlink[MAX];\nbool onStack[MAX];\nint stack[MAX], stackTop = -1;\nint graph[MAX][MAX];\nint SCC[MAX][MAX], SCCIndex = 0, SCCSizes[MAX];\n\nvoid push(int v) {\n    stack[++stackTop] = v;\n    onStack[v] = true;\n}\n\nint pop() {\n    int v = stack[stackTop--];\n    onStack[v] = false;\n    return v;\n}\n\nvoid strongconnect(int v) {\n    indices[v] = lowlink[v] = index++;\n    push(v);\n\n    for (int w = 0; w &lt; n; w++) {\n        if (graph[v][w]) {\n            if (indices[w] == -1) {\n                strongconnect(w);\n                lowlink[v] = lowlink[v] &lt; lowlink[w] ? lowlink[v] : lowlink[w];\n            } else if (onStack[w]) {\n                lowlink[v] = lowlink[v] &lt; indices[w] ? lowlink[v] : indices[w];\n            }\n        }\n    }\n\n    if (lowlink[v] == indices[v]) {\n        int w;\n        do {\n            w = pop();\n            SCC[SCCIndex][SCCSizes[SCCIndex]++] = w;\n        } while (w != v);\n        SCCIndex++;\n    }\n}\n\nvoid tarjan() {\n    for (int i = 0; i &lt; n; i++) {\n        indices[i] = -1;\n        lowlink[i] = 0;\n        onStack[i] = false;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (indices[i] == -1) {\n            strongconnect(i);\n        }\n    }\n}\n\nint main() {\n    printf(\"Enter the number of vertices: \");\n    scanf(\"%d\", &amp;n);\n\n    printf(\"Enter the adjacency matrix:\\n\");\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            scanf(\"%d\", &amp;graph[i][j]);\n        }\n    }\n\n    tarjan();\n\n    printf(\"Strongly Connected Components:\\n\");\n    for (int i = 0; i &lt; SCCIndex; i++) {\n        printf(\"SCC %d: \", i + 1);\n        for (int j = 0; j &lt; SCCSizes[i]; j++) {\n            printf(\"%d \", SCC[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/datastructure/graph/#_3","title":"\u89e3\u91ca","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u8bbe\u7f6eDFS\u7f16\u53f7\u6570\u7ec4<code>indices</code>\u548cLow-link\u503c\u6570\u7ec4<code>lowlink</code>\uff0c\u521d\u59cb\u5316\u6808\u548c\u76f8\u5173\u6807\u8bb0\u3002</li> <li>\u9012\u5f52\u51fd\u6570 <code>strongconnect</code>\uff1a\u6267\u884cDFS\uff0c\u66f4\u65b0Low-link\u503c\uff0c\u5e76\u5728\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u5c06\u6808\u4e2d\u76f8\u5173\u9876\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> <li>\u4e3b\u51fd\u6570 <code>tarjan</code>\uff1a\u5bf9\u6bcf\u4e2a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u8c03\u7528\u9012\u5f52\u51fd\u6570<code>strongconnect</code>\u3002</li> <li>\u8f93\u5165\u8f93\u51fa\uff1a\u5728<code>main</code>\u51fd\u6570\u4e2d\u8bfb\u53d6\u9876\u70b9\u6570\u91cf\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u8c03\u7528<code>tarjan</code>\u7b97\u6cd5\uff0c\u8f93\u51fa\u627e\u5230\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol> <p>Kosaraju-Sharir\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components, SCC\uff09\u7684\u7ecf\u5178\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u57fa\u4e8e\u4e24\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(V + E)\uff0c\u5176\u4e2dV\u662f\u9876\u70b9\u6570\uff0cE\u662f\u8fb9\u6570\u3002</p>"},{"location":"study/datastructure/graph/#kosaraju-sharir","title":"Kosaraju-Sharir\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u53cd\u8f6c\u56fe\uff1a\u9996\u5148\u53cd\u8f6c\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u3002</li> <li>\u7b2c\u4e00\u6b21DFS\uff1a\u5bf9\u539f\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5b8c\u6210\u65f6\u95f4\u3002</li> <li>\u7b2c\u4e8c\u6b21DFS\uff1a\u6309\u7167\u7b2c\u4e00\u6b21DFS\u7684\u5b8c\u6210\u65f6\u95f4\u7684\u9006\u5e8f\u5bf9\u53cd\u8f6c\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u5230\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/datastructure/graph/#_4","title":"\u7b97\u6cd5\u4f2a\u4ee3\u7801","text":"<pre><code>function kosarajuSharir(G):\n    let G_rev be the reverse of graph G\n    let S be an empty stack\n    let visited be a map from node to boolean\n\n    // First DFS: Record the finish time of each node\n    function dfs1(v):\n        visited[v] = true\n        for each neighbor w of v in G:\n            if not visited[w]:\n                dfs1(w)\n        S.push(v)\n\n    // Second DFS: Collect nodes in the same SCC\n    function dfs2(v, component):\n        visited[v] = true\n        component.add(v)\n        for each neighbor w of v in G_rev:\n            if not visited[w]:\n                dfs2(w, component)\n\n    // Initialize the visited map and run the first DFS\n    for each vertex v in G:\n        visited[v] = false\n    for each vertex v in G:\n        if not visited[v]:\n            dfs1(v)\n\n    // Reinitialize the visited map for the second DFS\n    for each vertex v in G:\n        visited[v] = false\n\n    // Process all nodes in the order defined by the stack S\n    let SCCs be an empty list of components\n    while S is not empty:\n        v = S.pop()\n        if not visited[v]:\n            let component be an empty list\n            dfs2(v, component)\n            SCCs.append(component)\n\n    return SCCs\n</code></pre>"},{"location":"study/datastructure/graph/#c_1","title":"C\u8bed\u8a00\u5b9e\u73b0","text":"<p>\u4ee5\u4e0b\u662fKosaraju-Sharir\u7b97\u6cd5\u7684C\u8bed\u8a00\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAX 100\n\nint graph[MAX][MAX];\nint graph_rev[MAX][MAX];\nbool visited[MAX];\nint stack[MAX];\nint stackTop = -1;\nint SCC[MAX][MAX], SCCIndex = 0, SCCSizes[MAX];\nint n;\n\nvoid push(int v) {\n    stack[++stackTop] = v;\n}\n\nint pop() {\n    return stack[stackTop--];\n}\n\nvoid dfs1(int v) {\n    visited[v] = true;\n    for (int w = 0; w &lt; n; w++) {\n        if (graph[v][w] &amp;&amp; !visited[w]) {\n            dfs1(w);\n        }\n    }\n    push(v);\n}\n\nvoid dfs2(int v) {\n    visited[v] = true;\n    SCC[SCCIndex][SCCSizes[SCCIndex]++] = v;\n    for (int w = 0; w &lt; n; w++) {\n        if (graph_rev[v][w] &amp;&amp; !visited[w]) {\n            dfs2(w);\n        }\n    }\n}\n\nvoid kosarajuSharir() {\n    // Step 1: Run DFS on the original graph to fill the stack\n    for (int i = 0; i &lt; n; i++) {\n        visited[i] = false;\n    }\n    for (int i = 0; i &lt; n; i++) {\n        if (!visited[i]) {\n            dfs1(i);\n        }\n    }\n\n    // Step 2: Reverse the graph\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            graph_rev[i][j] = graph[j][i];\n        }\n    }\n\n    // Step 3: Run DFS on the reversed graph in the order defined by the stack\n    for (int i = 0; i &lt; n; i++) {\n        visited[i] = false;\n    }\n    while (stackTop != -1) {\n        int v = pop();\n        if (!visited[v]) {\n            SCCSizes[SCCIndex] = 0;\n            dfs2(v);\n            SCCIndex++;\n        }\n    }\n}\n\nint main() {\n    printf(\"Enter the number of vertices: \");\n    scanf(\"%d\", &amp;n);\n\n    printf(\"Enter the adjacency matrix:\\n\");\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            scanf(\"%d\", &amp;graph[i][j]);\n        }\n    }\n\n    kosarajuSharir();\n\n    printf(\"Strongly Connected Components:\\n\");\n    for (int i = 0; i &lt; SCCIndex; i++) {\n        printf(\"SCC %d: \", i + 1);\n        for (int j = 0; j &lt; SCCSizes[i]; j++) {\n            printf(\"%d \", SCC[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/datastructure/graph/#_5","title":"\u89e3\u91ca","text":"<ol> <li>\u521d\u59cb\u5316\u548c\u8f93\u5165\uff1a\u8bfb\u53d6\u9876\u70b9\u6570\u91cf\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u521d\u59cb\u5316\u76f8\u5173\u6570\u7ec4\u548c\u53d8\u91cf\u3002</li> <li>\u7b2c\u4e00\u6b21DFS\uff1a\u5bf9\u539f\u56fe\u6267\u884cDFS\uff0c\u6309\u7167\u5b8c\u6210\u65f6\u95f4\u5c06\u9876\u70b9\u538b\u5165\u6808\u4e2d\u3002</li> <li>\u56fe\u53cd\u8f6c\uff1a\u751f\u6210\u53cd\u8f6c\u56fe\uff0c\u5c06\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\u65b9\u5411\u53cd\u8f6c\u3002</li> <li>\u7b2c\u4e8c\u6b21DFS\uff1a\u6309\u7167\u7b2c\u4e00\u6b21DFS\u7684\u5b8c\u6210\u65f6\u95f4\u7684\u9006\u5e8f\u5bf9\u53cd\u8f6c\u56fe\u6267\u884cDFS\uff0c\u627e\u5230\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> <li>\u8f93\u51fa\u7ed3\u679c\uff1a\u8f93\u51fa\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/datastructure/midterm/","title":"Review of midterm exam","text":"<p>No reflection, no progress.</p>"},{"location":"study/datastructure/midterm/#datastructure","title":"Datastructure","text":""},{"location":"study/datastructure/midterm/#avl-tree","title":"AVL Tree","text":"<p>\u5e73\u8861\u56e0\u5b50\uff1a$ BF=|h(T\\rightarrow l)-h(T\\rightarrow r)|&lt;2 $</p> <p>\u9ad8\u5ea6\u4e3ah\u7684AVL\u6811\u6700\u5c0f\u8282\u70b9\u6570\u5173\u4e8eh\u6210Fib\u6570\u5217\uff1a</p> <p>$ N(h) = N(h-1)+N(h-2)+1 ,N(0)=1,N(1)=2$</p> 0 1 2 3 4 1 2 3 5 8"},{"location":"study/datastructure/midterm/#splay-tree","title":"Splay Tree","text":"<p>\u5220\u9664\uff1a\u5148\u5c06\u8981\u5220\u9664\u7684\u8282\u70b9splay\u5230\u6839\u8282\u70b9\uff0c\u5220\u9664\u7136\u540e\u627e\u63a5\u66ff\u8282\u70b9\uff0c\u5c06\u63a5\u66ff\u8282\u70b9splay\u5230\u6839\u8282\u70b9\u3002</p>"},{"location":"study/datastructure/midterm/#amortized-analysis","title":"Amortized analysis","text":""},{"location":"study/datastructure/midterm/#aggregate","title":"Aggregate","text":""},{"location":"study/datastructure/midterm/#credit","title":"Credit","text":""},{"location":"study/datastructure/midterm/#potential-function","title":"Potential function","text":""},{"location":"study/datastructure/midterm/#b","title":"B+","text":""},{"location":"study/datastructure/midterm/#_1","title":"\u5b9a\u4e49","text":"<p>A B+ tree of order M is a tree with the following structural properties: (1)  The root is either a leaf or has between 2 and M children. (2)  All nonleaf nodes (except the root) have between \\(\\lceil M/2\\rceil\\) and M children. (3)  All leaves are at the same depth. Assume each nonroot leaf also has between \\(\\lceil M/2 \\rceil\\) and M keys</p> <p></p> <p></p>"},{"location":"study/datastructure/midterm/#_2","title":"\u6027\u8d28","text":"<p>\u8bbe\u5e8f\u4e3aB\u7684B+\u6811\u6709N\u4e2a\u4e0d\u540c\u5143\u7d20\uff1a</p>"},{"location":"study/datastructure/midterm/#_3","title":"\u64cd\u4f5c","text":"<ol> <li> <p>findkey: \\(O(Blog_BN)\\)\u8282\u70b9\u5185\u4e8c\u5206\u67e5\u627e-&gt;\\(O(log_2B\\cdot log_BN)=O(log_2N)\\)</p> </li> <li> <p>insert: \u53f6\u5b50\u8d85\u6807\uff08\u591a\u4e8eB,\u4e5f\u5c31\u662fB+1\uff09\u5219\u5206\u88c2\u4e3a\\(1\u5230\\lceil B/2 \\rceil\\)\u548c\\(\\lceil B/2 \\rceil+1\u5230B+1\\)\u4e24\u90e8\u5206 \\(O(Blog_BN)\\)</p> </li> <li> <p>delete:</p> <ul> <li>\u82e5\u5f85\u5220\u9664\u952e\u503c\u6240\u5904\u8282\u70b9\u5185\u7684\u952e\u503c\u6570\u76ee\u591a\u4f59 \\(\\lceil B/2 \\rceil\\)\uff0c\u76f4\u63a5\u5220\u6389</li> <li>\u82e5\u5f85\u5220\u9664\u952e\u503c\u6240\u5904\u8282\u70b9\u5185\u7684\u952e\u503c\u6570\u76ee\u4e0d\u8d85\u8fc7 $ \\lceil B/2 \\rceil\\(\uff0c\u4e14\u76f8\u90bb\uff08\u5de6\u53f3\uff09\u8282\u70b9\u5185\u952e\u503c\u8d85\u8fc7\\)\\lceil B/2 \\rceil$\uff0c\u5219\u76f4\u63a5\u4ece\u5b83\u62ff\u4e00\u4e2a</li> <li>\u82e5\u5220\u9664\u952e\u503c\u6240\u5904\u7684\u8282\u70b9\u5185\u952e\u503c\u6570\u76ee\u4e0d\u8d85\u8fc7\\(\\lceil B/2 \\rceil\\)\uff0c\u4e14\u76f8\u90bb\u8282\u70b9\u5185\u952e\u503c\u4e0d\u8d85\u8fc7\\(\\lceil B/2 \\rceil\\)\uff0c\u5219\u5408\u5e76\u4e24\u8282\u70b9\uff1a\\(\\lceil B/2 \\rceil-1 + \\lceil B/2\\rceil+ 1\\leq B\\) \\(O(Blog_BN)\\)</li> </ul> </li> </ol>"},{"location":"study/datastructure/midterm/#red-and-black-tree","title":"Red and black tree","text":""},{"location":"study/datastructure/midterm/#_4","title":"\u5b9a\u4e49","text":"<p>\u4e00\u68f5\u7ea2\u9ed1\u6811\u662f\u6ee1\u8db3\u4e0b\u9762\u6027\u8d28\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a</p> <ol> <li>\u6bcf\u4e2a\u7ed3\u70b9\u6216\u8005\u662f\u7ea2\u8272\u7684\uff0c\u6216\u8005\u662f\u9ed1\u8272\u7684\uff1b</li> <li>\u6839\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\uff1b</li> <li>\u6bcf\u4e2a\u53f6\u7ed3\u70b9\uff08NIL\uff09\u662f\u9ed1\u8272\u7684\uff1b</li> <li>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u90fd\u662f\u9ed1\u8272\u7684\uff1b</li> <li> <p>\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u5176\u6240\u6709</p> </li> <li> <p>\u5b9a\u4e491\uff1a\u79f0 NIL \u4e3a\u5916\u90e8\u7ed3\u70b9\uff0c\u5176\u4f59\u6709\u952e\u503c\u7684\u7ed3\u70b9\u4e3a\u5185\u90e8\u7ed3\u70b9\u3002</p> </li> <li> <p>\u5b9a\u4e492\uff1a\u4ece\u67d0\u4e2a\u7ed3\u70b9 X \u51fa\u53d1\u5230\u8fbe\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff08NIL\uff09\u7684\u4efb\u610f\u4e00\u6761\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u4e2a\u6570\uff08\u4e0d\u542b X \u672c\u8eab\uff09\u79f0\u4e3a X \u7684\u9ed1\u9ad8\uff0c\u8bb0\u4e3a bh(X)\u3002\u6839\u636e\u5b9a\u4e49\u7b2c\u4e94\u6761\uff0c\u8fd9\u4e00\u5b9a\u4e49\u662f\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u4ece X \u51fa\u53d1\u51fa\u53d1 \u5230\u8fbe\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u4efb\u610f\u4e00\u6761\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u4e2a\u6570\u76f8\u540c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u5b9a\u4e49\u6574\u68f5\u7ea2\u9ed1\u6811 \u7684\u9ed1\u9ad8\u4e3a\u5176\u6839\u7ed3\u70b9\u7684\u9ed1\u9ad8\u3002</p> </li> <li> <p>\u6027\u8d28\uff1a\u4e00\u68f5\u6709 n \u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u9ad8\u5ea6\u81f3\u591a\u4e3a 2 log(n + 1)</p> </li> </ol>"},{"location":"study/datastructure/midterm/#_5","title":"\u63d2\u5165","text":"<p>\u6211\u4eec\u89c4\u5b9a\u63d2\u5165\u7684\u8282\u70b9\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\uff08\u7ea2\u9ed1\u5bf9\u6570\u636e\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u53ea\u662f\u7ef4\u6301\u5e73\u8861\u7684\u4e00\u79cd\u65b9\u5f0f\uff09\u3002</p> <p>\u4e00\u5171\u56db\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u7236\u8282\u70b9\u662f\u9ed1\u8272\u76f4\u63a5\u63d2\u5165</li> <li>\u7236\u3001\u53d4\u53d4\u4e3a\u7ea2\uff1a\u628a\u5b83\u4eec\u53d8\u9ed1\uff0c\u7956\u7236\u53d8\u7ea2\uff0c\u5373\u628a\u7ea2\u8272\u4e0a\u63a8\u7ed9\u4e0a\u9762\u8282\u70b9\uff0c\u8ba9\u5b83\u4eec\u6765\u89e3\u51b3 </li> <li>\u53d4\u9ed1\uff0c\u63d2\u5165\u4e3a\u53f3\u5b69\u5b50\uff1a</li> <li>\u53d4\u9ed1\uff0c\u63d2\u5165\u4e3a\u5de6\u5b69\u5b50\uff1a </li> </ul>"},{"location":"study/datastructure/midterm/#_6","title":"\u5220\u9664","text":""},{"location":"study/datastructure/midterm/#leftist-heap","title":"Leftist Heap","text":"<p>\u5de6\u5f0f\u5806\u4ecd\u7136\u6ee1\u8db3\u5806\u5e8f\u8981\u6c42\uff0c\u8fd9\u91cc\u4ee5\u6700\u5c0f\u5806\u4e3a\u4f8b\uff1a\u6bcf\u4e2a\u8282\u70b9\u7236\u8282\u70b9\u90fd\u6bd4\u5b83\u81ea\u5df1\u5927\u3002</p> <ul> <li>leftist property: $ npl(u\\rightarrow r)\\leq npl(n\\rightarrow l), npl(null)=-1 $ \u4e00\u822c\u7684binary heap\uff08\u4e8c\u53c9\u5806\uff09\u5929\u7136\u6ee1\u8db3\u5de6\u5f0f\u6027\u8d28\uff0c\u6240\u4ee5\u662f\u5de6\u5f0f\u5806\u3002</li> <li>Lemma: \u5171\u6709 N \u4e2a\u7ed3\u70b9\u7684\u5de6\u5f0f\u5806\u7684\u53f3\u8def\u5f84\u6700\u591a\u542b\u6709$log(N + 1) $ \u4e2a\u7ed3\u70b9\u3002</li> </ul>"},{"location":"study/datastructure/midterm/#_7","title":"\u57fa\u672c\u64cd\u4f5c","text":"<ul> <li>Merge: $ O(logN) $ \u5408\u5e76\u53ef\u4ee5\u627e\u4e24\u4e2a\u5806\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\u7136\u540e\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u4e5f\u53ef\u4ee5\u8ba9H1\u603b\u662f\u8f83\u5c0f\u7684\u90a3\u4e2a\uff08\u5f53\u5b83\u8f83\u5927\u65f6\u5c31\u4ea4\u6362H1\uff0cH2\uff09</li> </ul> <pre><code>Merge(Lheap H1, H2):\n    if(H1==NULL||H2==NULL){\n        return Notnull(H1, H2)\n    }else if(H1-&gt;val &lt; H2-&gt;val){\n        H1-&gt;r = Merge(H1-&gt;r, H2)\n        if( npl(H-&gt;r) &gt; npl(H-&gt;l) ){\n            swap(H-&gt;r, H-&gt;l)\n        }\n            npl_update(H1)\n            return H1\n    }else{\n        H2-&gt;r = Merge(H1, H2-&gt;r)\n        if( npl(H2-&gt;r) &gt; npl(H2-&gt;l) ){\n            swap(H2-&gt;r, H2-&gt;l)\n            npl_update(H2)\n            return H2\n        }\n    }\n</code></pre> <ul> <li>insert: $ O(logN) $</li> <li>deletemin: $ O(logN) $</li> <li>delete: $O (logN) $</li> </ul>"},{"location":"study/datastructure/midterm/#skew-heap","title":"Skew heap","text":"<p>\u5b83\u662f\u5de6\u5f0f\u5806\u7684\u81ea\u8c03\u6574\u7248\u672c\uff0c\u4e0d\u652f\u6301delete\uff0cdecreasekey \u533a\u522b\u5728\u4e8e\u5408\u5e76\u90e8\u5206: base case: \u5f53\u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u5806\uff08\u6211\u4eec\u8fd9\u91cc\u4e0d\u8fd9\u6837\uff09\uff0c\u800c\u662f\u5c06\u53e6\u4e00\u4e2a\u5806\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u4ea4\u6362\uff08\u9664\u4e86\u6700\u5927\u8282\u70b9\uff0c\u5b83\u6ca1\u6709\u5b50\u8282\u70b9\uff09\u3002 other: H1-&gt;r = Merge(H1-&gt;r, H2) Swap(H1-&gt;r, H1-&gt;l)\u603b\u662f\u5c06\u5408\u5e76\u597d\u7684\u53f3\u5b50\u6811\u4ea4\u6362\u5230\u5de6\u5b50\u6811\u4e0a\u3002</p> <p>Df: \u5b9a\u4e49\u5806\u4e2d\u8282\u70b9\u7684\u8f7b\u91cd\uff1a \u91cd\uff1a\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570 \u8f7b\uff1a\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u5c0f\u4e8e\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570</p> <p>\u4f8b\uff1aWhen merging two skew heaps H1 and H2, the number of light nodes along the right path of the resulting heap is not less than the sum of the number of heavy nodes along the right path of H1 and that of H2 [x]</p>"},{"location":"study/datastructure/midterm/#_8","title":"\u5747\u644a\u5206\u6790","text":"<p>Lemma:\u5bf9\u4e8e\u53f3\u8def\u5f84\u4e0a\u6709 \\(l\\) \u4e2a\u8f7b\u7ed3\u70b9\u7684\u659c\u5806\uff0c\u6574\u4e2a\u659c\u5806\u81f3\u5c11\u6709 $2^l-1 $ \u4e2a\u7ed3\u70b9\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e2an \u4e2a\u7ed3\u70b9\u7684\u659c\u5806\u53f3\u8def\u5f84\u4e0a\u7684\u8f7b\u7ed3\u70b9\u4e2a\u6570\u4e3a$ O(log n) $\u3002 Theorem: \u82e5\u6211\u4eec\u6709\u4e24\u4e2a\u659c\u5806H1 \u548cH2\uff0c\u5b83\u4eec\u5206\u522b\u6709n1 \u548cn2 \u4e2a\u7ed3\u70b9\uff0c\u5219\u5408\u5e76H1 \u548cH2 \u7684\u644a\u8fd8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log n)\uff0c\u5176\u4e2dn = n1 + n2\u3002</p>"},{"location":"study/datastructure/midterm/#binomial-heap","title":"Binomial heap","text":"<p>\u4e8c\u9879\u5806\u7684\u5f15\u5165\u6765\u6e90\u4e8e\u6211\u4eec\u5e0c\u671b\u63d2\u5165\u5efa\u5806\u7684\u64cd\u4f5c\u6709\u5e38\u6570\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u8fd9\u4e00\u60f3\u6cd5\u6765\u6e90\u4e8e\u4e8c\u53c9\u5806\u53ef\u4ee5\u5728O(n)\u65f6\u95f4\u5185\u5b9e\u73b0n \u4e2a\u7ed3\u70b9\u7684\u63d2\u5165\u5efa\u5806\u64cd\u4f5c\uff0c\u800c\u4e4b\u524d\u8ba8\u8bba\u7684\u5de6\u5f0f\u5806\u548c\u659c\u5806\u4e0d\u53ef\u4ee5\u3002\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u5728\u4fdd\u6301\u5408\u5e76\u7684\u5bf9\u6570\u65f6\u95f4\u7684\u6761\u4ef6\u4e0b\u4f18\u5316\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"study/datastructure/midterm/#_9","title":"\u5b9a\u4e49","text":"<ol> <li> <p>\u7ed3\u6784\u6027\u8d28\uff1a</p> <ul> <li>a. \u4e8c\u9879\u5806\u662f\u7531\u591a\u68f5\u4e8c\u9879\u6811\u6784\u6210\u7684\u68ee\u6797</li> <li>b. \u4e8c\u9879\u5806\u4e2d\u6bcf\u68f5\u4e8c\u9879\u6811\u90fd\u6709\u4e0d\u540c\u9ad8\u5ea6,\\(0,1,2,...,\\lceil log_2(n+1)\\rceil-1\\)\uff0cn\u4e3a\u6240\u6709\u8282\u70b9\u4e2a\u6570</li> <li>c. \u9ad8\u5ea6\u4e3a0 \u7684\u4e8c\u9879\u6811\u662f\u4e00\u68f5\u5355\u8282\u70b9\u6811\uff1b\u9ad8\u5ea6\u4e3ak \u7684\u4e8c\u9879\u6811 \\(B_k\\) \u901a\u8fc7\u5c06\u4e00\u68f5\u4e8c\u9879\u6811\\(B_{k\u22121}\\) \u9644\u63a5\u5230\u53e6\u4e00\u68f5\u4e8c\u9879\u6811$ B_{k\u22121} $\u7684\u6839\u4e0a\u800c\u6784\u6210\u3002</li> </ul> </li> <li> <p>\u5e8f\u6027\u8d28\uff1a\u6bcf\u68f5\u4e8c\u9879\u6570\u90fd\u4fdd\u6301\u5806\u5e8f\u6027\u3002</p> </li> </ol> <p>\u793a\u610f\u56fe\uff1a</p> <p></p>"},{"location":"study/datastructure/midterm/#_10","title":"\u6027\u8d28","text":"<ul> <li>1.\u9ad8\u5ea6\u4e3ah\u7684\u4e8c\u9879\u6811\u8282\u70b9\u6570\u4e3a $2^{h} $\u3002\u5355\u8282\u70b9\u9ad8\u5ea6\u5b9a\u4e49\u4e3a0\uff1b</li> <li>2.\u9ad8\u5ea6\u4e3ah\u7684\u4e8c\u9879\u6811\u5728\u6df1\u5ea6\u4e3ad\u7684\u8282\u70b9\u6570\u4e3a $ \\binom{h}{d} \\(,\u6570\u5b66\u5f52\u7eb3\u6cd5\uff1a\\) \\binom{h}{d}+\\binom{h}{d-1}=\\binom{h+1}{d} $</li> <li>\u7531\u6027\u8d281\u53ca\u4e8c\u9879\u5806\u7684\u5b9a\u4e49b\u77e5\uff0c\u82e5\u4e00\u4e2a\u4e8c\u9879\u5806\u6709n\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48n\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5c31\u53ef\u4ee5\u8bf4\u660e\u8fd9\u4e2a\u4e8c\u9879\u5806\u91cc\u4e8c\u9879\u6811\u7684\u5206\u5e03\u60c5\u51b5\u3002</li> </ul>"},{"location":"study/datastructure/midterm/#_11","title":"\u64cd\u4f5c","text":"<ol> <li>FindMin: \u82e5\u8bb0\u5f55\u6700\u5c0f\u503c\\(O(1)\\)\uff0c\u5426\u5219\u904d\\(O(log_2n)\\)\u68f5\u6811\u7684\u6839\u8282\u70b9\uff08\u8fd9\u91cc\u7528\u6700\u5c0f\u5806\u5e8f\uff09\u3002</li> <li>Merge: \u6574\u4f53\u7ed3\u679c\u53ef\u7531\u4e8c\u9879\u5806\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u76f8\u52a0\u5f97\u5230\uff0c\\(O(logn)\\)</li> <li>DeleteMin: \\(O(logn)\\)\u627e\u5230\u6700\u5c0f\u503c\uff0c\\(O(1)\\)\u5220\u9664\uff0c\u5220\u9664\u540e\u5f97\u5230\u82e5\u5e72\u9ad8\u5ea6\u4e0d\u540c\u7684\u5b50\u6811\uff0c\\(O(logn)\\)\u5408\u5e76</li> <li>Insert: \u7b49\u540c\u4e8e\u5408\u5e76\uff0c\u6700\u574f\\(O(logn)\\)(\u5982\u4e8c\u8fdb\u52361+111\u6bcf\u6b21\u90fd\u8fdb\u4f4d)\uff0c\u5747\u644a\\(O(1)\\)</li> </ol>"},{"location":"study/datastructure/midterm/#_12","title":"\u5b9e\u73b0","text":"<p>Leftchild, next-sibling\u8868\u793a\u4e8c\u9879\u6811\uff0c\u5c06\u4e0d\u540c\u9ad8\u5ea6\u7684\u4e8c\u9879\u6811\u7684\u6839\u8282\u70b9\u50a8\u5b58\u5728\u6570\u7ec4\u4e2d\uff0c\u6570\u7ec4\u7d22\u5f15\u5bf9\u5e94\u9ad8\u5ea6\u3002</p> <pre><code>typedef struct BinNode *Position;\ntypedef struct Collection *BinQueue;\ntypedef struct BinNode *BinTree;  /* missing from p.176 */\nstruct BinNode \n{ \n    ElementType  Element;\n    Position    LeftChild;\n    Position    NextSibling;\n};\nstruct Collection \n{ \n    int CurrentSize;  /* total number of nodes */\n    BinTree TheTrees[ MaxTrees ];\n};\n\nBinTree\nCombineTrees( BinTree T1, BinTree T2 )\n{  /* merge equal-sized T1 and T2 */\n    if ( T1-&gt;Element &gt; T2-&gt;Element )\n        /* attach the larger one to the smaller one */\n        return CombineTrees( T2, T1 );\n    /* insert T2 to the front of the children list of T1 */\n    T2-&gt;NextSibling = T1-&gt;LeftChild;\n    T1-&gt;LeftChild = T2;\n    return T1;\n}\n\nBinQueue  Merge( BinQueue H1, BinQueue H2 )\n{   BinTree T1, T2, Carry = NULL;\n    int i, j;\n    if ( H1-&gt;CurrentSize + H2-&gt; CurrentSize &gt; Capacity )  ErrorMessage();\n    H1-&gt;CurrentSize += H2-&gt; CurrentSize;\n    for ( i=0, j=1; j&lt;= H1-&gt;CurrentSize; i++, j*=2 ) {\n        T1 = H1-&gt;TheTrees[i]; T2 = H2-&gt;TheTrees[i]; /*current trees */\n        switch( 4*!!Carry + 2*!!T2 + !!T1 ) { \n        case 0: /* 000 */\n        case 1: /* 001 */  break;\n        case 2: /* 010 */  H1-&gt;TheTrees[i] = T2; H2-&gt;TheTrees[i] = NULL; break;\n        case 4: /* 100 */  H1-&gt;TheTrees[i] = Carry; Carry = NULL; break;\n        case 3: /* 011 */  Carry = CombineTrees( T1, T2 );\n                        H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL; break;\n        case 5: /* 101 */  Carry = CombineTrees( T1, Carry );\n                        H1-&gt;TheTrees[i] = NULL; break;\n        case 6: /* 110 */  Carry = CombineTrees( T2, Carry );\n                        H2-&gt;TheTrees[i] = NULL; break;\n        case 7: /* 111 */  H1-&gt;TheTrees[i] = Carry; \n                        Carry = CombineTrees( T1, T2 ); \n                        H2-&gt;TheTrees[i] = NULL; break;\n        } /* end switch */\n    } /* end for-loop */\n    return H1;\n}\n\nElementType  DeleteMin( BinQueue H )\n{   BinQueue DeletedQueue; \n    Position DeletedTree, OldRoot;\n    ElementType MinItem = Infinity;  /* the minimum item to be returned */\n    int i, j, MinTree; /* MinTree is the index of the tree with the minimum item */\n\n    if ( IsEmpty( H ) )  {  PrintErrorMessage();  return \u2013Infinity; }\n\n    for ( i = 0; i &lt; MaxTrees; i++) {  /* Step 1: find the minimum item */\n        if( H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem ) { \n        MinItem = H-&gt;TheTrees[i]-&gt;Element;  MinTree = i;    } /* end if */\n    }/* end for-i-loop */\n    DeletedTree = H-&gt;TheTrees[ MinTree ];  \n    H-&gt;TheTrees[ MinTree ] = NULL;   /* Step 2: remove the MinTree from H =&gt; H\u2019 */ \n    OldRoot = DeletedTree;   /* Step 3.1: remove the root */ \n    DeletedTree = DeletedTree-&gt;LeftChild;   free(OldRoot);\n    DeletedQueue = Initialize();   /* Step 3.2: create H\u201d */ \n    DeletedQueue-&gt;CurrentSize = ( 1&lt;&lt;MinTree ) \u2013 1;  /* 2MinTree \u2013 1 */\n    for ( j = MinTree \u2013 1; j &gt;= 0; j \u2013 \u2013 ) {  \n        DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    } /* end for-j-loop */\n    H-&gt;CurrentSize  \u2013 = DeletedQueue-&gt;CurrentSize + 1;\n    H = Merge( H, DeletedQueue ); /* Step 4: merge H\u2019 and H\u201d */ \n    return MinItem;\n}\n</code></pre>"},{"location":"study/datastructure/midterm/#fib-heap","title":"Fib heap","text":""},{"location":"study/datastructure/midterm/#_13","title":"\u5404\u79cd\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"study/datastructure/midterm/#reversed-index","title":"Reversed index(\u5012\u6392\u7d22\u5f15)","text":"relevant irrelevant retrieved a b not retrieved c d <p>Precision: $ \\frac{a}{a+b}$ Recall: $ \\frac{a}{a+c}$</p> <p>\u4ec0\u4e48\u662f\u5012\u6392\u7d22\u5f15\uff1a\u5c06\u8bcdterm\u6620\u5c04\u5230\u8bcd\u6240\u51fa\u73b0\u7684\u6587\u7ae0\u3002 For each term in the index, there is an associated list of documents (often called a posting list) where that term appears. This structure allows for efficient exact match queries (e.g., \"Find all documents containing 'term1'\").</p>"},{"location":"study/datastructure/practice/","title":"problems","text":""},{"location":"study/datastructure/practice/#_1","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"study/datastructure/practice/#_2","title":"\u6811","text":"<p>For an AVL tree, the balance factors of all the non-leaf nodes are 0 iff the tree is a complete binary tree. [F] perfect</p>"},{"location":"study/datastructure/practice/#_3","title":"\u5806","text":"<p>For a binomial queue, delete-min takes a constant time on average.[F]</p> <p>amortized cost O(1)</p> <p>For a skew heap with N nodes, the worst-case running time of all operations (insert/delete min/merge) is O(N) [T]</p> <p>Skew heaps have O(logN) worst-case cost for merging [F]</p> <p>worse:O(n)\u4e24\u68f5\u659c\u6811\u5408\u5e76</p> <p>Recall that the worst-case time complexities of insertions and deletions in a heap of size N are both O(logN). Then, without changing the data structure, the amortized time complexity of insertions in a heap is also O(logN), and that of deletions is O(1). [T]</p> <p>Insert { 1, 2, 5, 3, 8, 4, -1, 10, 128, 34, 15, 63, 18, -24, 186 } into an initially empty binomial queue, the resulting roots are 186, -24, 15 and -1. [T]</p> <p>8+4+2+1 1 2 5 3 8 4 -1 10|128 34 15 63|18 -24|186</p>"},{"location":"study/datastructure/practice/#amortized-analysis","title":"amortized analysis","text":"<p>Recall the amortized analysis for Splay Tree and Leftist Heap, from which we can conclude that the amortized cost (time) is never less than the average cost (time). [T]</p>"},{"location":"study/datastructure/practice/#inverted-index","title":"Inverted index","text":"<p>While accessing a term by hashing in an inverted file index, range searches are expensive. [T]</p> <p>\u8303\u56f4\u641c\u7d22\u6bd4\u5982\u627e\u51fa\"apple\"\u548c\"banana\"\u95f4\u6240\u6709\u5355\u8bcd\u5bf9\u5e94\u6587\u7ae0\uff0c\u54c8\u5e0c\u8868\u53ea\u80fd\u9010\u4e2a\u5355\u8bcd\u67e5\u8be2\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u8868\u793a\u8303\u56f4\u7684\u6982\u5ff5\uff0c\u5b83\u7684\u5355\u8bcd\u662f\u65e0\u5e8f\u5b58\u50a8\u7684\uff0c\u53ea\u662f\u5bf9\u67d0\u4e2a\u8bcd\u7684O(1)\u5feb\u901f\u8bbf\u95ee\u3002</p>"},{"location":"study/datastructure/practice/#_4","title":"\u7b97\u6cd5","text":""},{"location":"study/datastructure/practice/#external-sort","title":"external sort","text":"<p>To merge 55 runs using 3 tapes for a 2-way merge, the original distribution (34, 21) is better than (27, 28). [T]</p> <p>\u8ba9run\u7684\u5927\u5c0f\u4e3aFibonacci\u6570</p> <p>In external sorting, a k-way merging is usually used in order to reduce the number of passes and we will take the k as large as possible as long as we have enough amount of tapes. [F]</p> <p>\u5e76\u4e0d\u662f\u78c1\u5e26\u8d8a\u591a\u8d8a\u597d\uff0ck\u8def\u5408\u5e76\u65f6\u5e94\u5f53\u5c06\u6574\u4e2a\u5185\u5b58\u533a\u57df\u5212\u5206\u6210 2k \u4e2a\u8f93\u5165\u7f13\u5b58\u533a\u5408 2 \u4e2a\u8f93\u51fa\u7f13\u5b58\u533a\uff0c\u8fd9\u6837\u5f53 k \u5f88\u5927\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u8f93\u5165\u7f13\u5b58\u5c31\u4f1a\u88ab\u5212\u5206\u5f97\u5f88\u7ec6\uff0c\u4e00\u6b21\u80fd\u8bfb\u5165\u8f93\u5165\u7f13\u5b58\u7684\u6570\u636e\u91cf\u5c31\u4f1a\u51cf\u5c0f\uff08\u4e5f\u5c31\u662f block \u5927\u5c0f\u964d\u4f4e\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u7684 I/O \u64cd\u4f5c\u5c31\u4f1a\u53d8\u591a\u3002</p>"},{"location":"study/datastructure/practice/#greedy","title":"Greedy","text":"<p>Let S be the set of activities in Activity Selection Problem.  Then the earliest finish activity a must be included in all the maximum-size subset of mutually compatible activities of S [F]</p> <p>\u5fc5\u5b9a\u5728\u67d0\u4e2a\u6700\u5927\u6d3b\u52a8\u5b50\u96c6\u4e2d\uff0c\u4e0d\u662f\u6240\u6709\u90fd\u5305\u542b\u5b83\u3002</p>"},{"location":"study/datastructure/practice/#np","title":"NP","text":"<p>The decision problem HALTING returns TRUE, if, for a given input I and a given (deterministic) algorithm A, A terminates, otherwise it loops forever. The HALTING problem is NP-complete. [F]</p> <p>HALTIING\u95ee\u9898\u662f\u4e0d\u53ef\u591a\u9879\u5f0f\u65f6\u95f4\u5224\u5b9a\u95ee\u9898\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u8f93\u5165\uff0c\u5b83\u4e0d\u80fd\u5728\u6709\u9650\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u901a\u8fc7\u4efb\u4f55\u7b97\u6cd5\u5f97\u51fa\u7ed3\u679c\u3002\u76f8\u53cd\uff0cNP-complete \u95ee\u9898\u662f\u53ef\u5224\u5b9a\u7684\uff0c\u6240\u6709NP\u95ee\u9898\u90fd\u662f\u53ef\u5224\u5b9a\u7684\u3002</p>"},{"location":"study/datastructure/practice/#random","title":"random","text":"<p>Reviewing the randomized QuickSort in our course, we always select a central splitter as a pivot before recursions, make sure that each side contains at least n/4 elements. However, as the same as the deterministic QuickSort, the worst case running time of the randomized QuickSort is still O(N^2) [F]</p>"},{"location":"study/datastructure/practice/#approxiamtion","title":"approxiamtion","text":"<p>1.Suppose ALG is an \u03b1-approximation algorithm for an optimization problem \u03a0 whose approximation ratio is tight. Then for every \u03f5&gt;0 there is no (\u03b1\u2212\u03f5)-approximation algorithm for \u03a0 unless P = NP.[F]</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u7279\u4f8b\u8fd8\u662f\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u8fd1\u4f3c\u7b97\u6cd5\u7684</p> <p>2.Let Aand B be optimization problems where it is known that A reduces to B in polynomial time. Additionally, suppose that there exists a polynomial-time 2-approximation for B. Then there must exist a polynomial time 2-approximation for A. [F]</p> <p>approximation factor is not (necessarily) carried over in polytime reduction. See e.g. set cover vs. vertex cover.</p> <p>3.A randomized algorithm for a decision problem with one-sided-error and correctness probability 1/3 (that is, if the answer is YES, it will always outputYES, while if the answer is NO, it will output NO with probability 1/3) can alwaysbe amplified to a correctness probability of 99%. [T]</p> <p></p> <p>4.Suppose that you have two deterministic online algorithms, A1 andA2, with a competitive ratios(approximation ratio for online algorithm) c1 and c2 respectively. Consider the randomized algorithm A\u2217 that flips a fair coin once at the beginning; if the coin comes up heads, it runs A1 from then on; if the coin comes up tails, it runs A2 from then on. Then the expected competitive ratio of A\u2217 is at least min{c1, c2}.</p> <p></p>"},{"location":"study/datastructure/practice/#parallel","title":"parallel","text":"<p>To solve the Maximum Finding problem with parallel Random Sampling method, T(n)=O(1) and W(n)=O(n) can be achieved with O(n) processors. [F]</p> <p>with high probability not 100 percent sure</p>"},{"location":"study/datastructure/practice/#local-search","title":"Local search","text":"<p>For an optimization problem, given a neighborhood, if its local optimum is also a global optimum, one can reach an optimal solution with just one step of local improvements. [F]</p>"},{"location":"study/math/","title":"Math","text":"<p>Here is some maths knowledge from books. I want to emphasize what is important.</p>"},{"location":"study/math/discrete/quadratic-probing/","title":"Quadratic probing","text":""},{"location":"study/math/discrete/quadratic-probing/#_2","title":"\u6563\u5217\u8868\u2014\u2014\u5e73\u65b9\u63a2\u6d4b\u2014\u2014\u4e8c\u6b21\u5269\u4f59","text":""},{"location":"study/math/discrete/quadratic-probing/#_3","title":"\u6563\u5217\u8868\u7684\u5e73\u65b9\u63a2\u6d4b","text":"<p>\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u6563\u5217\u8868\uff08Hash Table\uff09\u7684\u5e73\u65b9\u63a2\u6d4b\uff08Quadratic Probing\uff09\uff1a</p> <p>\u5e73\u65b9\u63a2\u6d4b \u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u3002\u54c8\u5e0c\u51b2\u7a81\u53d1\u751f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u4e0d\u540c\u7684\u952e\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65f6\u3002\u5e73\u65b9\u63a2\u6d4b\u901a\u8fc7\u6539\u53d8\u51b2\u7a81\u4f4d\u7f6e\u7684\u63a2\u6d4b\u65b9\u5f0f\uff0c\u6765\u51cf\u5c11\u51b2\u7a81\u5e76\u5747\u5300\u5206\u5e03\u952e\u503c\u3002 \u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\u63a2\u6d4b\u4f4d\u7f6e=(\u521d\u59cb\u54c8\u5e0c\u4f4d\u7f6e+i^2)%\u8868\u957f</p> <p>\u518d\u6765\u770b\u770b\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014C\u8bed\u8a00\u63cf\u8ff0\uff08Mark Allen Weiss \u7b2c\u4e8c\u7248 \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e\uff09\u300b119\u9875\u5b9a\u74065.1\u7684\u8bc1\u660e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u5173\u5e73\u65b9\u63a2\u6d4b\u7684\u91cd\u8981\u7ed3\u8bba\uff0c\u8fd9\u91cc\u7684\u8bc1\u660e\u4f3c\u4e4e\u4e0d\u662f\u5f88\u5b8c\u6574\u3002</p> <p>\u5b9a\u74065.1\uff1a\u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u662f\u7a7a\u7684\u65f6\u5019\uff0c\u603b\u80fd\u591f\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</p> <p></p> <p>\u8bc1\u660e\u7684\u5012\u6570\u7b2c\u4e8c\u884c</p> <p>\u201c\u56e0\u6b64\u4efb\u4f55\u5143\u7d20\u90fd\u6709 \\(\\lfloor TableSize/2\\rfloor\\) \u4e2a\u53ef\u80fd\u88ab\u653e\u5230\u7684\u4f4d\u7f6e\u3002\u201d</p> <p>\u8fd9\u53e5\u8bdd\u4e4d\u4e00\u770b\u5e76\u4e0d\u663e\u7136\uff0c\u56e0\u4e3a\u5b9a\u7406\u5148\u8bc1\u660e\u4e86\u524d \\(\\lfloor TableSize/2\\rfloor\\) \u4e2a\u5907\u9009\u4f4d\u7f6e\u662f\u4e92\u5f02\u7684\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bf4\u660e\u540e\u9762\u7684 \\(\\lfloor TableSize/2\\rfloor\\) \u662f\u4ec0\u4e48\u60c5\u51b5\u3002\u6709\u53ef\u80fd\u540e\u9762\u53ef\u80fd\u7684\u60c5\u51b5\u4e0e\u524d\u9762\u4e0d\u540c\uff0c\u5bfc\u81f4\u4efb\u4f55\u5143\u7d20\u90fd\u6709 \\(TableSize\\) \u4e2a\u53ef\u80fd\u7684\u4f4d\u7f6e\u3002\u90a3\u6309\u4e66\u4e2d\u7684\u8bf4\u6cd5\uff0c\u5e94\u8be5\u5728\u6b64\u53e5\u7684 \\(\\lfloor TableSize/2\\rfloor\\) \u524d\u52a0\u201c\u81f3\u5c11\u201d\u3002 \u4f46\u662f\u6211\u4eec\u4e0b\u9762\u4f1a\u8bc1\u660e\uff0c\u4e66\u4e2d\u7684\u8bf4\u6cd5\u662f\u5bf9\u7684\uff0c\u5373\u53ea\u6709 \\(\\lfloor TableSize/2\\rfloor\\) \u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u9762\u4e00\u534a\u7684\u5907\u9009\u4f4d\u7f6e\u548c\u524d\u9762\u4e00\u534a\u662f\u76f8\u540c\u7684\u3002</p> <p>\u5e73\u65b9\u63a2\u6d4b\u662f\u5728\u8ba1\u7b97\u51b2\u7a81\u5143\u7d20\u5728\u53d1\u751f\u7b2c \\(i\\) \u6b21\u51b2\u7a81\u5c06\u88ab\u653e\u5230\u7684\u65b0\u4f4d\u7f6e\uff1a \\(F(x,i) = x \\%p+i^2\\)\uff0c\u5047\u8bbe \\(p\\) \u4e3a \\(hash table\\) \u7684\u5927\u5c0f\uff0c\u4e3a\u5947\u7d20\u6570\uff0c\\(hash(x)=x\\%p\\) ,</p> <p>\u90a3\u4e48\u66f4\u786e\u5207\u5730\uff0c\\(F(x,i) = (x \\%p+i^2)\\%p=(x\\%p+i^2\\%p)\\%p\\) \u8fd9\u662f\u56e0\u4e3a\\((a+b)\\%p=(a\\%p+b\\%p)\\%p\\).</p> <p>\u4e0a\u9762 \\(F(x,i)\\)\u7684\u7ed3\u679c\u5728 \\(x\\) \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u53ea\u53d6\u51b3\u4e8e \\(i\\)\uff0c\u5373\u51b2\u7a81\u53d1\u751f\u7684\u6b21\u6570\u3002\u6240\u4ee5\u53ea\u8003\u8651 \\(i^2\\%p\\) \u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\u6240\u6709\u7684\u53ef\u80fd\u7ed3\u679c\u5373\u53ef\u3002\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7\\(p\\)\u4e2a\uff08\u56e0\u4e3a\u6a21 \\(p\\) \u7684\u540c\u4f59\u7c7b\u53ea\u6709\\(p\\)\u79cd\uff09\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\\(i^2\\%p\\) \u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\u6240\u6709\u7684\u53ef\u80fd\u7ed3\u679c\u5c31\u662f\u6a21 \\(p\\) \u7684\u6240\u6709\u4e8c\u6b21\u5269\u4f59\uff0c\u7ed3\u679c\u7684\u4e2a\u6570\u5c31\u662f\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\u52a0\u4e00\uff0c\u4e0b\u9762\u5c06\u4f1a\u8bc1\u660e\u6a21 \\(p\\) \u7684\u4e8c\u6b21\u5269\u4f59\u4e2a\u6570\u4e3a \\(\\frac{p-1}{2}\\)\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_4","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u5b9a\u4e49","text":"<p>\u4e8c\u6b21\u5269\u4f59\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570\\(a\\)\u79f0\u4e3a\u6a21\\(p\\)\u7684\u4e8c\u6b21\u5269\u4f59\uff0c\u5982\u679c\u5b58\u5728\u67d0\u4e2a\u6574\u6570\\(i\\)\u4f7f\u5f97\\(i^2\\equiv a \\pmod{p}\\) \u6210\u7acb\uff0c\u5426\u5219\u79f0\u4e3a\u6a21\\(p\\)\u7684\u4e8c\u6b21\u975e\u5269\u4f59\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u8bb0\u53f7\uff1a\u52d2\u8ba9\u5fb7\u7b26\u53f7\uff08Legendre\uff09\u6765\u8868\u793a\u4e8c\u6b21\u5269\u4f59\u5173\u7cfb $$ (\\frac{a}{p})= \\begin{cases} 1, &amp; a \\text{\u662f} p \\text{\u7684\u4e8c\u6b21\u5269\u4f59}\\ -1, &amp; a \\text{\u662f} p \\text{\u7684\u4e8c\u6b21\u975e\u5269\u4f59}\\ 0, &amp; p|a \\end{cases} $$</p>"},{"location":"study/math/discrete/quadratic-probing/#_5","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u6c42\u89e3\u6a21 \\(p\\)\u7684\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff0c\u5373 \\(i^2\\equiv a \\pmod{p}\\)\u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\uff0c\u6b63\u6574\u6570 \\(a\\)\u7684\u4e2a\u6570\u3002</p> <p>\u5148\u8003\u8651 \\(i\\) \u7684\u53d6\u503c\uff0c\u663e\u7136\u53ea\u8981\u4ece1\u53d6\u5230p\u5373\u53ef\uff0c\u82e5\\(i&gt;p\uff0c\\)\u5219 \\(\\exists q\\in Z, i=qp+r, 0&lt;r&lt;p\\) \u6b64\u65f6 \\(i^2\\%p=r^2\\%p\\)\uff0c\u4ecd\u53ea\u9700\u8003\u8651\u5c0f\u4e8ep\u7684\u60c5\u51b5\u5373\u53ef\u3002</p> <p>\u8bbe \\(1\\leq x &lt; y \\leq p\\),\u4e14\\(x^2\\%p\\equiv y^2\\%p\\). \u6545\u6709 \\(p|(x^2-y^2)\\) \uff0c\u5373 \\(p|(x+y)(x-y)\\) \u7531\\(x,y\\)\u7684\u53d6\u503c\u8303\u56f4\u53ef\u77e5 \\(p|(x+y)\\)\uff0c\u8fdb\u4e00\u6b65\u5730\uff0c \\(x+y=p\\)\u3002</p> <p>\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u5173\u7cfb\uff1a\u5f53\u4e24\u4e2a\u6570\u548c\u4e3a\u6a21\u6570\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u7684\u5e73\u65b9\u6a21\u9664\u8fd9\u4e2a\u6a21\u6570\u7ed3\u679c\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e \\((1,p-1),(2,p-2),\u00b7\u00b7\u00b7\\) \u8fd9 \\(\\frac{p-1}{2}\\) \u4e2a\u6570\u5bf9\uff08\u522b\u5fd8\u4e86p\u4e3a\u5947\u7d20\u6570\uff09\uff0c\u5904\u4e8e\u540c\u4e00\u6570\u5bf9\u4e2d\u7684\u6570\uff0c\u5b83\u4eec\u7684\u5e73\u65b9\u6a21\u9664\\(p\\)\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u4e0d\u540c\u6570\u5bf9\u4e2d\u7684\u5143\u7d20\u6a21\u9664\\(p\\)\u7ed3\u679c\u4e0d\u540c\uff0c\u5171\u6709 \\(\\frac{p-1}{2}\\) \u4e2a\u7ed3\u679c\u3002</p> <p>\u56e0\u6b64\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\u5c31\u662f \\(\\frac{p-1}{2}\\)\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_6","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u68c0\u9a8c","text":"<p>\u6709\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u77e5 \\(i^2\\equiv a \\pmod{p}\\) \u5f0f\u4e2d\u7684\\(a, p\\)\u8981\u53bb\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684 \\(i\\)\uff08\u8fd9\u5c31\u662f\u6c42\u89e3\u4e8c\u6b21\u5269\u4f59\u65b9\u7a0b\uff09\u3002\u4f46\u662f\u8fd9\u6837\u7684\\(i\\)\u5e76\u4e0d\u4e00\u5b9a\u5b58\u5728\uff08\u8fd9\u79cd\u60c5\u51b5\u5c31\u79f0a\u662f\u6a21p\u7684\u4e8c\u6b21\u975e\u5269\u4f59\uff09\u3002</p> <p>\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u6a21\u9664 \\(p\\) \u7684\u4e8c\u6b21\u5269\u4f59\u662f\u4ec0\u4e48\uff0c\u8fd9\u65f6\u5019 \\(i\\) \u5c31\u66f4\u4e0d\u77e5\u9053\u4e86\uff0c\u4e0d\u8fc7\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u77e5\u9053\u4e86\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u53ea\u9700\u4ece1\u5230 \\(\\frac{p-1}{2}\\) \u4e4b\u95f4\u4e00\u4e2a\u4e00\u4e2a\u68c0\u9a8c\u5c31\u884c\u3002\u90a3\u4e48\u5982\u4f55\u68c0\u9a8c\u4e00\u4e2a\u6570\u5b83\u662f\u4e0d\u662f\u6a21\u9664p\u7684\u4e8c\u6b21\u5269\u4f59\u5462\uff1f\u6b27\u62c9\u544a\u8bc9\u6211\u4eec\u6709\u6b27\u62c9\u51c6\u5219\uff08Euler Criterion\uff09\uff1a $$ (\\frac{a}{p})\\equiv a^{\\frac{p-1}{2}}\\pmod{p}= \\begin{cases} 1 \\pmod{p} &amp; \\text{\u5982\u679c } a \\text{ \u662f\u6a21 } p \\text{ \u7684\u4e8c\u6b21\u5269\u4f59} \\ -1 \\pmod{p} &amp; \\text{\u5982\u679c } a \\text{ \u4e0d\u662f\u6a21 } p \\text{ \u7684\u4e8c\u6b21\u5269\u4f59} \\end{cases} $$</p> <p>\u6240\u4ee5\u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\u4e0a\u6765\uff0c\u51b2\u7a81\u65f6\u53d1\u751f\u65f6\uff0c\u5229\u7528\u5e73\u65b9\u63a2\u6d4b \\(hashtable\\) \u4e2d\u6240\u6709\u5907\u9009\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u6a21  \\(TableSize\\) \u7684\u4e8c\u6b21\u5269\u4f59 (\\(i^2\\%p\\))  \u52a0\u4e0a\u4e00\u4e2a \\(x\\%p\\) \u518d\u6a21\u9664 \\(p\\)\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u7528\u8003\u8651\u4e2a\u6570\uff0c\u5b83\u6709 \\(\\lfloor TableSize/ 2\\rfloor\\) \u4e2a\u3002 \u4e8e\u662f\uff0c\u518d\u770b\u5b9a\u74065.1\uff0c\u8868\u81f3\u5c11\u4e00\u534a\u7a7a\u65f6\uff0c\u4e8c\u6b21\u5269\u4f59\u81f3\u5c11\u6709\u4e24\u4e2a\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709\u7a7a\u7684\u5907\u9009\u4f4d\u7f6e\uff0c\u6545\u4e00\u5b9a\u53ef\u4ee5\u653e\u4e0b\u4e00\u4e2a\u65b0\u5143\u7d20\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_7","title":"\u6563\u5217\u5e73\u65b9\u63a2\u6d4b\u63d2\u5165\u5931\u8d25\u95ee\u9898","text":"<p>\u6700\u540e\u6765\u770b\u4e00\u4e2a\u5224\u65ad\u9898\uff0c\u6b63\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u7f18\u8d77\u3002</p> <p>If 7 elements have been stored in a hash table of size 13 at positions { 0, 1, 2, 4, 5, 10, 11 }, and the hash function is H(x) = x%13. Then an empty spot can't be found when inserting the element 40 with quadratic probing.</p> <p>\u7b54\u6848\u662f\u2714 \u4e00\u822c\u7684\u89e3\u6cd5\u662f\u4e0d\u65ad\u7528 \\((40+i^2) mod{13}(i=0,1,2, \\cdots)\\) \u6c42\u5f97\u65b0\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u540e\u53d1\u73b0\u7ed3\u679c\u662f \\(1, 2, 5, 10, 4, 0, 11, 11, 0, 4, 10, 5, 2\\) \u8fd913\u4e2a\u6570\u5faa\u73af\uff0c\u5168\u662f\u9898\u4e2d\u5df2\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee540\u4e0d\u80fd\u6210\u529f\u63d2\u5165\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u5bf9\u4e8c\u6b21\u5269\u4f59\u7684\u8ba8\u8bba\u5bf9\u8fd9\u4e2a\u5faa\u73af\u7ed9\u51fa\u89e3\u91ca\u3002 \u5148\u8f6c\u6362\u4e00\u4e0b\u63d2\u5165\u4f4d\u7f6e\u8868\u8fbe\u5f0f\uff1a \\((40+i^2) mod{13}=(40 mod{13}+i^2 mod{13})mod{13}=(1+i^2 mod{13})mod{13},(i=0,1,2, \\cdots)\\)\uff0c \u8fd9\u4e2a\u7ed3\u679c\u53ef\u80fd\u7684\u53d6\u503c\u4e2a\u6570\uff08\u4e5f\u5c31\u662f\u53ef\u63d2\u5165\u4f4d\u7f6e\u4e2a\u6570\uff09\uff0c\u53d6\u51b3\u4e8e $i^2mod{13}\u7684\u503c\u7684\u4e2a\u6570 $\u3002</p> <p>\u9996\u5148\uff0c\u53ef\u4ee5\u786e\u5b9a\u6a21\u966413\u7684\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff1a\\(\\frac{p-1}{2}=\\frac{13-1}{2}=6\\)\u3002 \u5728\u8fd9\u9053\u9898\u91cc\uff0c\u6a21\u6570\u7684\u7ed3\u679c\u53ef\u4ee5\u4e3a0\uff0c\u6545\u5728\u6563\u5217\u4e2d\u6709 \\(6+1=7\\) \u4e2a\u53ef\u63d2\u5165\u4f4d\u7f6e\u3002\u63a5\u7740\u6211\u4eec\u5c31\u4ec5\u9700\u5224\u65ad\u6240\u7ed9\u7684positions\u662f\u5426\u4e3a\u8fd97\u4e2a\u53ef\u63d2\u5165\u4f4d\u7f6e\u3002\uff08\u5b9e\u9645\u4e0a\u5f97\u5230\u7684\u5faa\u73af\u5df2\u7ecf\u8bc1\u5b9e\u4e86\u786e\u5b9e\u662f\u8fd97\u4e2a\uff09</p> <p>\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6b27\u62c9\u51c6\u5219\uff0c\u5c06\u6240\u7ed9\u7684position\u6807\u53f7\u51cf\u53bb1\u540e\u6c426\u6b21\u65b9\u7136\u540e\u6a21\u966413\uff0c\u770b\u770b\u7ed3\u679c\u662f\u4e0d\u662f1\uff08\u6b64\u65f6\u5373\u4e3a\u6a2113\u7684\u4e8c\u6b21\u5269\u4f59\uff09\u6216\u80050\u3002 \u6ce8\u610f\uff1a0\u51cf\u53bb1\u7ed3\u679c\u53d612\uff0c\u56e0\u4e3a \\(1+12=13\\equiv0 mod{13}\\)</p> <p>\u4e0b\u9762\u662f\u9a8c\u8bc1\u7684Python\u4ee3\u7801\uff1a</p> <pre><code>positions=[0,1,2,4,5,10,11]\nres=[0,1]\np=13\nfor position in positions:\n    if position==0:\n        position=13\n    if (position-1)**((p-1)/2)%13 in res:\n        print(f\"position {position%13} is not insertable\")\n</code></pre>"},{"location":"study/math/linear%20algebra/","title":"Linear algebra","text":"<p>Here are some linear algebra knowledge.</p>","tags":["Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/","title":"SVD","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#introduction","title":"Introduction","text":"<p>SVD(singular value decomposition) is a mathematical method to process matrix. SVD can help extract the key traits of the number in a matrix. Apparently we can use it to process images because images are expressed as matries in computer science. This article is aimed to figure out why and how the SVD can extract the traits of the matrix. Plus I want to give several examples of its application in computere science.  </p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd_1","title":"SVD","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#start-from-one-way-to-factorize-matrix","title":"Start from one way to factorize matrix","text":"<p>Here is a matrix with \\(rank=1\\):</p> \\[ A=\\begin{pmatrix}   1&amp;2&amp;3 \\\\   1&amp;2&amp;3 \\end{pmatrix} \\] <p>It can be written as a column times a row:</p> \\[ A=\\begin{pmatrix}   1&amp;2&amp;3 \\\\   1&amp;2&amp;3 \\end{pmatrix}=\\begin{pmatrix}   1 \\\\   1 \\end{pmatrix}\\begin{pmatrix}   1&amp;2&amp;3 \\end{pmatrix} \\] <p>We can say the matrix is decomposed as a column times a row and more generally, for any matrix, it can be decomposed as the sum of \\(column \\times row\\) with different coefficients. A coefficient decides the weight of the specific \\(column \\times row\\) in the whole sum. Here is an example:</p> \\[ A=\\begin{pmatrix}   a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}=a\\begin{pmatrix}   1 \\\\   0 \\end{pmatrix}\\begin{pmatrix}   1&amp;0&amp;0 \\end{pmatrix}+b\\begin{pmatrix}   0 \\\\   1 \\end{pmatrix}\\begin{pmatrix}   0&amp;1&amp;0 \\end{pmatrix} \\] <p>It can be formalised as</p> \\[ A=\\sigma_1{u_1}v_1^{T}+\\sigma_2u_2v_2^{T} \\] <p>Here \\(a\\)(\\(\\sigma_1\\)) is the weight of the first \\(column \\times row\\) on the left and \\(b\\)(\\(\\sigma_2\\)) is the only other one. If \\(a\\) is much more larger than \\(b\\), we can neglect the second product to approximate \\(A\\) as only one \\(column \\times row\\) with its coefficient. This is useful to store the matrix \\(A\\) with less space.  </p> <p>But where is the trait? Let's get it now: \\(A\\) is by \\(m\\times n\\), and suppose it has been decomposed as follow:</p> \\[ A=\\sigma_1{u_1}v_1^{T}+\\sigma_2u_2v_2^{T}+\\cdots+\\sigma_n u_n v_n^{T} \\tag{1} \\] <p>where \\(\\sigma_1&gt;\\sigma_2&gt;\\cdots&gt;\\sigma_n\\).</p> <p>We can take in equation (1) in this way: \\(\\sigma_i\\) is the weight, \\(u_i\\) is the trait vector and \\(v_i^{T}\\) is the combination vector who gives a matrix \\(A_i\\) of \\(m \\times n\\) by \\(u_i v_i^{T}\\), whose columns are the multiple of \\(u_i\\) with their coefficients in \\(v_i^{T}\\).</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd-form","title":"SVD form","text":"<p>In matrix notation and more formalised, the former example could be written</p> \\[ A=\\begin{pmatrix}   a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}=\\begin{pmatrix}   1&amp;0 \\\\   0&amp;1 \\end{pmatrix}\\begin{pmatrix}    a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}\\begin{pmatrix}   1&amp;0&amp;0 \\\\   0&amp;1&amp;0 \\\\   0&amp;0&amp;1 \\end{pmatrix} \\] <p>In a general form of \\(A_{m\\times n}\\), the SVD wants to write \\(A\\) as</p> \\[ A=U\\Sigma V^T \\tag{2} \\] <p>\\(U_{m\\times m}\\) is called the left singular matrix with left singular vectors as its colomns and \\(V^{T}_{n\\times n}\\) is the right one. \\(\\Sigma_{m\\times n}\\) has singular values \\(\\sigma_i\\) arranged in descending order in position \\(\\Sigma_{ii}\\)  and zeros in other positions.  </p> <p>Usually, \\(U\\) and \\(V\\) are orthogonal matrix. Therefore, \\(V^{-1}=V^{T}\\), and multiply \\(V\\) in both side of equation (2) we can get another form of it and it is where equation (2) comes from:</p> \\[ AV=U\\Sigma \\tag{3} \\] <p>The idea is the same as that of diagonalising a real and symmetric square matrix with orthogonal matrix:</p> \\[ A=Q\\Lambda Q^T \\Leftrightarrow AQ=Q\\Lambda \\] <p>where \\(\\Lambda\\) is a diagonal matrix with eigen values of \\(A\\) and \\(Q\\) is the orthogonal matrix with corresponding orthonormal eigen vectors.  </p> <p>Back to equation (3), rewrite it with specific vectors:</p> \\[ A\\begin{pmatrix} v_1&amp;v_2&amp;\\cdots &amp;v_n \\end{pmatrix}=\\begin{pmatrix} u_1&amp;u_2&amp;\\cdots &amp;u_m \\end{pmatrix}\\begin{pmatrix} \\sigma_1&amp;0&amp;\\cdots &amp;0 \\\\ 0       &amp;\\sigma_2 &amp;\\cdots&amp;0\\\\ \\vdots &amp;\\vdots&amp;\\cdots&amp;0 \\end{pmatrix}_{m\\times n} \\] <p>Suppose there are \\(\\sigma_1\\) to \\(\\sigma_r\\). Then we have</p> \\[ Av_i=\\sigma_i u_i, i=1,2,\\cdots,r \\tag{4} \\] <p>What we need to do is find these singular values \\(\\sigma_i\\) and corresponding sigular vectors \\(v_i\\) and \\(u_i\\), where \\(u_i\\) can be given by \\(v_i\\) and \\(\\sigma_i\\) with equation (4).  </p> <p>Transpose both sides of equation (2):</p> \\[ A^T=V\\Sigma^T U^T \\] <p>Then multiply with \\(A\\):</p> \\[ AA^T=(U\\Sigma V^T)(V\\Sigma^T U^T)=U(\\Sigma\\Sigma^T)U^T \\tag{5} \\] <p>\\((\\Sigma\\Sigma^T)\\) is a \\({m\\times m}\\) matrix with \\(\\sigma_1^2,\\sigma_2^2,\\cdots,\\sigma_r^2\\) and zeros on \\((\\Sigma\\Sigma^T)_{ii}\\) and zero otherwise. Therefore, \\(\\sigma_i^2(i=1,2,...,r)\\) are eigenvalues of \\(AA^T\\), with \\(u_i\\) being their corresponding eigenvectors. Similarly, we can also get \\(\\sigma_i^2(i=1,2,...,r)\\) are eigenvalues of \\(A^TA\\), with \\(v_i\\) being their corresponding eigenvectors.</p> <ul> <li>Conclusion: Now let's summarize the whole process of SVD. Our aim is to write \\(A\\) as \\(U\\Sigma V^T\\)</li> </ul>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd-applicationpca","title":"SVD application\u2014\u2014PCA","text":"<p>PCA(principal component analysis) is a dimensionality reduction technique used in statistics and machine learning. It transforms a dataset with many correlated variables into a smaller set of uncorrelated variables called principal components, while preserving as much variance as possible. SVD is an effective way to implement PCA.</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#a-visulized-example","title":"A visulized example","text":"<p>Take \\(A_{m\\times n}\\) in this way: A set of \\(n\\) samples with \\(m\\) variables of measurement. Here is an example from reference[1] listed last.  </p> <p>Suppose we have \\(n\\) different points in a 2-D plane and we want to find out the principal direction of these points, namely a line that will be as close as possible to the points.  </p> <p>First, we center each of the measurement: \\(x,y\\) in this example. Substract \\(\\bar{x}\\) and \\(\\bar{y}\\) for each \\(x_i\\) and \\(y_i\\). We can get a matrix \\(A_{2\\times n}\\) with each of its row having average of \\(0\\).</p> <p>We can draw these centered points in a coordinate. The center of these points is the origin. It helps a lot when we try to find the direction formed by these points.</p> <p>\\(R^2\\) or a subspace in \\(R^m\\)\"&gt;</p> <p>Now consider doing SVD on \\(A\\):</p> \\[ A=U\\Sigma V^T=\\begin{pmatrix} u_1&amp;u_2 \\end{pmatrix}\\Sigma \\begin{pmatrix} v_1&amp;v_2&amp;\\cdots&amp;v_n \\end{pmatrix}^T \\] <p>The leading sigular vector with bigger sigular value shows the direction in the former scatter graph for the reasons we talk about above.  </p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#least-perpendicular-squares","title":"Least perpendicular squares","text":"<p>Also this direction is the direction with least perpendicular squares.</p> <p>Namely, the sum of squared distances from the points to the line is a minimum.  </p> <p>Proof: Consider a triangle formed by the origin, the line and the point \\(a_i\\)(a vector with\\((x_i,y_i)\\)). Using Pythagorean theorem: $$ ||a_i||^2=|a_i^Tu_1|^2+|a_i^Tu_2|^2 $$</p> <p>The first term on the right is the projection of \\(a_i\\) on the direction of \\(u_1\\)(unit vector), namely the principal direction and the second term is the distance square we want. Sum all the distance squares:</p> \\[ d_{sum}=\\sum_{i=1}^{n}|a_i^Tu_2|^2=\\sum_{i=1}^{n}||a_i||^2-\\sum_{i=1}^{n}|a_i^Tu_1|^2 \\] <p>The first term on the right is a constant for given points and the second term can be written as</p> \\[ \\sum_{i=1}^{n}|a_i^Tu_1|^2=\\begin{pmatrix} a_1^Tu_1&amp;a_2^Tu_1\\cdots&amp;a_n^Tu_1 \\end{pmatrix}\\begin{pmatrix} a_1^Tu_1\\\\ a_2^Tu_1\\\\ \\vdots\\\\ a_n^Tu_1 \\end{pmatrix}=u_1^TAA^Tu_1 \\] <p>Minimise \\(d_{sum}\\) means maximise \\(u_1^TAA^Tu_1\\). Of course it arrives it maximum when \\(u_1\\) is the singular vector for the maximum singular value. This cooresponds with the PCA by SVD.</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#the-general-form","title":"The general form","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#application-in-computer-science","title":"Application in computer science","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#face-recognition","title":"Face recognition","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svdfrom-the-operator-perspective","title":"SVD\u2014\u2014from the operator perspective","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#polar-decomposition","title":"Polar decomposition","text":"<p>\\(A=U\\Sigma V^T=(UV^T) (V\\Sigma V^T)=QS\\)</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#references","title":"References","text":"<ul> <li>[1] Chapter 7 Introduction to linear algebra 5th by Gilbert Strang  </li> <li>[2] Eigenface Wiki</li> <li>[3] Chapter 7 Linear algebra done right 4th by Sheldon Axler</li> </ul>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/maths%20analysis/maths%20analysis/","title":"Maths","text":""},{"location":"study/math/maths%20analysis/maths%20analysis/#calculus","title":"Calculus","text":"\\[ \\sum_{i=1}^{n}i^2=\\frac{n(n+1)(2n+1)}{6} \\]"},{"location":"study/math/probability/","title":"probability theorem","text":"<p>This is the probability theorem section.</p>"},{"location":"study/network/","title":"Introduction","text":"<p>Here will record the network course I am learning: Computer Network: A Top-Down Approach. Most of the contents are copies of the PPT or the textbook or generated by AI. Here is the course site:</p> <p>Computer Network: A top-Down Approach.</p> <p>Here is the table of contents:</p> <ol> <li> <p>Introduction</p> </li> <li> <p>Application Layer</p> </li> <li> <p>Transport Layer</p> </li> <li> <p>Internet Layer</p> </li> <li> <p>Link layer</p> </li> </ol>"},{"location":"study/network/application%20layer/","title":"The application layer","text":""},{"location":"study/network/application%20layer/#principles-of-network-applications","title":"Principles of Network Applications","text":""},{"location":"study/network/application%20layer/#communication-paradigm","title":"Communication paradigm","text":"<p>Client-server paradigm: server:</p> <ul> <li>always-on host</li> <li>permanent IP address</li> <li>often in data centers, for scaling clients:</li> <li>contact, communicate with server</li> <li>may be intermittently connected</li> <li>may have dynamic IP addresses</li> <li>do not communicate directly with each other examples: HTTP, IMAP, FTP</li> </ul> <p>Peer-peer architecture:</p> <ul> <li>no always-on server</li> <li>arbitrary end systems directly communicate</li> <li>peers request service from other peers, provide service in return to other peers</li> <li>peers are intermittently connected and change IP addresses example: P2P file sharing [BitTorrent]</li> </ul>"},{"location":"study/network/application%20layer/#sockets","title":"Sockets","text":"<p>Process: program running within a host(resources management and allocation)</p> <ul> <li>Addressing: IP address + port</li> <li>Communication:</li> <li>within same host: IPC(inter-process communication)</li> <li>different host: exchanging messages</li> </ul> <p></p>"},{"location":"study/network/application%20layer/#protocols","title":"Protocols","text":"<p>Securing TCP:</p> <p>Vanilla TCP &amp; UDP sockets:</p> <ul> <li>no encryption</li> <li>cleartext passwords sent into socket traverse Internet  in cleartext (!)</li> </ul> <p>Transport Layer Security (TLS):</p> <ul> <li>provides encrypted TCP connections</li> <li>data integrity</li> <li>end-point authentication</li> </ul>"},{"location":"study/network/application%20layer/#web-and-http","title":"Web and HTTP","text":""},{"location":"study/network/application%20layer/#http","title":"HTTP","text":"<p>HTTP: hypertext transfer protocol</p> <ul> <li>Web's application-layer protocol</li> <li>client/server model</li> <li>stateless: server maintains no infomation about past client requests(so we need cookie)</li> <li>HTTP uses TCP in the transport-layer</li> </ul> <p>There are two types of HTTP connections:</p> <ul> <li>Non-persistent HTTP: at most one object sent over TCP connection. It is used by HTTP/1.0 by default.</li> <li>Persistent HTTP: multiple objects can be sent over single TCP connection between client, and that server. Used by HTTP/1.1 by default.</li> </ul> <p>Non-persistent HTTP example:</p> <p></p> <p>But it is bothering to initiate TCP every time we want to sent a request because it takes time and gets OS overhead:</p> <p></p> <p>RTT</p> <p>RTT is short for roundtrip time</p> <p>Therefore, we use persistent HTTP(HTTP1.1) more. Property of persistent  HTTP (HTTP1.1):</p> <ul> <li>server leaves connection open after sending response</li> <li>subsequent HTTP messages  between same client/server sent over open connection</li> <li>client sends requests as soon as it encounters a referenced object</li> <li>as little as one RTT for all the referenced objects (cutting response time in half)</li> </ul>"},{"location":"study/network/application%20layer/#http-message","title":"HTTP message","text":"<p>Request message HTTP request message general format:</p> <p></p> <p>Other HTTP request messages:</p> <ul> <li>GET method: include user data in URL field of HTTP GET request message (following a \u2018?\u2019)</li> <li>POST method: for web page including form input</li> <li>PUT method: uploads new file (object) to server, and completely replaces file that exists at specified URL with content in entity body of POST HTTP request message</li> <li>HEAD method: request the headers of a resource, but without the actual content (body) of the resource, similar to the GET method but without getting response body</li> </ul> <p>Response message:</p> <ul> <li>Format:</li> <li>Status line: HTTP version  Status code Status message</li> <li>Headers: Content-type etc</li> <li>Body(optional): html, jpeg, etc</li> </ul>"},{"location":"study/network/application%20layer/#cookies","title":"Cookies","text":"<p>Why we need cookies:</p> <p>HTTP GET/response interaction is stateless:  </p> <ul> <li>no need for client/server to track \u201cstate\u201d of multi-step exchange</li> <li>all HTTP requests are independent of each other</li> <li>no need for client/server to \u201crecover\u201d from a partially-completed-but-never-completely-completed transaction</li> </ul> <p>Considering stateful one protocol:  </p> <p></p> <p>What is Cookie</p> <p>Cookie is a small piece of data sent from a server to a client's web browser when client requests server for the first time and it is stored on the client side. Format: <code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; &lt;attributes&gt;</code></p> <p>What it can do:</p> <ul> <li>track user behavior on a given website (first party cookies)</li> <li>track user behavior across multiple websites (third party cookies) without user ever choosing to visit tracker site (!)</li> </ul> <p>How third party cookies(from websites you didn't choose to visit) track users' behavior?</p> <p>The third-party: like ad.com. When you visit example.com, it returns you cookies and you store it locally. This is the first party cookie. But at the same time you will request ad.com in some way and they send cookies to you and store them.</p> <p>When you visit example2.com, there is still ad there so you send request to ad.com and they store the cookies recording you have visited example2.com.</p> <p>In this way, the ad.com know you have visited example.com, example2.com and so on. It knows more about you and could give you personalized ads on sites with ad.com resourses embedded in.</p> <p></p> <p></p> <p>Tip</p> <p>In chrome the cookie of a specific site we are visiting can be seen by using application in developer tools.</p> GDPR <p>When cookies can identify an individual, cookies are considered personal data, subject to GDPR(general data protection regulation) personal data regulations.</p>"},{"location":"study/network/application%20layer/#web-caches","title":"Web caches","text":"<p>caching's goal</p> <p>To satisfy client requests without involving origin server. Then this can reduce response time for client request and reduce traffic on an institution's access link.</p> <p>How it works:</p> <ul> <li>user configures browser to point to a (local) Web cache and browser sends all HTTP requests to cache</li> <li>if object in cache: cache returns object to client</li> <li>else cache requests object from origin server, caches received object, then returns object to client</li> </ul> <p></p> Cache-Control <p>There is <code>Cache-Control</code> section in both HTTP request and response headers.</p> <ul> <li> <p>In request header, used to indicate how the client (usually a browser) wants to interact with caches when requesting a resource.</p> </li> <li> <p>In response header: used by the server to specify caching instructions for the client (browser) and intermediate caches (like CDNs or proxy servers). <code>Cache-Control: private</code>: the response is specific to a single user and should not be cached by shared caches (e.g., proxy servers or CDNs). However, it can be cached in the browser's local cache. <code>Cache-Control: public</code>:  the response can be cached by both private and shared caches. This is typically used for resources that are meant to be publicly available, such as images or static files.</p> </li> </ul>"},{"location":"study/network/application%20layer/#http2","title":"HTTP/2","text":"<p>Goal: decrease delay in multi-object HTTP requests</p> <p>Property: increased flexibility at server in sending objects to client:</p> <ol> <li>methods, status codes, most header fields unchanged from HTTP 1.1</li> <li>transmission order of requested objects based on client-specified object priority (not necessarily FCFS)</li> <li>push unrequested objects to client</li> <li>divide objects into frames, schedule frames to mitigate HOL(head-of-line) blocking(first large packets block the latter small ones)</li> </ol>"},{"location":"study/network/application%20layer/#e-mail","title":"E-mail","text":"<p>3 main components: user agent(mail reader), mail severs, SMTP(simple mail transfer protocol)</p>"},{"location":"study/network/application%20layer/#dnsdomain-name-system","title":"DNS(domain name system)","text":""},{"location":"study/network/application%20layer/#services","title":"Services","text":"<p>services:</p> <ul> <li>translate hostname to IP address</li> <li>host/mailserver aliasing</li> </ul>"},{"location":"study/network/application%20layer/#structure","title":"Structure","text":"<ul> <li>root name servers: official, contact-of-last-resort by name servers that can not resolve name</li> <li>Top-Level domain(TLD) severs:</li> <li>responsible for .com, .org, .net, .edu, .aero, .jobs, .museums, and all top-level country domains, e.g.: .cn, .uk, .fr, .ca, .jp</li> <li>Network Solutions: authoritative registry for .com, .net TLD</li> <li>Educause: .edu TLD</li> <li>Authoritative DNS servers: organization\u2019s own DNS server(s), providing authoritative hostname to IP mappings for organization\u2019s named hosts.</li> </ul>"},{"location":"study/network/application%20layer/#caching","title":"Caching","text":"<p>Once (any) name server learns mapping, it caches mapping, and immediately returns a cached mapping in response to a query.</p> <ul> <li>caching improves response time</li> <li>cache entries timeout (disappear) after some time (TTL)</li> <li>TLD servers typically cached in local name servers</li> </ul>"},{"location":"study/network/application%20layer/#dns-records","title":"DNS records","text":"<p>DNS: distributed database storing resource records(RR)</p> <p>RR format:(name, value, type, ttl)</p> <p>Common record types:</p> <ul> <li>A record(address record)</li> <li>name: domain name</li> <li> <p>value: IPv4 address</p> </li> <li> <p>AAAA record(IPv6 address record)</p> </li> <li>name: domain name</li> <li> <p>value: IPv6</p> </li> <li> <p>NS record(name server)</p> </li> <li>name: domain</li> <li> <p>value: hostname of authoritative name server for this domain</p> </li> <li> <p>CNAME</p> </li> <li>name: alias name for some \"canonical\"(the real) name(another domain name who has its own records)</li> <li> <p>value: canonical name</p> </li> <li> <p>MX record(mail exchange record)</p> </li> <li>name: domain name</li> <li>value: name of SMTP mail server associated with the domain name</li> </ul> <p>DNS protocol messages:</p> <p></p> <p></p> <p>An DNS response message in wireshark(results with display filter: dns)</p> <p></p>"},{"location":"study/network/application%20layer/#useful-commands","title":"Useful commands","text":"<p>commands</p> <p>There are some useful commands about DNS: <code>nslookup \u2013option1 \u2013option2 host-to-find dns-server</code> nslookup is used to resolved the IP address of a specific domain. With options like: <code>nslookup \u2013type=NS zju.edu.cn</code>. This gives the DNS servers and theire IP of domain <code>zju.edu.cn</code>. <code>ipconfig \\display dns</code> will display the cached DNS records on your computer. <code>ipconfig \\flushdns</code> will flush these DNS records.</p>"},{"location":"study/network/application%20layer/#p2p-applications","title":"P2P applications","text":""},{"location":"study/network/application%20layer/#p2p-architecture","title":"P2P architecture","text":"<p>Basic idea</p> <ul> <li>no always-on server</li> <li>arbitrary end systems directly communicate</li> <li>peers request service from other peers, provide service in return to other peers</li> <li>self scalability \u2013 new peers bring new service capacity, and new service demands</li> <li>peers are intermittently connected and change IP addresses</li> <li>complex management</li> <li>examples: P2P file sharing (BitTorrent), streaming (KanKan), VoIP (Skype)</li> </ul>"},{"location":"study/network/application%20layer/#file-distribution-time","title":"File distribution time","text":"<p>For the following discussion: F is the file size and u and v are the upload and download speed respectively.</p> <p></p> <p></p>"},{"location":"study/network/application%20layer/#bittorrent","title":"BitTorrent","text":"<ul> <li>A peer joining torrent:  </li> <li>has no chunks, but will accumulate them over time from other peers</li> <li> <p>registers with tracker to get list of peers, connects to subset of peers (\u201cneighbors\u201d)</p> </li> <li> <p>while downloading, peer uploads chunks to other peers</p> </li> <li>peer may change peers with whom it exchanges chunks</li> <li>churn: peers may come and go</li> <li>once peer has entire file, it may (selfishly) leave or (altruistically) remain in torrent</li> </ul> <p>Requesting chunks: At any given time, different peers have different subsets of file chunks. Periodically, Alice asks each peer for list of chunks that they have. Alice requests missing chunks from peers, rarest first</p> <p>Sending chunks: tit-for-tat</p> <ul> <li>Alice sends chunks to those four peers currently sending her chunks at highest rate. Other peers are choked by Alice (do not receive chunks from her)</li> <li>Re-evaluate top 4 every 10 secs</li> <li>Every 30 secs: randomly select another peer, starts sending chunks, namely\u201coptimistically unchoke\u201d this peer and this newly chosen peer may join top 4</li> <li>For higher upload rate: find better trading partners</li> </ul>"},{"location":"study/network/application%20layer/#video-streaming-and-cnds","title":"Video streaming and CNDs","text":""},{"location":"study/network/application%20layer/#challenges","title":"Challenges","text":"<ul> <li>server-to-client bandwidth will vary over time</li> <li>packet loss, delay due to congestion will delay playout</li> </ul> <ul> <li>continuous playout constraint: during client video playout, playout timig must match original timing</li> </ul> <p>With client-side buffering:</p> <p></p>"},{"location":"study/network/application%20layer/#dash","title":"DASH","text":"<p>Refer to Dynamic, Adaptive streaming over HTTP. It is an approach that allows a client to adapt the encoding rate of retrieved video to network congestion conditions.</p> <ul> <li>server:</li> <li>divides video file into multiple chunks</li> <li>each chunk encoded at multiple different rates</li> <li>different rate encodings stored in different files</li> <li>files replicated in various CDN nodes</li> <li> <p>manifest file: provides URLs for different chunks</p> </li> <li> <p>client:</p> </li> <li>periodically estimates server-to-client bandwidth</li> <li>consulting manifest, requests one chunk at a time<ul> <li>chooses maximum coding rate sustainable given current bandwidth</li> <li>can choose different coding rates at different points in time (depending on available bandwidth at time), and from different servers</li> </ul> </li> </ul> <p>General streaming</p> <p>Streaming video = encoding + DASH + playout buffering</p>"},{"location":"study/network/application%20layer/#cndcontent-delivery-network","title":"CND(content delivery network)","text":"<p>challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users?</p> <p>store/serve multiple copies of videos at multiple geographically distributed sites (CDN)</p> <ul> <li>enter deep: push CDN servers deep into many access networks</li> <li>bring home: smaller number of larger clusters in POPs near access nets</li> </ul> <p></p>"},{"location":"study/network/application%20layer/#socket-programming-with-udp-and-tcp","title":"Socket Programming with UDP and TCP","text":""},{"location":"study/network/internet%20layer/","title":"The Internet Layer","text":"<p>graph TD   A[Start] --&gt; B[Step 1]   B --&gt; C[Step 2]   C --&gt; D[End]</p>"},{"location":"study/network/introduction/","title":"Chapter1 Computer network and the Internet","text":""},{"location":"study/network/introduction/#network-edge","title":"Network edge","text":"<ol> <li>hosts: clients and servers</li> </ol> <p>host sends packets of data. Packet transmission delay is defined as time needed to transmit L-bit packet into link. Suppose the transmission rate is \\(R\\), then delay= \\(L(bits)/R(bits/sec)\\) .</p> <ol> <li>access network:</li> <li>cable based access: frequency division multiplexing (FDM): different channels transmitted in different frequency bands</li> <li>DSL(digital subscriber line): use existing telephone line to central office DSLAM</li> <li> <p>wireless:</p> <ul> <li>Wireless local area networks(WLANS)</li> <li>Wide-area cellular access networks</li> </ul> </li> <li> <p>physical meadia:</p> </li> <li> <p>coaxial cable</p> </li> <li>fiber optic cable</li> <li>wireless radio</li> <li>radio link types:<ul> <li>wireless LAN</li> <li>Bluetooth</li> <li>terrestrial microwave</li> <li>satellite</li> </ul> </li> </ol>"},{"location":"study/network/introduction/#network-core","title":"Network core","text":"<p>Packet-switching: hosts break application-layer messages into packets. Then, network forwards packets from one router to the next, across links on path from source to destination.</p> <p>Entire packet must arrive at router before it can be transmitted on next link, so we need to store and forward.  </p> <p>Packet switching has the problem of queuing.</p> <p></p> <p>There is another way of switching: circuit switching.</p> <p></p>"},{"location":"study/network/introduction/#performance","title":"Performance","text":""},{"location":"study/network/introduction/#packet-delay","title":"Packet delay","text":"<p>Happens when packets queue in router buffers, waiting for ture for transmission.</p> <p></p> <p></p>"},{"location":"study/network/introduction/#packet-loss","title":"Packet loss","text":"<p>Happens when memeory to hold queued packets fills up</p>"},{"location":"study/network/introduction/#throughut","title":"Throughut","text":"<p>Throughput: rate (bits/time unit) at which bits are being sent from sender to receiver Bottleneck link: link on end-end path that constrains end-end throughput.</p>"},{"location":"study/network/introduction/#protocol-layers","title":"Protocol layers","text":"<p>There are different ways to represent protocol layers, like the OSI(Open Systems Interconnection) model(7 layers) and TCP/IP model(4 layers). Here we use the 5-layer model.</p> <ol> <li>application: supporting network applications</li> <li> <p>HTTP, IMAP, SMTP, DNS</p> </li> <li> <p>transport: process-process data transfer</p> </li> <li> <p>TCP, UDP</p> </li> <li> <p>network: routing of datagrams from source to destination</p> </li> <li> <p>IP, routing protocols</p> </li> <li> <p>link: data transfer between neighboring  network elements</p> </li> <li> <p>Ethernet, 802.11 (WiFi), PPP</p> </li> <li> <p>physical: bits \u201con the wire\u201d</p> </li> </ol> <p>PDU(protocol data unit) encapsulated in each layer:</p> <p>Application: message Transport: segment Network: datagrams Link: frame Physical: bits</p> <p></p>"},{"location":"study/network/link%20layer/","title":"The link layer","text":""},{"location":"study/network/transport%20layer/","title":"The transport layer","text":""},{"location":"study/network/transport%20layer/#transport-layer-services","title":"Transport-layer services","text":"<p>Services: provide logical communication between application processes running on different hosts.</p> <p>Protocols: TCP and UDP</p>"},{"location":"study/network/transport%20layer/#multiplexing-and-demultiplexing","title":"Multiplexing and demultiplexing","text":"<p>Multiplexing: Taking data from one socket (one of possibly many sockets), encapsulating a data chuck with header information \u2013 thereby creating a transport layer segment \u2013 and eventually passing this segment to the network layer.</p> <p>Demultiplexing: Receiving a transport-layer segment from the network layer, extracting the payload (data) and delivering the data to the correct socket by using the IP address(only TCP) and port numbers in the segment.</p> <p>Summary: </p> <ul> <li>Multiplexing, demultiplexing: based on segment, datagram header field values</li> <li>UDP: demultiplexing using destination port number (only)</li> <li>TCP: demultiplexing using 4-tuple: source and destination IP addresses, and port numbers</li> <li>Multiplexing/demultiplexing happen at all layers</li> </ul>"},{"location":"study/network/transport%20layer/#connetionless-transport-udp","title":"Connetionless transport: UDP","text":"<p>UDP: user datagram protocol</p> <ul> <li>UDP segments may be lost or delivered out-of-order to app</li> <li>connectionless:</li> <li>no handshaking between UDP sender and reciever</li> <li>each UDP segment handled independently of others</li> </ul> <p>Where is there UDP:</p> <ul> <li>no connection estabishment(this can reduce RTT delay)</li> <li>simple: no connection state at sender, receiver</li> <li>small header size</li> <li>no congestion control</li> <li>can blast away as fast as desired</li> <li>can function in the face of congestion</li> </ul> <p>UDP segment:</p> <p></p>"},{"location":"study/network/transport%20layer/#udp-checksum","title":"UDP checksum","text":"<p>To detect errors in transmitted segment.</p> <p>Sender:</p> <ul> <li>treat contents of UDP segment (including UDP header fields and IP addresses) as sequence of 16-bit integers</li> <li>compute checksum: addition (one\u2019s complement sum) of segment content</li> <li>checksum value put into UDP checksum field</li> </ul> <p>Receiver:</p> <ul> <li>compute checksum of received segment</li> <li>check if computed checksum equals checksum field value</li> </ul> <p>An example:</p> <p></p> <p>Note</p> <p>When adding numbers, a carryout from the most significant bit needs to be added to the result. This kind of checksum is weak because if the above two number change at the same time, their sum may not change.</p>"},{"location":"study/network/transport%20layer/#principles-of-reliable-data-transferrdt","title":"Principles of reliable data transfer(RDT)","text":""},{"location":"study/network/transport%20layer/#connection-oriented-transport-tcp","title":"Connection-oriented transport: TCP","text":""},{"location":"study/oop/","title":"OOP","text":"<p>This is the OOP(object oriented programming) course note. The programming language is C++.  </p> <p>Declaration</p> <p>Most of the contents are mixed of copies from books or the answer of LLM(DeepSeek, GPT, etc) and my own understanding. There is no originality.</p> <p>\u76ee\u5f55:</p> <p>\u57fa\u7840\u8bed\u6cd5 \u7c7b \u6d41 \u5bb9\u5668 \u53cb\u5143\u51fd\u6570 \u91cd\u8f7d \u6a21\u7248</p>","tags":["OOP"]},{"location":"study/oop/class/","title":"Class","text":""},{"location":"study/oop/class/#_1","title":"\u8bbf\u95ee\u6743\u9650","text":"<p>private: \u53ea\u53ef\u5728\u7c7b\u5185\u4f7f\u7528\uff0c\u88ab\u7ee7\u627f\u4e5f\u4e0d\u80fd\u4f7f\u7528 protected: \u7ee7\u627f\u7684\u5b50\u7c7b\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u662f\u7c7b\u5916\u4e0d\u53ef\u4f7f\u7528 public: \u7c7b\u5185\u5916\u90fd\u53ef\u4f7f\u7528</p>"},{"location":"study/oop/class/#constructor","title":"\u6784\u9020\u51fd\u6570\uff08Constructor\uff09","text":"<p>\u6784\u9020\u51fd\u6570\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u81ea\u52a8\u8c03\u7528\u7684\u7279\u6b8a\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u4e3a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u8d4b\u521d\u503c\uff0c\u6216\u6267\u884c\u5bf9\u8c61\u521b\u5efa\u65f6\u9700\u8981\u7684\u5176\u4ed6\u64cd\u4f5c\u3002 \u53ea\u8981\u7c7b\u5185\u6709\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u751f\u6210\u7f3a\u7701\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u5426\u5219\u4f1a\u751f\u6210\u3002\u5982\u679c\u53ea\u5b9a\u4e49\u4e86\u975e\u7f3a\u7701\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7531\u4e8e\u7f16\u8bd1\u5668\u4e0d\u4f1a\u751f\u6210\u7f3a\u7701\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u7c7b\u5b9e\u4f8b\u5316\u65f6\u5fc5\u987b\u663e\u5f0f\u8c03\u7528\u975e\u7f3a\u7701\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002</p>"},{"location":"study/oop/class/#_2","title":"\u7279\u70b9","text":"<ul> <li>\u540d\u79f0\uff1a\u6784\u9020\u51fd\u6570\u7684\u540d\u79f0\u5fc5\u987b\u4e0e\u7c7b\u540d\u76f8\u540c\u3002</li> <li>\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff1a\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff0c\u751a\u81f3\u4e0d\u53ef\u4ee5\u58f0\u660e <code>void</code> \u8fd4\u56de\u7c7b\u578b\u3002</li> <li>\u81ea\u52a8\u8c03\u7528\uff1a\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\uff0c\u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u8c03\u7528\u3002</li> <li>\u91cd\u8f7d\uff1a\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u6765\u5b9e\u73b0\u5bf9\u8c61\u7684\u4e0d\u540c\u521d\u59cb\u5316\u65b9\u5f0f\u3002</li> </ul>"},{"location":"study/oop/class/#_3","title":"\u79cd\u7c7b","text":"<ol> <li>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff08Default Constructor\uff09\uff1a\u6ca1\u6709\u53c2\u6570\uff0c\u6216\u8005\u6240\u6709\u53c2\u6570\u90fd\u6709\u9ed8\u8ba4\u503c\u3002</li> <li>\u53c2\u6570\u5316\u6784\u9020\u51fd\u6570\uff08Parameterized Constructor\uff09\uff1a\u5e26\u6709\u53c2\u6570\uff0c\u7528\u4e8e\u63d0\u4f9b\u521d\u59cb\u5316\u503c\u3002</li> <li>\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08Copy Constructor\uff09\uff1a\u7528\u4e8e\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u6765\u521b\u5efa\u65b0\u5bf9\u8c61\u3002</li> </ol>"},{"location":"study/oop/class/#_4","title":"\u793a\u4f8b\u4ee3\u7801\uff1a\u6784\u9020\u51fd\u6570","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MyClass {\nprivate:\n    int x;\npublic:\n    // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\n    MyClass() {\n        x = 0;\n        cout &lt;&lt; \"Default constructor called!\" &lt;&lt; endl;\n    }\n\n    // \u53c2\u6570\u5316\u6784\u9020\u51fd\u6570\n    MyClass(int val) {\n        x = val;\n        cout &lt;&lt; \"Parameterized constructor called!\" &lt;&lt; endl;\n    }\n\n    void display() {\n        cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; endl;\n    }\n};\n\nint main() {\n    MyClass obj1;  // \u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\n    MyClass obj2(10);  // \u8c03\u7528\u53c2\u6570\u5316\u6784\u9020\u51fd\u6570\n\n    obj1.display();  // \u8f93\u51fa: x = 0\n    obj2.display();  // \u8f93\u51fa: x = 10\n\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Default constructor called!\nParameterized constructor called!\nx = 0\nx = 10\n</code></pre>"},{"location":"study/oop/class/#private","title":"private\u6784\u9020\u51fd\u6570\uff08\u5355\u4f8b\u6a21\u5f0f\uff09","text":"<ul> <li>\u5f53\u6784\u9020\u51fd\u6570\u88ab\u58f0\u660e\u4e3a <code>private</code>\u65f6\uff0c\u4e0d\u53ef\u4ee5\u5728\u7c7b\u5916\u76f4\u63a5\u6784\u9020\u7c7b\u7684\u5b9e\u4f8b\u3002\u8fd9\u53ef\u5e94\u7528\u4e8e\u5355\u4f8b\u6a21\u5f0f\uff0c\u786e\u4fdd\u4e00\u4e2a\u7c7b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u8bbf\u95ee\u70b9\uff0c\u9632\u6b62\u5916\u90e8\u4ee3\u7801\u76f4\u63a5\u521b\u5efa\u8be5\u7c7b\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c</li> </ul> <pre><code>class Singleton {\nprivate:\n    // \u79c1\u6709\u6784\u9020\u51fd\u6570\uff0c\u7981\u6b62\u5916\u90e8\u521b\u5efa\u5bf9\u8c61\n    Singleton() {}\n\n    // \u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u4fdd\u5b58\u552f\u4e00\u5b9e\u4f8b\n    static Singleton* instance;\n\npublic:\n    // \u83b7\u53d6\u552f\u4e00\u5b9e\u4f8b\u7684\u9759\u6001\u65b9\u6cd5\n    static Singleton* getInstance() {\n        if (instance == nullptr) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n\n    // \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u516c\u5171\u65b9\u6cd5\n    void doSomething() {\n        // ...\n    }\n};\n\n// \u9759\u6001\u6210\u5458\u521d\u59cb\u5316\nSingleton* Singleton::instance = nullptr;\nSingleton* instance1 = Singleton::getInstance();\ninstance1-&gt;doSomething();\n</code></pre> <p>\u5916\u90e8\u4ee3\u7801\u53ea\u80fd\u901a\u8fc7 getInstance() \u9759\u6001\u65b9\u6cd5\u6765\u8bbf\u95ee\u5355\u4e00\u5b9e\u4f8b\u3002</p> <ul> <li>\u65e2\u7136\u5355\u4f8b\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u662f\u79c1\u6709\u7684\uff0c\u90a3\u4e48\u5b83\u4e0d\u80fd\u88ab\u76f4\u63a5\u62f7\u8d1d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u5c06\u5355\u4f8b\u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\uff08\u6309\u503c\u4f20\u9012\uff09\u6216\u8fd4\u56de\u503c\uff08\u6309\u503c\u8fd4\u56de\uff09\uff0c\u56e0\u4e3a\u5f53\u7c7b\u4f5c\u4e3a\u53c2\u6570\u6216\u8fd4\u56de\u503c\u65f6\u4f1a\u8c03\u7528\u62f7\u8d1d\u51fd\u6570\uff0c\u800c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002\u5982\u679c\u60f3\u4f20\u53c2\u9700\u8981\u4f7f\u7528\u5355\u4f8b\u5bf9\u8c61\u7684\u5f15\u7528\u6216\u6307\u9488\u3002</li> </ul> <pre><code>void foo(Singleton s) {// \u9519\u8bef\uff1a\u4e0d\u80fd\u6309\u503c\u4f20\u9012\u5355\u4f8b\u5bf9\u8c61\n    // ...\n}\nSingleton createSingleton() {\n    return Singleton::getInstance(); // \u9519\u8bef\uff1a\u4e0d\u80fd\u8fd4\u56de\u4e00\u4e2a\u88ab\u62f7\u8d1d\u7684\u5bf9\u8c61\n}\n</code></pre>"},{"location":"study/oop/class/#destructor","title":"\u6790\u6784\u51fd\u6570\uff08Destructor\uff09","text":"<p>\u6790\u6784\u51fd\u6570\u662f\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff08\u5373\u5bf9\u8c61\u9500\u6bc1\u65f6\uff09\u81ea\u52a8\u8c03\u7528\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u3002\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u8fdb\u884c\u8d44\u6e90\u6e05\u7406\uff0c\u4f8b\u5982\u91ca\u653e\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5173\u95ed\u6587\u4ef6\u53e5\u67c4\u7b49\u3002</p>"},{"location":"study/oop/class/#_5","title":"\u6790\u6784\u51fd\u6570\u7684\u7279\u70b9","text":"<ul> <li>\u540d\u79f0\uff1a\u6790\u6784\u51fd\u6570\u7684\u540d\u79f0\u662f\u7c7b\u540d\u52a0 <code>~</code> \u7b26\u53f7\uff08\u4f8b\u5982 <code>~MyClass()</code>\uff09\u3002</li> <li>\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff1a\u4e0e\u6784\u9020\u51fd\u6570\u7c7b\u4f3c\uff0c\u6790\u6784\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u3002</li> <li>\u6ca1\u6709\u53c2\u6570\uff1a\u6790\u6784\u51fd\u6570\u4e0d\u80fd\u5e26\u53c2\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u91cd\u8f7d\u3002</li> <li>\u81ea\u52a8\u8c03\u7528\uff1a\u5f53\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u51fd\u6570\u4f1a\u81ea\u52a8\u8c03\u7528\uff0c\u901a\u5e38\u662f\u5bf9\u8c61\u8d85\u51fa\u4f5c\u7528\u57df\u65f6\uff0c\u6216\u8005\u901a\u8fc7 <code>delete</code> \u5173\u952e\u5b57\u5220\u9664\u65f6\u3002</li> </ul>"},{"location":"study/oop/class/#_6","title":"\u793a\u4f8b\u4ee3\u7801\uff1a\u6790\u6784\u51fd\u6570","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MyClass {\nprivate:\n    int* ptr;\npublic:\n    // \u6784\u9020\u51fd\u6570\n    MyClass(int val) {\n        ptr = new int(val);  // \u52a8\u6001\u5206\u914d\u5185\u5b58\n        cout &lt;&lt; \"Constructor called, value = \" &lt;&lt; *ptr &lt;&lt; endl;\n    }\n\n    // \u6790\u6784\u51fd\u6570\n    ~MyClass() {\n        delete ptr;  // \u91ca\u653e\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\n        cout &lt;&lt; \"Destructor called, memory freed\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    MyClass obj(5);  // \u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\uff0c\u5206\u914d\u5185\u5b58\n    // obj \u8d85\u51fa\u4f5c\u7528\u57df\u65f6\uff0c\u6790\u6784\u51fd\u6570\u81ea\u52a8\u8c03\u7528\uff0c\u91ca\u653e\u5185\u5b58\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>Constructor called, value = 5\nDestructor called, memory freed\n</code></pre>"},{"location":"study/oop/class/#_7","title":"\u89e3\u91ca","text":"<ol> <li>\u6784\u9020\u51fd\u6570\uff1a\u5f53\u5bf9\u8c61 <code>obj</code> \u88ab\u521b\u5efa\u65f6\uff0c\u6784\u9020\u51fd\u6570\u5206\u914d\u4e86\u52a8\u6001\u5185\u5b58\u3002</li> <li>\u6790\u6784\u51fd\u6570\uff1a\u5f53 <code>obj</code> \u8d85\u51fa\u4f5c\u7528\u57df\uff08\u5373\u7a0b\u5e8f\u7ed3\u675f\u65f6\uff09\uff0c\u6790\u6784\u51fd\u6570\u81ea\u52a8\u88ab\u8c03\u7528\uff0c\u91ca\u653e\u4e86\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u3002</li> </ol>"},{"location":"study/oop/class/#3","title":"3. \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570\u7684\u5173\u7cfb","text":"<ul> <li>\u6784\u9020\u51fd\u6570\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u88ab\u8c03\u7528\uff0c\u8d1f\u8d23\u521d\u59cb\u5316\u5bf9\u8c61\u3002</li> <li>\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u88ab\u8c03\u7528\uff0c\u8d1f\u8d23\u6e05\u7406\u8d44\u6e90\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u4e2d\u6709\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u6216\u6587\u4ef6\u53e5\u67c4\u7b49\u8d44\u6e90\uff0c\u6784\u9020\u51fd\u6570\u4f1a\u8d1f\u8d23\u5206\u914d\u8fd9\u4e9b\u8d44\u6e90\uff0c\u800c\u6790\u6784\u51fd\u6570\u5219\u8d1f\u8d23\u91ca\u653e\u8fd9\u4e9b\u8d44\u6e90\u3002</p>"},{"location":"study/oop/class/#4-copy-constructor","title":"4. \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08Copy Constructor\uff09","text":"<p>\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u662f\u7528\u4e8e\u901a\u8fc7\u5df2\u6709\u5bf9\u8c61\u521b\u5efa\u65b0\u5bf9\u8c61\u7684\u4e00\u79cd\u6784\u9020\u51fd\u6570\u3002\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u201c\u6df1\u62f7\u8d1d\u201d\u6216\u8005\u201c\u6d45\u62f7\u8d1d\u201d\u3002</p> <ul> <li> <p>\u6d45\u62f7\u8d1d\u662f\u6309\u503c\u9010\u4e2a\u62f7\u8d1d\u5bf9\u8c61\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u3002\u5f53\u7c7b\u4e2d\u5305\u542b\u6307\u9488\u6210\u5458\u6216\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u65f6\uff0c\u6d45\u62f7\u8d1d\u53ea\u4f1a\u590d\u5236\u6307\u9488\u7684\u5730\u5740\uff0c\u800c\u4e0d\u4f1a\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u539f\u5bf9\u8c61\u548c\u62f7\u8d1d\u5bf9\u8c61\u4f1a\u5171\u4eab\u540c\u4e00\u5757\u5185\u5b58\u533a\u57df\uff08\u5373\u6307\u5411\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff09\u3002\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u6539\u53d8\u4e86\u8fd9\u5757\u5185\u5b58\u7684\u5185\u5bb9\uff0c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\u3002</p> </li> <li> <p>\u6df1\u62f7\u8d1d\u4f1a\u521b\u5efa\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u8d44\u6e90\u3002\u5bf9\u4e8e\u5305\u542b\u6307\u9488\u7684\u6210\u5458\u53d8\u91cf\uff0c\u6df1\u62f7\u8d1d\u4f1a\u5728\u62f7\u8d1d\u8fc7\u7a0b\u4e2d\u5206\u914d\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5c06\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u590d\u5236\u8fc7\u6765\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5bf9\u8c61\u6709\u72ec\u7acb\u7684\u5185\u5b58\u533a\u57df\u3002</p> </li> </ul>"},{"location":"study/oop/class/#_8","title":"\u7279\u70b9","text":"<ul> <li>\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u5b9a\u4e49\uff1a<code>ClassName(const ClassName&amp; other)</code></li> <li>\u901a\u5e38\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5b83\u6267\u884c\u201c\u6d45\u62f7\u8d1d\u201d\uff08\u6210\u5458\u53d8\u91cf\u6309\u503c\u590d\u5236\uff09\u3002\u5982\u679c\u7c7b\u4e2d\u5305\u542b\u6307\u5411\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u6307\u9488\uff0c\u53ef\u80fd\u9700\u8981\u81ea\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u907f\u514d\u6d45\u62f7\u8d1d\u3002</li> </ul>"},{"location":"study/oop/class/#_9","title":"\u8c03\u7528\u573a\u666f","text":"<ol> <li>\u901a\u8fc7\u590d\u5236\u521d\u59cb\u5316\u521b\u5efa\u5bf9\u8c61\uff1a    \u5f53\u4f60\u7528\u4e00\u4e2a\u5df2\u6709\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002</li> </ol> <pre><code>MyClass obj1;        // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\nMyClass obj2 = obj1; // \u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n</code></pre> <ol> <li>\u901a\u8fc7\u4f20\u503c\u65b9\u5f0f\u4f20\u9012\u5bf9\u8c61\uff1a    \u5f53\u4f60\u5c06\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u5e76\u4e14\u4ee5\u4f20\u503c\u65b9\u5f0f\u4f20\u9012\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002</li> </ol> <pre><code>void func(MyClass obj); // \u53c2\u6570\u662f\u6309\u503c\u4f20\u9012\nMyClass obj1;\nfunc(obj1); // \u4f20\u9012\u65f6\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n</code></pre> <ol> <li> <p>\u901a\u8fc7\u8fd4\u56de\u5bf9\u8c61\u65f6\u8fd4\u56de\u503c\u590d\u5236\uff1a    \u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u901a\u5e38\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u590d\u5236\u8fd4\u56de\u503c\u3002</p> <p><code>cpp    MyClass func() {    MyClass obj;    return obj; // \u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u8fd4\u56de\u5bf9\u8c61    }</code></p> </li> <li> <p>\u8d4b\u503c\u64cd\u4f5c\uff1a    \u5982\u679c\u4f7f\u7528\u62f7\u8d1d\u8d4b\u503c\u64cd\u4f5c\u7b26\uff08\u800c\u4e0d\u662f\u76f4\u63a5\u521d\u59cb\u5316\uff09\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\u867d\u7136\u901a\u5e38\u4f7f\u7528\u7684\u662f \u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8d4b\u503c\u65f6\uff09\uff0c\u53ef\u80fd\u9700\u8981\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002</p> </li> </ol>"},{"location":"study/oop/class/#_10","title":"\u793a\u4f8b\u4ee3\u7801\uff1a\u62f7\u8d1d\u6784\u9020\u51fd\u6570","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MyClass {\nprivate:\n    int* ptr;\npublic:\n    // \u6784\u9020\u51fd\u6570\n    MyClass(int val) {\n        ptr = new int(val);  // \u52a8\u6001\u5206\u914d\u5185\u5b58\n        cout &lt;&lt; \"Constructor called, value = \" &lt;&lt; *ptr &lt;&lt; endl;\n    }\n\n    // \u62f7\u8d1d\u6784\u9020\u51fd\u6570\n    MyClass(const MyClass&amp; other) {\n        ptr = new int(*(other.ptr));  // \u6df1\u62f7\u8d1d\n        cout &lt;&lt; \"Copy constructor called, copied value = \" &lt;&lt; *ptr &lt;&lt; endl;\n    }\n};\n\nint main() {\n    MyClass obj1(10);  // \u8c03\u7528\u6784\u9020\u51fd\u6570\n    MyClass obj2 = obj1;  // \u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n\n    return 0;\n}\n</code></pre> <pre><code>Constructor called, value = 10\nCopy constructor called, copied value = 10\n</code></pre> <ul> <li>\u5f53 <code>obj2</code> \u88ab\u521b\u5efa\u65f6\uff0c\u7f16\u8bd1\u5668\u8c03\u7528\u4e86 <code>obj1</code> \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5c06 <code>obj1</code> \u7684\u6570\u636e\u6df1\u62f7\u8d1d\u7ed9 <code>obj2</code>\u3002</li> <li>\u901a\u8fc7\u81ea\u5b9a\u4e49\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u5185\u5b58\u526f\u672c\uff0c\u907f\u514d\u4e86\u6d45\u62f7\u8d1d\u53ef\u80fd\u5e26\u6765\u7684\u95ee\u9898\uff08\u5982\u53cc\u91cd\u91ca\u653e\u5185\u5b58\uff09\u3002</li> </ul>"},{"location":"study/oop/class/#_11","title":"\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0e\u51fd\u6570","text":"<ul> <li> <p><code>static</code>\u4fee\u9970\u7684\u53d8\u91cf\u4e0e\u51fd\u6570\u662f\u5c5e\u4e8e\u7c7b\u672c\u8eab\u7684\uff0c\u53ef\u4ee5\u4e0d\u5b9e\u4f8b\u5316\u7c7b\u76f4\u63a5\u4f7f\u7528<code>Class::</code>\u6765\u8bbf\u95ee\uff0c\u5373\u4f7f\u4fee\u9970\u7684\u53d8\u91cf\u548c\u51fd\u6570\u662f<code>private</code>\u7684\u3002</p> </li> <li> <p>\u9759\u6001\u6210\u5458\u53d8\u91cf\u7684\u503c\u9700\u8981\u5728\u7c7b\u52a0\u8f7d\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u5b83\u4eec\u5728\u6240\u6709\u5bf9\u8c61\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u3002\u5fc5\u987b\u5728\u7c7b\u5916\u90e8\u5b9a\u4e49\u5176\u503c\uff0c\u5982\u679c\u5728\u5185\u90e8\uff08\u6bd4\u5982\u58f0\u660e\u65f6\u6216\u6784\u9020\u51fd\u6570\u4e2d\uff09\u5b9a\u4e49\u503c\uff0c\u5f53\u5b9e\u4f8b\u5316\u591a\u4e2a\u5bf9\u8c61\u65f6\u5c31\u4f1a\u5bfc\u81f4\u9759\u6001\u6210\u5458\u53d8\u91cf\u91cd\u590d\u5b9a\u4e49\u9519\u8bef\u3002</p> </li> <li> <p>\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 <code>this</code> \u6307\u9488\uff0c\u56e0\u4e3a\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u5bf9\u8c61\u3002</p> </li> </ul> <pre><code>class Room{\n  static int door=1;\n  static void openDoor(){cout&lt;&lt;\"Door was opened.\\n\";}\n};\ncout&lt;&lt;Room::door;\nRoom::openDoor();\n</code></pre>"},{"location":"study/oop/class/#this","title":"this \u6307\u9488","text":"<p>this \u6307\u9488 \u662f\u4e00\u4e2a \u9690\u5f0f\u53c2\u6570\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u5185\u90e8\u3002this \u6307\u9488\u6307\u5411\u5f53\u524d\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5373\u5b83\u6307\u5411\u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\u7684\u5b9e\u4f8b\uff08\u5bf9\u8c61\uff09\u3002</p> <p>\u57fa\u672c\u4f5c\u7528\uff1a</p> <ul> <li>\u5b83\u4f7f\u5f97\u6210\u5458\u51fd\u6570\u80fd\u591f\u8bbf\u95ee\u5f53\u524d\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u548c\u5176\u4ed6\u6210\u5458\u51fd\u6570\u3002</li> <li>\u5b83\u5e2e\u52a9\u6210\u5458\u51fd\u6570\u533a\u5206\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u5373\u4f7f\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u7c7b\u7c7b\u578b\u3002</li> </ul> <pre><code>// x \u4e3a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\n void setValue(int val) {\n    this-&gt;x = val;  // \u901a\u8fc7 this \u6307\u9488\u8bbf\u95ee\u5f53\u524d\u5bf9\u8c61\u7684\u6210\u5458 x\n    // x=val;       // \u8fd9\u6837\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4e0a\u9762\u5199\u6cd5\u66f4\u5bb9\u6613\u533a\u5206\u6210\u5458\u53d8\u91cf\u4e0e\u5176\u4ed6\u53d8\u91cf\n}\n</code></pre>"},{"location":"study/oop/class/#virtual-function","title":"\u865a\u51fd\u6570\uff08Virtual Function\uff09","text":"<ol> <li>\u865a\u51fd\u6570\u7684\u5b9a\u4e49\uff1a\u901a\u8fc7\u5728\u57fa\u7c7b\u4e2d\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u4e3a\u865a\u51fd\u6570\uff08\u4f7f\u7528\u5173\u952e\u5b57 <code>virtual</code>\uff09\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u65b0\u5b9a\u4e49\uff08\u8986\u76d6\uff09\u8be5\u51fd\u6570\u3002</li> <li>\u591a\u6001\u6027\uff1a\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6216\u5f15\u7528\u8c03\u7528\u865a\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u6839\u636e\u5b9e\u9645\u5bf9\u8c61\u7684\u7c7b\u578b\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\uff0c\u8fd9\u5c31\u662f\u52a8\u6001\u7ed1\u5b9a\uff08Dynamic Binding\uff09\u3002</li> </ol>"},{"location":"study/oop/class/#_12","title":"\u57fa\u672c\u8bed\u6cd5","text":"<pre><code>class Base {\npublic:\n    virtual void display() {  // \u57fa\u7c7b\u7684\u865a\u51fd\u6570\n        std::cout &lt;&lt; \"Base class display function\" &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    void display() override {  // \u6d3e\u751f\u7c7b\u8986\u76d6\u865a\u51fd\u6570\n        std::cout &lt;&lt; \"Derived class display function\" &lt;&lt; std::endl;\n    }\n};\n</code></pre> <p><code>override</code> \u5173\u952e\u5b57\uff1a\u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u5173\u952e\u5b57\uff0c\u8868\u660e\u4f60\u6253\u7b97\u8986\u76d6\u57fa\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u3002\u5b83\u6709\u52a9\u4e8e\u7f16\u8bd1\u5668\u68c0\u67e5\u4f60\u662f\u5426\u6b63\u786e\u5730\u8986\u76d6\u4e86\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u4f8b\u5982\uff0c\u51fd\u6570\u7b7e\u540d\u4e0d\u5339\u914d\u65f6\u4f1a\u53d1\u51fa\u8b66\u544a\uff09\u3002</p>"},{"location":"study/oop/class/#_13","title":"\u865a\u6790\u6784\u51fd\u6570","text":"<p>\u865a\u6790\u6784\u51fd\u6570\u662f\u786e\u4fdd\u5728\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u5220\u9664\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u80fd\u591f\u6b63\u786e\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\u6ca1\u6709\u865a\u6790\u6784\u51fd\u6570\u65f6\uff0c\u5220\u9664\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u4f1a\u53d1\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</p> <pre><code>class Base {\npublic:\n    virtual ~Base() {  // \u865a\u6790\u6784\u51fd\u6570\n        std::cout &lt;&lt; \"Base class destructor\" &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    ~Derived() {\n        std::cout &lt;&lt; \"Derived class destructor\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Base* ptr = new Derived();\n    delete ptr;  // \u6b63\u786e\u8c03\u7528 Derived \u548c Base \u7684\u6790\u6784\u51fd\u6570\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Derived class destructor\nBase class destructor\n</code></pre>"},{"location":"study/oop/container/","title":"\u5bb9\u5668 \uff08Container\uff09","text":"<p>\u5728 C++ \u4e2d\uff0c\u5bb9\u5668\uff08container\uff09 \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7528\u6765\u5b58\u50a8\u548c\u7ba1\u7406\u4e00\u7ec4\u5143\u7d20\u3002C++ \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u6bcf\u79cd\u5bb9\u5668\u90fd\u6709\u81ea\u5df1\u7684\u7279\u70b9\u548c\u9002\u7528\u573a\u666f\u3002\u5bb9\u5668\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p> <ol> <li> <p>\u5e8f\u5217\u5bb9\u5668\uff08Sequence Containers\uff09    \u5e8f\u5217\u5bb9\u5668\u7ef4\u62a4\u5143\u7d20\u7684\u7ebf\u6027\u987a\u5e8f\uff0c\u5143\u7d20\u4e4b\u95f4\u6309\u4e00\u5b9a\u987a\u5e8f\u6392\u5217\u3002</p> </li> <li> <p><code>std::vector</code>\uff1a\u52a8\u6001\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u5143\u7d20\u53ef\u4ee5\u5728\u672b\u5c3e\u6dfb\u52a0\u6216\u5220\u9664\u3002</p> </li> <li><code>std::deque</code>\uff1a\u53cc\u7aef\u961f\u5217\uff0c\u652f\u6301\u5728\u4e24\u7aef\u5feb\u901f\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\u3002</li> <li><code>std::list</code>\uff1a\u53cc\u5411\u94fe\u8868\uff0c\u652f\u6301\u5728\u4e24\u7aef\u5feb\u901f\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\uff0c\u4f46\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002</li> <li><code>std::array</code>\uff1a\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u5728\u7f16\u8bd1\u65f6\u5df2\u786e\u5b9a\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002</li> <li> <p><code>std::forward_list</code>\uff1a\u5355\u5411\u94fe\u8868\uff0c\u53ea\u652f\u6301\u4ece\u524d\u7aef\u5feb\u901f\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\u3002</p> </li> <li> <p>\u5173\u8054\u5bb9\u5668\uff08Associative Containers\uff09    \u5173\u8054\u5bb9\u5668\u5b58\u50a8\u952e\u503c\u5bf9\u5e76\u6309\u4e00\u5b9a\u7684\u987a\u5e8f\uff08\u901a\u5e38\u662f\u57fa\u4e8e\u952e\u7684\u6392\u5e8f\uff09\u8fdb\u884c\u7ec4\u7ec7\u3002\u5143\u7d20\u4e4b\u95f4\u662f\u901a\u8fc7\u952e\u5173\u8054\u7684\u3002</p> </li> <li> <p><code>std::set</code>\uff1a\u5b58\u50a8\u552f\u4e00\u5143\u7d20\uff0c\u5143\u7d20\u6309\u987a\u5e8f\u6392\u5217\uff0c\u4e0d\u652f\u6301\u91cd\u590d\u3002</p> </li> <li><code>std::map</code>\uff1a\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u952e\u552f\u4e00\uff0c\u6309\u952e\u6392\u5e8f\uff0c\u652f\u6301\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u3002</li> <li><code>std::multiset</code>\uff1a\u7c7b\u4f3c\u4e8e <code>set</code>\uff0c\u4f46\u5141\u8bb8\u5b58\u50a8\u91cd\u590d\u5143\u7d20\u3002</li> <li> <p><code>std::multimap</code>\uff1a\u7c7b\u4f3c\u4e8e <code>map</code>\uff0c\u4f46\u5141\u8bb8\u952e\u91cd\u590d\u3002</p> </li> <li> <p>\u65e0\u5e8f\u5bb9\u5668\uff08Unordered Containers\uff09    \u65e0\u5e8f\u5bb9\u5668\u5b58\u50a8\u952e\u503c\u5bf9\u5e76\u4e0d\u4fdd\u8bc1\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u800c\u662f\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u7ec4\u7ec7\u5143\u7d20\u3002</p> </li> <li> <p><code>std::unordered_set</code>\uff1a\u5b58\u50a8\u552f\u4e00\u5143\u7d20\uff0c\u4e0d\u4fdd\u8bc1\u987a\u5e8f\u3002</p> </li> <li><code>std::unordered_map</code>\uff1a\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u952e\u552f\u4e00\uff0c\u4e0d\u4fdd\u8bc1\u987a\u5e8f\u3002</li> <li><code>std::unordered_multiset</code>\uff1a\u5b58\u50a8\u5143\u7d20\uff0c\u5141\u8bb8\u91cd\u590d\u5143\u7d20\uff0c\u4e0d\u4fdd\u8bc1\u987a\u5e8f\u3002</li> <li> <p><code>std::unordered_multimap</code>\uff1a\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u952e\u5141\u8bb8\u91cd\u590d\uff0c\u4e0d\u4fdd\u8bc1\u987a\u5e8f\u3002</p> </li> <li> <p>\u9002\u914d\u5668\u5bb9\u5668\uff08Container Adapters\uff09    \u9002\u914d\u5668\u5bb9\u5668\u4e3a\u5176\u4ed6\u5bb9\u5668\u63d0\u4f9b\u4e0d\u540c\u7684\u63a5\u53e3\uff0c\u5b83\u4eec\u672c\u8d28\u4e0a\u662f\u5bf9\u5176\u4ed6\u5bb9\u5668\u7684\u5c01\u88c5\u3002</p> </li> <li> <p><code>std::stack</code>\uff1a\u6808\uff0c\u652f\u6301 LIFO\uff08\u540e\u8fdb\u5148\u51fa\uff09\u64cd\u4f5c\uff0c\u5e95\u5c42\u5bb9\u5668\u901a\u5e38\u662f <code>deque</code> \u6216 <code>vector</code>\u3002</p> </li> <li><code>std::queue</code>\uff1a\u961f\u5217\uff0c\u652f\u6301 FIFO\uff08\u5148\u8fdb\u5148\u51fa\uff09\u64cd\u4f5c\uff0c\u5e95\u5c42\u5bb9\u5668\u901a\u5e38\u662f <code>deque</code>\u3002</li> <li><code>std::priority_queue</code>\uff1a\u4f18\u5148\u961f\u5217\uff0c\u652f\u6301\u6309\u4f18\u5148\u7ea7\u987a\u5e8f\u8bbf\u95ee\u5143\u7d20\uff0c\u5e95\u5c42\u5bb9\u5668\u901a\u5e38\u662f <code>vector</code>\u3002</li> </ol>"},{"location":"study/oop/container/#_1","title":"\u793a\u4f8b\u4ee3\u7801\uff1a\u4f7f\u7528\u4e0d\u540c\u7684\u5bb9\u5668","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;set&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n\nint main() {\n    // \u4f7f\u7528 std::vector\n    std::vector&lt;int&gt; vec = {1, 2, 3, 4};\n    vec.push_back(5); // \u5411 vector \u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\n    for (int v : vec) {\n        std::cout &lt;&lt; v &lt;&lt; \" \"; // \u8f93\u51fa: 1 2 3 4 5\n    }\n    std::cout &lt;&lt; std::endl;\n\n    // \u4f7f\u7528 std::list\n    std::list&lt;int&gt; lst = {10, 20, 30};\n    lst.push_front(5); // \u5728 list \u524d\u7aef\u6dfb\u52a0\u5143\u7d20\n    for (int l : lst) {\n        std::cout &lt;&lt; l &lt;&lt; \" \"; // \u8f93\u51fa: 5 10 20 30\n    }\n    std::cout &lt;&lt; std::endl;\n\n    // \u4f7f\u7528 std::set\n    std::set&lt;int&gt; s = {3, 1, 4, 1, 5};\n    for (int x : s) {\n        std::cout &lt;&lt; x &lt;&lt; \" \"; // \u8f93\u51fa: 1 3 4 5\n    }\n    std::cout &lt;&lt; std::endl;\n\n    // \u4f7f\u7528 std::map\n    std::map&lt;int, std::string&gt; m;\n    m[1] = \"apple\";\n    m[2] = \"banana\";\n    m[3] = \"cherry\";\n    for (const auto&amp; p : m) {\n        std::cout &lt;&lt; p.first &lt;&lt; \": \" &lt;&lt; p.second &lt;&lt; std::endl; // \u8f93\u51fa\u952e\u503c\u5bf9\n    }\n\n    // \u4f7f\u7528 std::unordered_map\n    std::unordered_map&lt;int, std::string&gt; umap;\n    umap[10] = \"orange\";\n    umap[20] = \"grape\";\n    umap[30] = \"melon\";\n    for (const auto&amp; p : umap) {\n        std::cout &lt;&lt; p.first &lt;&lt; \": \" &lt;&lt; p.second &lt;&lt; std::endl; // \u8f93\u51fa\u952e\u503c\u5bf9\uff0c\u987a\u5e8f\u4e0d\u5b9a\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/cpp/","title":"C++ \u57fa\u7840\u8bed\u6cd5","text":""},{"location":"study/oop/cpp/#_1","title":"\u58f0\u660e\u4e0e\u5b9a\u4e49","text":"<p>\u58f0\u660e\uff1a\u53ea\u662f\u5411\u8ba1\u7b97\u673a\u4ecb\u7ecd\u540d\u5b57\u3002\u4f7f\u7528<code>extern</code>\u5173\u952e\u5b57\uff0c\u4f46\u662f\u5982\u679c\u662f\u51fd\u6570\u53ef\u4ee5\u4e0d\u4f7f\u7528\uff0c\u4e0d\u5e26\u51fd\u6570\u4f53\u7684\u51fd\u6570\u540d\u8fde\u540c\u53c2\u6570\u8868\u6216\u8fd4\u56de\u503c\uff0c\u81ea\u52a8\u5730\u4f5c\u4e3a\u4e00\u4e2a \u58f0\u660e\u3002 \u5b9a\u4e49\uff1a\u4e3a\u540d\u5b57\u5206\u914d\u5185\u5b58\uff0c\u5b83\u53ef\u4ee5\u540c\u65f6\u662f\u58f0\u660e\u3002</p>"},{"location":"study/oop/cpp/#_2","title":"\u5934\u6587\u4ef6","text":"<p><code>#include</code>\u7684\u5934\u6587\u4ef6\u5982\u679c\u7528\u6807\u51c6\u5934\u6587\u4ef6\u6216\u6807\u51c6\u5e93\u4e00\u822c\u7528<code>&lt;&gt;</code>\uff0c\u800c\u81ea\u5b9a\u4e49\u5934\u6587\u4ef6\u4e00\u822c\u7528<code>\"\"</code>\uff0c\u4fbf\u4e8e\u533a\u5206\u3002</p> <p>C++\u6807\u51c6\u5e93\u5934\u6587\u4ef6\u4e0d\u52a0<code>.h</code>\uff0c\u800cC\u6807\u51c6\u5e93\u5934\u6587\u4ef6\u9700\u8981\u52a0\uff0c\u5982\u679c\u5728 C++ \u4e2d\u4f7f\u7528\uff0c\u901a\u5e38\u4f7f\u7528 <code>c</code> \u524d\u7f00\u5e76\u53bb\u6389 <code>.h</code> \u540e\u7f00\uff0c\u5982<code>#include&lt;cstdio&gt;</code></p> <p>\u9632\u6b62\u5934\u6587\u4ef6\u591a\u6b21\u58f0\u660e\u5bfc\u81f4\u7684\u9519\u8bef\uff1a</p> <pre><code>// myheader.h\n#ifndef MYHEADER_H   // \u4f7f\u7528\u5934\u6587\u4ef6\u540d\u4f5c\u4e3a\u524d\u7f00\n#define MYHEADER_H\n// \u5934\u6587\u4ef6\u7684\u5b9e\u9645\u5185\u5bb9\n#endif\n\n//C++\u4e2d\u4e5f\u53ef\u4ee5\u5728\u5934\u6587\u4ef6\u4e2d\u4f7f\u7528\u5982\u4e0b\u7b80\u5316\u7684\u9884\u5904\u7406\u6307\u4ee4\n#pragma once\n</code></pre> <p>\u5934\u6587\u4ef6\u591a\u6b21\u58f0\u660e\u7684\u4f8b\u5b50\uff1a<code>main.cpp</code>\u4e2dinclude <code>A.h</code>\u548c<code>B.h</code>\uff0c\u800c<code>B.h</code>\u4e2d\u4e5finclude\u4e86<code>A.h</code>\uff0c\u90a3\u4e48<code>A.h</code>\u5c31\u5728<code>main.cpp</code>\u4e2d\u58f0\u660e\u4e86\u4e24\u6b21\u3002</p>"},{"location":"study/oop/cpp/#_3","title":"\u4f5c\u7528\u57df","text":""},{"location":"study/oop/cpp/#_4","title":"\u8303\u56f4\u5206\u89e3","text":"<p>\u4f7f\u7528\u8303\u56f4\u5206\u89e3\u7b26/\u4f5c\u7528\u57df\u89e3\u6790\u7b26 <code>::</code> \u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u8303\u56f4\uff08\u5168\u5c40\u3001\u7c7b\u5185\u3001\u7ed3\u6784\u4f53\u5185\uff09\u7684\u53d8\u91cf\u548c\u51fd\u6570\u3002</p> <p>\u5168\u5c40\u8303\u56f4<code>::\u51fd\u6570/\u53d8\u91cf\u540d</code>\uff1a</p> <pre><code>int a;\nvoid f(){}\nstruct S{\n    int a;\n    void f(){}\n}\nvoid S::f(){\n    ::a++; //the gobal a\n    ::f(); //the gobal f\uff0c\u6ca1\u6709::\u5219\u4f1a\u9012\u5f52\u5b9a\u4e49\n}\n</code></pre>"},{"location":"study/oop/cpp/#struct","title":"struct","text":"<p>C++\u4e2d\u7684\u7ed3\u6784\u4f53\u548c\u7c7b\u5f88\u50cf\uff0c\u7ed3\u6784\u4f53\u4e2d\u5982\u679c\u6ca1\u6709\u8303\u56f4\u9650\u5b9a\u7b26\uff0c\u9ed8\u8ba4\u4e3a<code>pubilc</code>\uff0c\u7c7b\u4e2d\u9ed8\u8ba4\u4e3a<code>private</code>\u3002</p> <p>\u7ed3\u6784\u4f53\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\uff0c\u4f46\u662fC\u4e0d\u884c\uff0cC\u7684\u7ed3\u6784\u4f53\u53ea\u80fd\u5305\u542b\u6570\u636e\u6210\u5458\u3002C\u3001C++\u7ed3\u6784\u4f53\u90fd\u53ef\u4ee5\u5d4c\u5957\u3002</p> <p>\u7ed3\u6784\u4f53\u4e5f\u53ef\u4ee5\u6709\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>struct MyStruct {\n    int x;\n    int y;\n    // \u6784\u9020\u51fd\u6570\n    MyStruct(int a, int b) : x(a), y(b) {}\n    // \u6210\u5458\u51fd\u6570\uff0c\u76f4\u63a5\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u5e76\u8f93\u51fa\n    void display() {\n        cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; \", y = \" &lt;&lt; y &lt;&lt; endl;\n    }\n};\nint main() {\n    MyStruct obj(5, 10);  // \u521b\u5efa\u7ed3\u6784\u4f53\u5bf9\u8c61\u5e76\u8c03\u7528\u6784\u9020\u51fd\u6570\n    obj.display();         // \u8c03\u7528\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570\n}\n</code></pre> <p>\u58f0\u660e\u4e3a\u9759\u6001\u7684\u53d8\u91cf\u548c\u51fd\u6570\u53ef\u5728\u7ed3\u6784\u4f53\u5916\u4f7f\u7528\u8303\u56f4\u5206\u89e3\u8fd0\u7b97\u7b26<code>::</code>\u6765\u8bbf\u95ee\u3002 \u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u51fd\u6570\u662f\u5c5e\u4e8e\u6574\u4e2a\u7ed3\u6784\u4f53/\u7c7b\u7684\uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u4f53/\u7c7b\u7684\u67d0\u4e2a\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5373\u4f7f\u7ed3\u6784\u4f53/\u7c7b\u7684\u9759\u6001\u6210\u5458\u88ab\u58f0\u660e\u4e3a <code>private</code>\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u5916\u8bbf\u95ee\u3002</p> <pre><code>struct MyStruct {\nprivate:\nstatic bool is_struct;\n\npublic:\n    static int x;  // \u9759\u6001\u6570\u636e\u6210\u5458\n    static void showX() {  // \u9759\u6001\u6210\u5458\u51fd\u6570\n        cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; endl;\n    }\n};\n\nMystruct::is_struct=false;\nMystruct::x=10;\nMystruct::showX();\n</code></pre>"},{"location":"study/oop/cpp/#_5","title":"\u7f3a\u7701\u53c2\u6570","text":"<p>\u7f3a\u7701\u53c2\u6570\u662f\u5728\u51fd\u6570\u58f0\u660e\u65f6\u5c31\u5df2\u7ed9\u5b9a\u7684\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u6211\u4eec\u5728\u8c03\u7528\u51fd\u6570\u65f6\u6ca1\u6709\u6307\u5b9a\u8fd9\u4e00\u53c2\u6570\u7684\u503c\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u5730\u63d2\u4e0a\u8fd9\u4e2a\u503c\u3002</p> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u53ea\u6709\u53c2\u6570\u5217\u8868\u7684\u540e\u90e8\u53c2\u6570\u624d\u53ef\u662f\u7f3a\u7701\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u53ef\u4ee5\u5728\u4e00\u4e2a\u7f3a\u7701\u53c2\u6570\u540e\u9762\u53c8\u8ddf\u4e00\u4e2a\u975e\u7f3a\u7701\u7684\u53c2\u6570\u3002</li> <li>\u4e00\u65e6\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u7f3a\u7701\u53c2\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u540e\u9762\u7684\u6240\u6709\u53c2\u6570\u90fd\u5fc5\u987b\u662f\u7f3a\u7701\u7684\u3002\uff08\u8fd9\u53ef\u4ee5\u4ece\u7b2c\u4e00\u6761\u4e2d\u5bfc\u51fa\u3002\uff09</li> <li>\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u53ef\u4ee5\u5728\u51fd\u6570\u58f0\u660e\u4e2d\u6307\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u6307\u5b9a\uff0c\u4f46\u4e0d\u80fd\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u4e2d\u90fd\u7ed9\u51fa\u9ed8\u8ba4\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9ed8\u8ba4\u53c2\u6570\u91cd\u590d\u5b9a\u4e49\u7684\u9519\u8bef\u3002</li> </ul> <pre><code>// \u51fd\u6570\u58f0\u660e\uff1a\u5728\u58f0\u660e\u65f6\u4e3a\u53c2\u6570\u6307\u5b9a\u9ed8\u8ba4\u503c\nvoid greet(string name = \"Guest\", int times = 1);\nint main()...\n// \u51fd\u6570\u5b9a\u4e49\uff1a\u4e0d\u9700\u8981\u518d\u6b21\u6307\u5b9a\u9ed8\u8ba4\u503c\nvoid greet(string name/*=\"Guest\"*/, int times/*=1*/) {\n    for (int i = 0; i &lt; times; ++i) {\n        cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; \"!\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8fd9\u548cpython\u7c7b\u4f3c\u3002</p>"},{"location":"study/oop/cpp/#void","title":"void*","text":"<p>C++\u5141\u8bb8\u5c06\u4efb\u4f55\u7c7b\u578b\u7684\u6307\u9488\u8d4b\u7ed9 <code>void *</code>\uff08\u8fd9\u662f <code>void*</code> \u7684\u6700\u521d\u7684\u610f\u56fe\uff0c\u5b83\u8981\u6c42 <code>void*</code> \u8db3\u591f\u5927\uff0c\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u7684\u6307\u9488\uff09\uff0c\u4f46\u4e0d\u5141\u8bb8\u5c06<code>void*</code> \u6307\u9488\u8d4b\u7ed9\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u7684\u6307\u9488\u3002\u56e0\u4e3aC++\u662f\u7c7b\u578b\u4e25\u683c\u7684\u3002\u5728C\u4e2d\u4e24\u8005\u90fd\u53ef\u4ee5\u3002</p>"},{"location":"study/oop/cpp/#new-and-delete","title":"new and delete","text":"<p>\u7528\u4e8e\u5806\u4e0a\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\uff0c\u4e0eC\u4e2d<code>malloc</code>\u548c<code>free</code>\u76f8\u4f3c\u3002</p> <pre><code>int* pt=new int;\nint* pt1=new int[10];\ndelete pt;\ndelete[] pt1;\n\nMyClass* obj = new MyClass;  // \u8c03\u7528\u6784\u9020\u51fd\u6570(constructor)\ndelete obj;                  // \u8c03\u7528\u6790\u6784\u51fd\u6570(destructor)\u5e76\u91ca\u653e\u5185\u5b58\n</code></pre>"},{"location":"study/oop/cpp/#reference","title":"Reference","text":"<p>reference(\u5f15\u7528)\u672c\u8d28\u662f\u4e2a\u53d8\u91cf\u7684\u522b\u540d\uff0c\u5f15\u7528\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u522b\u540d\u8bbf\u95ee\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u590d\u5236\u5176\u503c\u3002<code>type &amp;ref = variable</code>\u3002 \u7279\u70b9\uff1a</p> <ul> <li>\u5f15\u7528\u5728\u58f0\u660e\u65f6\u5c31\u5fc5\u987b\u521d\u59cb\u5316\u4e14\u4e4b\u540e\u4e0d\u80fd\u6539\u53d8\u5f15\u7528\u7684\u5bf9\u8c61\u3002</li> <li>\u5f15\u7528\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u522b\u540d\uff0c\u5b83\u548c\u539f\u59cb\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u5185\u5b58\u5730\u5740\u3002</li> <li>\u5f15\u7528\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u907f\u514d\u4e86\u5927\u5bf9\u8c61\u7684\u590d\u5236\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u5916\u90e8\u5bf9\u8c61\u7684\u503c\u3002</li> </ul> <p>\u7528\u6cd5\uff1a</p> <pre><code>void increment(int &amp;x) {\n    x++;  // \u901a\u8fc7\u5f15\u7528\u4fee\u6539\u5916\u90e8\u53d8\u91cf\u7684\u503c\n}\n\n\nint&amp; getMax(int &amp;a, int &amp;b) {\n    return (a &gt; b) ? a : b;  // \u8fd4\u56de\u5f15\u7528\n}\nint x=10,y=20;\ngetMax(x,y)=30;  //\u73b0\u5728y=30\n\n\nvoid printValue(const int &amp;x) {   //\u4f20\u9012\u5927\u578b\u5bf9\u8c61/\u7ed3\u6784\u4f53\u65f6\u5c24\u5176\u91cd\u8981\uff0c\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u590d\u5236\uff0c\u540c\u65f6\u4fdd\u62a4\u539f\u59cb\u6570\u636e\u3002\n    std::cout &lt;&lt; x &lt;&lt; std::endl;  // \u4e0d\u80fd\u4fee\u6539 x\n}\nint x;\nprintValue(x);\n</code></pre> <p>\u4e0e\u6307\u9488\u7684\u533a\u522b\uff1a</p> \u7279\u6027 \u5f15\u7528\uff08Reference\uff09 \u6307\u9488\uff08Pointer\uff09 \u8bed\u6cd5 <code>type &amp;ref = variable;</code> <code>type* ptr = &amp;variable;</code> \u662f\u5426\u53ef\u4e3a\u7a7a \u4e0d\u53ef\u4e3a\u7a7a\uff08\u5fc5\u987b\u5f15\u7528\u6709\u6548\u7684\u5bf9\u8c61\uff09 \u53ef\u4ee5\u4e3a\u7a7a\uff08\u6307\u5411 <code>nullptr</code>\uff09 \u662f\u5426\u53ef\u4ee5\u4fee\u6539\u6307\u5411\u5bf9\u8c61 \u4e0d\u53ef\u4ee5\u4fee\u6539\u5f15\u7528\u6307\u5411\u7684\u5bf9\u8c61 \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6307\u9488\u6765\u6539\u53d8\u5b83\u6307\u5411\u7684\u5bf9\u8c61 \u5185\u5b58\u5f00\u9500 \u5f15\u7528\u6ca1\u6709\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500\uff0c\u5b83\u662f\u4e00\u4e2a\u522b\u540d \u6307\u9488\u6709\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500\uff08\u5b58\u50a8\u6307\u9488\u672c\u8eab\u7684\u5730\u5740\uff09 \u4f7f\u7528\u573a\u666f \u66f4\u5e38\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3001\u8fd4\u56de\u5f15\u7528\u7b49 \u66f4\u7075\u6d3b\uff0c\u53ef\u4ee5\u6307\u5411\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u4f46\u9700\u8981\u7ba1\u7406\u5185\u5b58 \u5e38\u91cf\u5f15\u7528 <code>const type &amp;</code> <code>const type*</code> <p>\u9650\u5236\uff1a</p> <ul> <li>No pointers to reference: <code>int&amp; * p;//illegal;</code></li> <li>No array of references</li> </ul>"},{"location":"study/oop/cpp/#const","title":"const","text":"<p>C++\u4e2d\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u58f0\u660e\u5e38\u91cf\u6216\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u8868\u793a\u6570\u636e\u4e0d\u53ef\u4fee\u6539\u3002</p> <ul> <li>\u7f16\u8bd1\u65f6\u5e38\u91cf\uff1a\u7f16\u8bd1\u65f6\u5c31\u88ab\u786e\u5b9a\u4e0b\u6765\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u76f4\u63a5\u66ff\u6362\u5e38\u91cf\u503c\uff0c\u4e0d\u4f1a\u5b58\u50a8\u5728\u8fd0\u884c\u65f6\u5185\u5b58</li> <li><code>const int x=1;</code></li> <li>\u8fd0\u884c\u65f6\u5e38\u91cf\uff1a\u8fd0\u884c\u65f6\u624d\u80fd\u786e\u5b9a\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u786e\u5b9a\u503c\uff1a\u5185\u5b58\u4e2d\u50a8\u5b58\u5176\u503c</li> <li><code>const int x;</code></li> </ul> <p>\u4f7f\u7528\u65b9\u5f0f</p> <p><code>const</code> \u53ef\u5728\u7c7b\u578b\u524d\u4e5f\u53ef\u5728\u7c7b\u578b\u540e\uff1a<code>const int x;</code>\u548c<code>int const x</code>\u76f8\u540c\u3002\u524d\u8005\u66f4\u4e3a\u5e38\u89c1\u3002</p>"},{"location":"study/oop/cpp/#constexpr","title":"constexpr","text":"<p>constexpr \u58f0\u660e\u7684\u5e38\u91cf\u8981\u6c42\u503c\u5728\u7f16\u8bd1\u65f6\u53ef\u786e\u5b9a</p>"},{"location":"study/oop/cpp/#pointers-and-const","title":"pointers and const","text":"<pre><code>char* const p='123'; //p is a const pointer\np++;//error\n*p='abc'//right\n\nconst char* q='abc'; //q* is a const char\n*q='1';//error\nq++; //right\n\nchar const* r = &amp;p;//r is a const char\n</code></pre>"},{"location":"study/oop/cpp/#_6","title":"\u5b57\u7b26\u4e32","text":"<ul> <li>\"\" \u4ee3\u8868\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff08const char[]\uff09</li> <li>'' \u4ee3\u8868\u5b57\u7b26\u5b57\u9762\u91cf\uff08char\uff09</li> </ul> <pre><code>char a = \"A\"; //\u9519\u8bef \"A\" \u8868\u793a\u5b57\u7b26\u4e32\uff0c\u4e3a char[2]\nchar* b = 'B';//\u9519\u8bef 'B' \u662f\u4e2a\u5b57\u7b26\uff0c\u4e3achar\n</code></pre>"},{"location":"study/oop/friend/","title":"\u53cb\u5143\u51fd\u6570\uff08Friend Function\uff09","text":"<ul> <li> <p>\u5728 C++ \u4e2d\uff0c\u53cb\u5143\u51fd\u6570\uff08Friend Function\uff09 \u662f\u4e00\u4e2a\u80fd\u591f\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\u548c\u4fdd\u62a4\u6210\u5458\uff08\u5373\u901a\u5e38\u65e0\u6cd5\u8bbf\u95ee\u7684\u6210\u5458\uff09\u7684\u51fd\u6570\uff0c\u5c3d\u7ba1\u5b83\u5e76\u4e0d\u5c5e\u4e8e\u8be5\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u7c7b\u5916\u90e8\u7684\u72ec\u7acb\u51fd\u6570\u3001\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3001\u6216\u53e6\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002</p> </li> <li> <p>\u5f53\u9700\u8981\u4e0e\u5176\u4ed6\u7c7b\u7684\u79c1\u6709\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u6216\u8005\u5f53\u4e24\u4e2a\u7c7b\u9700\u8981\u7d27\u5bc6\u5408\u4f5c\u65f6\uff0c\u901a\u5e38\u4f7f\u7528\u53cb\u5143\u51fd\u6570\u6765\u63d0\u9ad8\u5c01\u88c5\u6027\u548c\u53ef\u8bbf\u95ee\u6027\u3002</p> </li> </ul>"},{"location":"study/oop/friend/#_1","title":"\u5982\u4f55\u5b9a\u4e49","text":"<ol> <li>\u5728\u7c7b\u5b9a\u4e49\u4e2d\u58f0\u660e\u53cb\u5143\u51fd\u6570\uff1a</li> <li> <p>\u901a\u8fc7\u5728\u7c7b\u5185\u90e8\u4f7f\u7528 <code>friend</code> \u5173\u952e\u5b57\u6765\u58f0\u660e\u67d0\u4e2a\u51fd\u6570\u4e3a\u53cb\u5143\u51fd\u6570\u3002</p> </li> <li> <p>\u53cb\u5143\u51fd\u6570\u6ca1\u6709 <code>this</code> \u6307\u9488\uff1a</p> </li> <li>\u53cb\u5143\u51fd\u6570\u4e0d\u5c5e\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709 <code>this</code> \u6307\u9488\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u9664\u975e\u5b83\u88ab\u58f0\u660e\u4e3a\u53cb\u5143\u3002</li> </ol>"},{"location":"study/oop/friend/#_2","title":"\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>class MyClass {\nprivate:\n    int x;\npublic:\n    MyClass(int val) : x(val) {}  // \u6784\u9020\u51fd\u6570\n\n    // \u58f0\u660e\u53cb\u5143\u51fd\u6570\n    friend void printValue(const MyClass&amp; obj);  // \u53cb\u5143\u51fd\u6570\u58f0\u660e\n};\n\n// \u53cb\u5143\u51fd\u6570\u5b9a\u4e49\nvoid printValue(const MyClass&amp; obj) {\n    // \u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee MyClass \u7684\u79c1\u6709\u6210\u5458\n    cout &lt;&lt; \"The value of x is: \" &lt;&lt; obj.x &lt;&lt; endl;\n}\n\nint main() {\n    MyClass obj(10);\n    printValue(obj);  // \u8c03\u7528\u53cb\u5143\u51fd\u6570\uff0c\u8f93\u51fa\uff1aThe value of x is: 10\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/friend/#_3","title":"\u53cb\u5143\u51fd\u6570\u7684\u7279\u70b9","text":"<ol> <li>\u4e0d\u5c5e\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff1a\u5c3d\u7ba1\u662f\u53cb\u5143\u51fd\u6570\uff0c\u5b83\u4e0d\u5c5e\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u56e0\u6b64\u6ca1\u6709 <code>this</code> \u6307\u9488\u3002</li> <li>\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u548c\u4fdd\u62a4\u6210\u5458\uff1a\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\u548c\u4fdd\u62a4\u6210\u5458\uff0c\u5373\u4f7f\u5b83\u4eec\u5728\u5916\u90e8\uff0c\u4f46\u662f\u9700\u8981\u901a\u8fc7\u7c7b\u7684\u5bf9\u8c61\u8bbf\u95ee\uff0c\u4e0d\u80fd\u5411\u7c7b\u5185\u51fd\u6570\u4e00\u6837\u76f4\u63a5\u8bbf\u95ee\u3002</li> <li>\u4e0d\u7ee7\u627f\uff1a\u5982\u679c\u4e00\u4e2a\u7c7b\u7684\u67d0\u4e2a\u6210\u5458\u51fd\u6570\u662f\u53cb\u5143\u51fd\u6570\uff0c\u8fd9\u4e2a\u53cb\u5143\u5173\u7cfb\u4e0d\u4f1a\u88ab\u7ee7\u627f\u7ed9\u6d3e\u751f\u7c7b\u3002</li> <li>\u53cb\u5143\u5173\u7cfb\u662f\u5355\u5411\u7684\uff1a\u5982\u679c\u7c7b A \u7684\u6210\u5458\u51fd\u6570\u662f\u7c7b B \u7684\u53cb\u5143\u51fd\u6570\uff0c\u7c7b B \u5e76\u4e0d\u80fd\u8bbf\u95ee\u7c7b A \u7684\u79c1\u6709\u6210\u5458\uff0c\u9664\u975e A \u4e5f\u58f0\u660e B \u4e3a\u53cb\u5143\u3002</li> </ol>"},{"location":"study/oop/friend/#_4","title":"\u591a\u4e2a\u53cb\u5143\u51fd\u6570\u793a\u4f8b\uff1a","text":"<p>\u4f60\u53ef\u4ee5\u5c06\u591a\u4e2a\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\uff0c\u5305\u62ec\u7c7b\u5916\u90e8\u7684\u51fd\u6570\u3001\u6210\u5458\u51fd\u6570\uff0c\u751a\u81f3\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A {\nprivate:\n    int valueA;\npublic:\n    A(int val) : valueA(val) {}\n\n    // friend class B;      //\u6574\u4e2a\u7c7b B \u7684\u6240\u6709\u6210\u5458\u90fd\u62e5\u6709\u5bf9\u7c7b A \u7684\u8bbf\u95ee\u6743\u9650\n    friend void B::showValue(A&amp;, a);// \u7279\u5b9a\u51fd\u6570\u5bf9\u7c7bA\u6709\u8bbf\u95ee\u6743\u9650\n};\n\nclass B {\npublic:\n    void showValue(A&amp; a) {\n        // \u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee A \u7c7b\u7684\u79c1\u6709\u6210\u5458\n        cout &lt;&lt; \"The value of A's private member is: \" &lt;&lt; a.valueA &lt;&lt; endl;\n    }\n};\n\nint main() {\n    A a(5);\n    B b;\n    b.showValue(a);  // \u8f93\u51fa\uff1aThe value of A's private member is: 5\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/overload/","title":"\u91cd\u8f7d\uff08overloading\uff09","text":"<p>\u5728 C++ \u4e2d\uff0c\u91cd\u8f7d\uff08Overloading\uff09 \u5141\u8bb8\u5728\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5b9a\u4e49\u591a\u4e2a\u540d\u79f0\u76f8\u540c\u4f46\u53c2\u6570\u5217\u8868\u4e0d\u540c\u7684\u51fd\u6570\u6216\u8fd0\u7b97\u7b26\u3002\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u8c03\u7528\u65f6\u7684\u4e0a\u4e0b\u6587\uff08\u5982\u53c2\u6570\u7c7b\u578b\u3001\u6570\u91cf\u3001\u987a\u5e8f\uff09\u81ea\u52a8\u9009\u62e9\u6700\u5339\u914d\u7684\u7248\u672c\u3002\u91cd\u8f7d\u7684\u6838\u5fc3\u76ee\u7684\u662f\u63d0\u9ad8\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u548c\u53ef\u8bfb\u6027\u3002</p> <p>C++ \u4e2d\u4e3b\u8981\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u91cd\u8f7d\uff1a\u51fd\u6570\u91cd\u8f7d\u548c\u64cd\u4f5c\u7b26\u91cd\u8f7d\u3002</p>"},{"location":"study/oop/overload/#function-overloading","title":"\u51fd\u6570\u91cd\u8f7d\uff08Function Overloading\uff09","text":"<ul> <li>\u5b9a\u4e49\uff1a\u5728\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5b9a\u4e49\u591a\u4e2a\u540c\u540d\u51fd\u6570\uff0c\u4f46\u5b83\u4eec\u7684\u53c2\u6570\u5217\u8868\uff08\u53c2\u6570\u7c7b\u578b\u3001\u6570\u91cf\u3001\u987a\u5e8f\uff09\u5fc5\u987b\u4e0d\u540c\u3002</li> <li>\u5173\u952e\u70b9\uff1a</li> <li>\u8fd4\u56de\u7c7b\u578b\u4e0d\u80fd\u4f5c\u4e3a\u91cd\u8f7d\u4f9d\u636e\u3002</li> <li>\u5e38\u6210\u5458\u51fd\u6570\u4e0e\u975e\u5e38\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u6784\u6210\u91cd\u8f7d\uff08<code>const</code> \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff09\u3002</li> <li>\u793a\u4f8b\uff1a</li> </ul> <pre><code>void print(int x) { /* \u5904\u7406 int \u7c7b\u578b */ }\nvoid print(double x) { /* \u5904\u7406 double \u7c7b\u578b */ }\nvoid print(const string&amp; s) { /* \u5904\u7406\u5b57\u7b26\u4e32 */ }\n</code></pre> <p>\u5178\u578b\u5e94\u7528\uff1a</p> <ul> <li>\u6784\u9020\u51fd\u6570\u91cd\u8f7d\uff08\u901a\u8fc7\u4e0d\u540c\u53c2\u6570\u521d\u59cb\u5316\u5bf9\u8c61\uff09\u3002</li> <li>\u5de5\u5177\u51fd\u6570\u7684\u591a\u7248\u672c\u652f\u6301\uff08\u5982\u5904\u7406\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684 <code>max</code> \u51fd\u6570\uff09\u3002</li> </ul>"},{"location":"study/oop/overload/#operator-overloading","title":"\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff08Operator Overloading\uff09","text":"<ul> <li>what\uff1a\u5728 C++ \u4e2d\uff0c\u64cd\u4f5c\u7b26\u91cd\u8f7d\u5141\u8bb8\u4f60\u5b9a\u4e49\u6216\u4fee\u6539\u6807\u51c6\u64cd\u4f5c\u7b26\uff08\u5982 <code>+</code>\u3001<code>-</code>\u3001<code>*</code>\u3001<code>[]</code> \u7b49\uff09\u5bf9\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u884c\u4e3a\u3002\u8fd9\u4f7f\u5f97\u4f60\u80fd\u591f\u5728\u81ea\u5b9a\u4e49\u7684\u7c7b\u4e2d\u4f7f\u7528\u5e38\u89c1\u7684\u64cd\u4f5c\u7b26\u6765\u8fdb\u884c\u5bf9\u8c61\u95f4\u7684\u8fd0\u7b97\u6216\u64cd\u4f5c\u3002</li> <li>why\uff1a\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4f7f\u5f97\u81ea\u5b9a\u4e49\u7c7b\u7684\u5bf9\u8c61\u80fd\u591f\u50cf\u5185\u5efa\u6570\u636e\u7c7b\u578b\u4e00\u6837\u8fdb\u884c\u8fd0\u7b97\uff0c\u4ece\u800c\u589e\u5f3a\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u4e0e\u7b80\u6d01\u6027\u3002\u4f8b\u5982\uff0c\u60f3\u8981\u5728\u8868\u793a\u5206\u6570\u7684\u7c7b\u4e2d\u4f7f\u7528 <code>+</code> \u6765\u8868\u793a\u5206\u6570\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u6216\u8005\u60f3\u8981\u8ba9\u4e24\u4e2a\u590d\u6570\u5bf9\u8c61\u901a\u8fc7 <code>*</code> \u6765\u8868\u793a\u590d\u6570\u7684\u4e58\u6cd5\u8fd0\u7b97\u3002</li> </ul>"},{"location":"study/oop/overload/#_1","title":"\u57fa\u672c\u8bed\u6cd5","text":"<pre><code>ReturnType operator&lt;operator_symbol&gt;(Parameters) {\n    // \u51fd\u6570\u4f53\n}\n</code></pre> <ul> <li>operator\uff1a\u64cd\u4f5c\u7b26\u91cd\u8f7d\u7684\u540d\u79f0\uff0c\u4f8b\u5982 <code>operator+</code>\u3001<code>operator-</code> \u7b49 <li>Parameters\uff1a\u64cd\u4f5c\u7b26\u6240\u9700\u8981\u7684\u53c2\u6570\uff0c\u901a\u5e38\u662f\u4e0e\u64cd\u4f5c\u7b26\u76f8\u5bf9\u5e94\u7684\u7c7b\u578b</li>"},{"location":"study/oop/overload/#_2","title":"\u793a\u4f8b\uff1a\u64cd\u4f5c\u7b26\u91cd\u8f7d","text":""},{"location":"study/oop/overload/#1","title":"1. \u91cd\u8f7d\u52a0\u6cd5\u8fd0\u7b97\u7b26 (<code>+</code>)","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u8868\u793a\u4e8c\u7ef4\u70b9\u7684\u7c7b\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u901a\u8fc7 <code>+</code> \u64cd\u4f5c\u7b26\u6765\u8ba1\u7b97\u4e24\u4e2a\u70b9\u7684\u548c\u3002</p> <pre><code>class Point {\nprivate:\n    int x, y;\npublic:\n    Point(int x_val, int y_val) : x(x_val), y(y_val) {}\n\n    // \u91cd\u8f7d\u52a0\u6cd5\u64cd\u4f5c\u7b26\n    Point operator+(const Point&amp; other) {\n        return Point(x + other.x, y + other.y);\n    }\n\n    void print() const {\n        cout &lt;&lt; \"(\" &lt;&lt; x &lt;&lt; \", \" &lt;&lt; y &lt;&lt; \")\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    Point p1(1, 2), p2(3, 4);\n    Point p3 = p1 + p2;  // \u4f7f\u7528\u91cd\u8f7d\u7684\u52a0\u6cd5\u64cd\u4f5c\u7b26\n    p3.print();  // \u8f93\u51fa: (4, 6)\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>operator+</code> \u91cd\u8f7d\u4e86\u52a0\u6cd5\u64cd\u4f5c\u7b26\uff0c\u4f7f\u5f97\u4e24\u4e2a <code>Point</code> \u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7 <code>+</code> \u8fd0\u7b97\u7b26\u8fdb\u884c\u76f8\u52a0\u3002</p>"},{"location":"study/oop/overload/#2","title":"2. \u91cd\u8f7d\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7b26 (<code>&lt;&lt;</code> \u548c <code>&gt;&gt;</code>)","text":"<p>\u4f60\u53ef\u4ee5\u91cd\u8f7d\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7b26\u6765\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0e\u6d41\u5bf9\u8c61\u7684\u4ea4\u4e92\u3002\u901a\u5e38\uff0c<code>&lt;&lt;</code> \u64cd\u4f5c\u7b26\u7528\u4e8e\u8f93\u51fa\uff0c<code>&gt;&gt;</code> \u64cd\u4f5c\u7b26\u7528\u4e8e\u8f93\u5165\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Point {\nprivate:\n    int x, y;\npublic:\n    Point(int x_val = 0, int y_val = 0) : x(x_val), y(y_val) {}\n\n    // \u91cd\u8f7d\u8f93\u51fa\u64cd\u4f5c\u7b26\n    friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Point&amp; p) {\n        os &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n        return os;\n    }\n\n    // \u91cd\u8f7d\u8f93\u5165\u64cd\u4f5c\u7b26\n    friend istream&amp; operator&gt;&gt;(istream&amp; is, Point&amp; p) {\n        is &gt;&gt; p.x &gt;&gt; p.y;\n        return is;\n    }\n};\n\nint main() {\n    Point p;\n    cout &lt;&lt; \"Enter coordinates for the point (x y): \";\n    cin &gt;&gt; p;  // \u4f7f\u7528\u91cd\u8f7d\u7684\u8f93\u5165\u64cd\u4f5c\u7b26\n    cout &lt;&lt; \"The point is: \" &lt;&lt; p &lt;&lt; endl;  // \u4f7f\u7528\u91cd\u8f7d\u7684\u8f93\u51fa\u64cd\u4f5c\u7b26\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/overload/#3","title":"3. \u91cd\u8f7d\u6bd4\u8f83\u8fd0\u7b97\u7b26 (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>)","text":"<p>\u4f60\u53ef\u4ee5\u91cd\u8f7d\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6765\u5b9a\u4e49\u5bf9\u8c61\u4e4b\u95f4\u7684\u6bd4\u8f83\u89c4\u5219\u3002\u4f8b\u5982\uff0c\u91cd\u8f7d <code>==</code> \u64cd\u4f5c\u7b26\u6765\u68c0\u67e5\u4e24\u4e2a <code>Point</code> \u662f\u5426\u76f8\u7b49\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Point {\nprivate:\n    int x, y;\npublic:\n    Point(int x_val = 0, int y_val = 0) : x(x_val), y(y_val) {}\n\n    // \u91cd\u8f7d\u76f8\u7b49\u64cd\u4f5c\u7b26\n    bool operator==(const Point&amp; other) const {\n        return (x == other.x &amp;&amp; y == other.y);\n    }\n\n    void print() const {\n        cout &lt;&lt; \"(\" &lt;&lt; x &lt;&lt; \", \" &lt;&lt; y &lt;&lt; \")\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    Point p1(1, 2), p2(1, 2), p3(2, 3);\n    if (p1 == p2) {\n        cout &lt;&lt; \"p1 is equal to p2\" &lt;&lt; endl;  // \u8f93\u51fa: p1 is equal to p2\n    }\n    if (p1 != p3) {\n        cout &lt;&lt; \"p1 is not equal to p3\" &lt;&lt; endl;  // \u8f93\u51fa: p1 is not equal to p3\n    }\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/overload/#4","title":"4. \u91cd\u8f7d\u6570\u7ec4\u4e0b\u6807\u64cd\u4f5c\u7b26 (<code>[]</code>)","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u8868\u793a\u6570\u7ec4\u7684\u7c7b\uff0c\u5e76\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u4e0b\u6807\u64cd\u4f5c\u7b26\u8bbf\u95ee\u5143\u7d20\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Array {\nprivate:\n    int arr[10];\npublic:\n    Array() {\n        for (int i = 0; i &lt; 10; ++i) {\n            arr[i] = 0;\n        }\n    }\n\n    // \u91cd\u8f7d\u6570\u7ec4\u4e0b\u6807\u64cd\u4f5c\u7b26\n    int&amp; operator[](int index) {\n        if (index &gt;= 0 &amp;&amp; index &lt; 10) {\n            return arr[index];\n        }\n        // \u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\u6216\u8fd4\u56de\u4e00\u4e2a\u65e0\u6548\u503c\n        throw out_of_range(\"Index out of range\");\n    }\n};\n\nint main() {\n    Array a;\n    a[0] = 10;  // \u4f7f\u7528\u91cd\u8f7d\u7684\u4e0b\u6807\u64cd\u4f5c\u7b26\n    cout &lt;&lt; \"a[0] = \" &lt;&lt; a[0] &lt;&lt; endl;  // \u8f93\u51fa: a[0] = 10\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/overload/#5","title":"5. \u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26 (<code>=</code>)","text":"<p>\u5f53\u4f60\u521b\u5efa\u4e00\u4e2a\u7c7b\u65f6\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b9a\u4e49\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u4f46\u5b83\u53ea\u662f\u8fdb\u884c\u6d45\u62f7\u8d1d\uff0c\u5373\u76f4\u63a5\u62f7\u8d1d\u6210\u5458\u53d8\u91cf\u3002\u5982\u679c\u7c7b\u5305\u542b\u6307\u9488\u6216\u52a8\u6001\u5206\u914d\u7684\u8d44\u6e90\uff0c\u901a\u5e38\u9700\u8981\u81ea\u5b9a\u4e49\u8d4b\u503c\u8fd0\u7b97\u7b26\u4ee5\u907f\u514d\u6d45\u62f7\u8d1d\u7684\u95ee\u9898\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MyClass {\nprivate:\n    int* ptr;\npublic:\n    MyClass(int val) : ptr(new int(val)) {}\n\n    // \u81ea\u5b9a\u4e49\u8d4b\u503c\u8fd0\u7b97\u7b26\n    MyClass&amp; operator=(const MyClass&amp; other) {\n        if (this != &amp;other) {  // \u907f\u514d\u81ea\u6211\u8d4b\u503c\n            delete ptr;  // \u5220\u9664\u65e7\u7684\u8d44\u6e90\n            ptr = new int(*other.ptr);  // \u5206\u914d\u65b0\u8d44\u6e90\n        }\n        return *this;  // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\n    }\n\n    void print() const {\n        cout &lt;&lt; \"Value: \" &lt;&lt; *ptr &lt;&lt; endl;\n    }\n\n    ~MyClass() {\n        delete ptr;  // \u91ca\u653e\u8d44\u6e90\n    }\n};\n\nint main() {\n    MyClass obj1(10);\n    MyClass obj2(20);\n    obj2 = obj1;  // \u4f7f\u7528\u91cd\u8f7d\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\n    obj2.print();  // \u8f93\u51fa: Value: 10\n    return 0;\n}\n</code></pre>"},{"location":"study/oop/overload/#_3","title":"\u603b\u7ed3\uff1a","text":"<ul> <li>\u64cd\u4f5c\u7b26\u91cd\u8f7d\u5141\u8bb8\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u5bf9\u8c61\u80fd\u591f\u4f7f\u7528\u6807\u51c6\u64cd\u4f5c\u7b26\uff08\u5982 <code>+</code>, <code>-</code>, <code>*</code>, <code>[]</code>, <code>==</code> \u7b49\uff09\u3002</li> <li>\u91cd\u8f7d\u64cd\u4f5c\u7b26\u901a\u5e38\u901a\u8fc7\u7c7b\u7684\u6210\u5458\u51fd\u6570\u6216\u53cb\u5143\u51fd\u6570\u6765\u5b9e\u73b0\u3002</li> <li>\u64cd\u4f5c\u7b26\u91cd\u8f7d\u53ef\u4ee5\u589e\u52a0\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u76f4\u89c2\uff0c\u4f8b\u5982\u8ba9\u590d\u6570\u3001\u5206\u6570\u7b49\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e5f\u80fd\u652f\u6301\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u8f93\u5165\u8f93\u51fa\u7b49\u64cd\u4f5c\u3002</li> </ul>"},{"location":"study/oop/stream/","title":"\u8f93\u5165\u8f93\u51fa\u6d41","text":""},{"location":"study/oop/stream/#_2","title":"\u63d2\u5165\u7b26\u4e0e\u63d0\u53d6\u7b26","text":"<p><code>&lt;&lt;</code>\u63d2\u5165\u7b26\u3002<code>cout</code>\u5bf9\u8c61\u548c<code>cerr</code>\u5bf9\u8c61\u6709\u63d2\u5165\u7b26 <code>&gt;&gt;</code>\u63d0\u53d6\u7b26\u3002\u6bcf\u4e2a\u6570\u636e\u7c7b\u578b\u90fd\u6709\u91cd\u8f7d\u64cd\u4f5c\u7b26 \u201c&gt;&gt;\u201d\uff0c\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u5728\u4e00\u4e2a\u8f93\u5165\u8bed\u53e5\u91cc\u4f5c\u4e3a\u201c &gt;&gt;\u201d\u53f3\u8fb9\u53c2\u6570\u4f7f\u7528\uff1a</p> <pre><code>int a; cin&gt;&gt;a;\nfloat b; cin&gt;&gt;b;\n</code></pre>"},{"location":"study/oop/stream/#_3","title":"\u64cd\u7eb5\u7b97\u5b50","text":"<p><code>std::endl</code>\uff1a\u8f93\u51fa\u6362\u884c\u7b26\u5e76\u5237\u65b0\u8f93\u51fa\u6d41\uff08\u6d88\u9664\u6240\u6709\u5b58\u50a8\u5728\u5185\u90e8\u6d41\u7f13\u51b2\u533a\u91cc\u7684\u8fd8\u6ca1\u6709\u8f93\u51fa\u7684\u5b57\u7b26\uff09 <code>std::flush</code>\uff1a\u5f3a\u5236\u5237\u65b0\u8f93\u51fa\u6d41 <code>std::</code></p>"},{"location":"study/oop/template/","title":"Template\uff08\u6a21\u7248\uff09","text":"<p>\u5728 C++ \u4e2d\uff0c\u6a21\u677f\uff08Template\uff09 \u662f\u4e00\u79cd\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u7684\u673a\u5236\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u7f16\u5199\u4e0e\u5177\u4f53\u7c7b\u578b\u65e0\u5173\u7684\u4ee3\u7801\u3002\u901a\u8fc7\u6a21\u677f\uff0c\u53ef\u4ee5\u5b9a\u4e49\u901a\u7528\u7684\u51fd\u6570\u6216\u7c7b\uff0c\u5728\u4f7f\u7528\u65f6\u6839\u636e\u4f20\u5165\u7684\u7c7b\u578b\u6216\u503c\u81ea\u52a8\u751f\u6210\u5bf9\u5e94\u7248\u672c\u7684\u4ee3\u7801\uff0c\u4ece\u800c\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\u5e76\u63d0\u9ad8\u7075\u6d3b\u6027\u3002</p>"},{"location":"study/oop/template/#_1","title":"\u6a21\u677f\u7684\u7c7b\u578b","text":"<p>C++ \u4e2d\u4e3b\u8981\u6709\u4e24\u79cd\u6a21\u677f\u7c7b\u578b\uff1a</p>"},{"location":"study/oop/template/#1-function-template","title":"1. \u51fd\u6570\u6a21\u677f\uff08Function Template\uff09","text":"<ul> <li>\u5b9a\u4e49\uff1a\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6846\u67b6\uff0c\u901a\u8fc7\u7c7b\u578b\u53c2\u6570\u5316\u652f\u6301\u591a\u79cd\u6570\u636e\u7c7b\u578b\u3002</li> <li> <p>\u8bed\u6cd5\uff1a</p> <pre><code>template &lt;typename T&gt;\nT max(T a, T b) {\n    return (a &gt; b) ? a : b;\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528\uff1a</p> <pre><code>int a = 3, b = 5;\ncout &lt;&lt; max(a, b);  // \u7f16\u8bd1\u5668\u63a8\u5bfc T \u4e3a int\ndouble x = 2.5, y = 3.7;\ncout &lt;&lt; max(x, y);  // T \u63a8\u5bfc\u4e3a double\n</code></pre> </li> </ul>"},{"location":"study/oop/template/#2-class-template","title":"2. \u7c7b\u6a21\u677f\uff08Class Template\uff09","text":"<ul> <li>\u5b9a\u4e49\uff1a\u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u7c7b\uff0c\u6210\u5458\u53d8\u91cf\u6216\u65b9\u6cd5\u7684\u7c7b\u578b\u7531\u6a21\u677f\u53c2\u6570\u51b3\u5b9a\u3002</li> <li> <p>\u8bed\u6cd5\uff1a</p> <pre><code>template &lt;typename T&gt;\nclass Stack {\nprivate:\n    std::vector&lt;T&gt; elements;\npublic:\n    void push(T const&amp; elem) {\n        elements.push_back(elem);\n    }\n    T pop() {\n        T elem = elements.back();\n        elements.pop_back();\n        return elem;\n    }\n};\n</code></pre> </li> <li> <p>\u4f7f\u7528\uff1a</p> <pre><code>Stack&lt;int&gt; intStack;    // \u5b58\u50a8 int \u7684\u6808\nStack&lt;std::string&gt; strStack; // \u5b58\u50a8 string \u7684\u6808\n</code></pre> </li> </ul>"},{"location":"study/oop/template/#_2","title":"\u5176\u4ed6\u6a21\u677f\u7c7b\u578b","text":"<ol> <li>\u53ef\u53d8\u53c2\u6570\u6a21\u677f\uff08Variadic Template\uff09    \u652f\u6301\u4efb\u610f\u6570\u91cf\u548c\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e38\u7528\u4e8e\u5b9e\u73b0\u9012\u5f52\u5c55\u5f00\u7684\u903b\u8f91\uff08\u5982 <code>std::make_shared</code>\uff09\uff1a</li> </ol> <pre><code>template &lt;typename... Args&gt;\nvoid print(Args... args) {\n    // \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5c55\u5f00\u53c2\u6570\u5305\n    (std::cout &lt;&lt; ... &lt;&lt; args) &lt;&lt; \"\\n\";\n}\n</code></pre> <ol> <li>\u975e\u7c7b\u578b\u6a21\u677f\u53c2\u6570    \u6a21\u677f\u53c2\u6570\u53ef\u4ee5\u662f\u5177\u4f53\u7684\u503c\uff08\u5982\u6574\u6570\u3001\u6307\u9488\u3001\u679a\u4e3e\uff09\uff0c\u800c\u975e\u7c7b\u578b\uff1a</li> </ol> <pre><code>template &lt;int N&gt;\nclass Array {\n    int data[N];  // \u56fa\u5b9a\u5927\u5c0f\u4e3a N \u7684\u6570\u7ec4\n};\nArray&lt;10&gt; arr;    // \u751f\u6210\u4e00\u4e2a\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\u7c7b\n</code></pre> <ol> <li>\u522b\u540d\u6a21\u677f\uff08Alias Template\uff09    \u4f7f\u7528 <code>using</code> \u4e3a\u6a21\u677f\u5b9a\u4e49\u7b80\u5316\u522b\u540d\uff1a</li> </ol> <pre><code>template &lt;typename T&gt;\nusing Vec = std::vector&lt;T&gt;;  // \u522b\u540d\u6a21\u677f\nVec&lt;int&gt; v;                  // \u7b49\u4ef7\u4e8e std::vector&lt;int&gt;\n</code></pre>"},{"location":"study/oop/template/#_3","title":"\u5982\u4f55\u5b9a\u4e49\u6a21\u677f","text":"<ol> <li>\u57fa\u672c\u8bed\u6cd5 </li> <li>\u4f7f\u7528 <code>template &lt;...&gt;</code> \u58f0\u660e\u6a21\u677f\u53c2\u6570\u5217\u8868\u3002</li> <li>\u53c2\u6570\u53ef\u4ee5\u662f\u7c7b\u578b\uff08<code>typename T</code> \u6216 <code>class T</code>\uff09\u6216\u975e\u7c7b\u578b\uff08\u5982 <code>int N</code>\uff09\u3002</li> <li> <p>\u793a\u4f8b\uff1a</p> <pre><code>template &lt;typename T, int Size&gt;\nclass Buffer {\n    T data[Size];\n    // ...\n};\n</code></pre> </li> <li> <p>\u663e\u5f0f\u6307\u5b9a\u6a21\u677f\u53c2\u6570    \u5982\u679c\u7f16\u8bd1\u5668\u65e0\u6cd5\u63a8\u5bfc\u7c7b\u578b\uff0c\u9700\u624b\u52a8\u6307\u5b9a\uff1a</p> </li> </ol> <pre><code>template &lt;typename T&gt;\nvoid logType() {\n    std::cout &lt;&lt; typeid(T).name() &lt;&lt; \"\\n\";\n}\nlogType&lt;double&gt;();  // \u663e\u5f0f\u6307\u5b9a T \u4e3a double\n</code></pre>"},{"location":"study/oop/template/#_4","title":"\u4f55\u65f6\u4f7f\u7528\u6a21\u677f\uff1f","text":"<p>\u6a21\u677f\u7684\u5178\u578b\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a</p> <ol> <li> <p>\u901a\u7528\u5bb9\u5668    \u5982 <code>std::vector&lt;T&gt;</code>\u3001<code>std::map&lt;K, V&gt;</code>\uff0c\u652f\u6301\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u3002</p> </li> <li> <p>\u901a\u7528\u7b97\u6cd5    \u5982 <code>std::sort</code>\u3001<code>std::find</code>\uff0c\u53ef\u5904\u7406\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u96c6\u5408\u3002</p> </li> <li> <p>\u907f\u514d\u4ee3\u7801\u91cd\u590d    \u5f53\u591a\u4e2a\u51fd\u6570\u6216\u7c7b\u903b\u8f91\u76f8\u540c\uff0c\u4ec5\u7c7b\u578b\u4e0d\u540c\u65f6\uff08\u4f8b\u5982 <code>max(int, int)</code> \u548c <code>max(double, double)</code>\uff09\u3002</p> </li> <li> <p>\u5143\u7f16\u7a0b\u4e0e\u7f16\u8bd1\u65f6\u8ba1\u7b97    \u5229\u7528\u6a21\u677f\u5728\u7f16\u8bd1\u671f\u751f\u6210\u4ee3\u7801\uff08\u5982 <code>std::tuple</code>\u3001<code>std::enable_if</code>\uff09\u3002</p> </li> </ol>"},{"location":"study/oop/template/#_5","title":"\u6a21\u677f\u7684\u4f18\u7f3a\u70b9","text":"<ul> <li>\u4f18\u70b9\uff1a</li> <li>\u63d0\u9ad8\u4ee3\u7801\u590d\u7528\u6027\uff0c\u51cf\u5c11\u5197\u4f59\u3002</li> <li>\u652f\u6301\u7c7b\u578b\u5b89\u5168\u7684\u6cdb\u578b\u64cd\u4f5c\u3002</li> <li> <p>\u7f16\u8bd1\u65f6\u591a\u6001\uff0c\u65e0\u8fd0\u884c\u65f6\u5f00\u9500\u3002</p> </li> <li> <p>\u7f3a\u70b9\uff1a</p> </li> <li>\u7f16\u8bd1\u65f6\u95f4\u53ef\u80fd\u663e\u8457\u589e\u52a0\u3002</li> <li>\u9519\u8bef\u4fe1\u606f\u6666\u6da9\u96be\u61c2\uff08\u5c24\u5176\u662f\u6a21\u677f\u5d4c\u5957\u65f6\uff09\u3002</li> <li>\u8fc7\u5ea6\u4f7f\u7528\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0\uff08\u751f\u6210\u8fc7\u591a\u5b9e\u4f8b\u5316\u7248\u672c\uff09\u3002</li> </ul>"},{"location":"study/oop/template/#_6","title":"\u603b\u7ed3","text":"<p>\u6a21\u677f\u662f C++ \u6cdb\u578b\u7f16\u7a0b\u7684\u6838\u5fc3\u5de5\u5177\uff0c\u901a\u8fc7\u5c06\u7c7b\u578b\u53c2\u6570\u5316\uff0c\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u5ea6\u7075\u6d3b\u4e14\u7c7b\u578b\u5b89\u5168\u7684\u4ee3\u7801\u3002\u5408\u7406\u4f7f\u7528\u6a21\u677f\u80fd\u591f\u5927\u5e45\u63d0\u5347\u4ee3\u7801\u7684\u62bd\u8c61\u80fd\u529b\u548c\u590d\u7528\u6027\uff0c\u4f46\u9700\u6743\u8861\u7f16\u8bd1\u65f6\u95f4\u548c\u4ee3\u7801\u590d\u6742\u5ea6\u3002</p>"},{"location":"study/oop/template/#_7","title":"\u6a21\u7248\u51fd\u6570","text":""},{"location":"study/oop/template/#_8","title":"\u6a21\u7248\u7c7b","text":""}]}