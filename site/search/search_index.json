{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cool Tea's Site","text":"<p>This is the homepage.</p>"},{"location":"#others","title":"Others","text":""},{"location":"#code-block","title":"Code block","text":"printf.c<pre><code>int a=10;\nprintf(\"Hello World!\");\n</code></pre>"},{"location":"#math","title":"Math","text":"\\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\]"},{"location":"#expandable-note","title":"Expandable note","text":"\u70b9\u51fb\u5c55\u5f00\u5185\u5bb9 an easy note <p>here is how the note tag is implemented.</p> a warning <p>This is a warning</p> <p>\u9009\u9879\u5361\u793a\u4f8b</p> <p>\u9009\u9879\u5361\u5185\u5bb9 <pre><code>def hello():\n    print(\"Hello, world!\")\n</code></pre></p> \u9009\u9879\u5361info <p>\u9009\u9879\u5361\u5185\u5bb9 <pre><code>def hello():\n    print(\"Hello, world!\")\n</code></pre></p>"},{"location":"#footnotes","title":"footnotes","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5e26\u811a\u6ce8\u7684\u53e5\u5b50<sup>1</sup>\u3002 haafasdfeafesdfajjjakadfa;faeipfhawke</p>"},{"location":"#tasklist","title":"Tasklist","text":"<ul> <li> \u5df2\u5b8c\u6210\u4efb\u52a1</li> <li> \u672a\u5b8c\u6210\u4efb\u52a1</li> </ul> <ol> <li> <p>\u8fd9\u662f\u811a\u6ce8\u7684\u5185\u5bb9\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"about/","title":"About cool tea","text":"<p>The tea usually gets cooler over time.</p> <p>Tea that cools may get bitter.</p> <p>There are more than 1 person serving the tea.</p> <p>The tea contains some trival knowledge.</p> <p>Maybe it is a prove to show what the servers have served.</p>"},{"location":"link/","title":"Links","text":"<p>Here are some useful links I appreciate most.</p> <p>:sunny: The logos</p>"},{"location":"img/study/cs/sys2/review/","title":"review of sys2","text":""},{"location":"img/study/cs/sys2/review/#_1","title":"\u786c\u4ef6","text":""},{"location":"img/study/cs/sys2/review/#isa","title":"ISA","text":"<p>Arch:</p> <ol> <li>Stack architecture:</li> <li>Accumulator</li> <li>GPR</li> <li>Register-Memory</li> <li>load-store</li> </ol> <p>addressing mode:</p>"},{"location":"img/study/cs/sys2/review/#pipeline","title":"pipeline","text":"<p>class: </p>"},{"location":"img/study/cs/sys2/review/#performance","title":"Performance","text":"<ol> <li>TP(throughput):\\(TP=\\frac{n}{T}\\) </li> <li>Speedup </li> <li>Efficiency  \u4e3e\u4f8b\uff1a  </li> </ol>"},{"location":"img/study/cs/sys2/review/#hazard","title":"hazard","text":""},{"location":"img/study/cs/sys2/review/#structural","title":"structural","text":"<ol> <li>Df: A required resource is busy</li> <li>Sotution: Stall: insert bubble:addi x0, x0, 0</li> </ol>"},{"location":"img/study/cs/sys2/review/#data","title":"data","text":"<ol> <li>Df:<ol> <li>Data dependency between instructions</li> <li>Need to wait for previous instruction to complete its data read/write</li> </ol> </li> <li>Solution: </li> </ol> <ul> <li>detect and forwarding  </li> <li>Load-Use Hazard Detection: detect and insert bubble </li> </ul>"},{"location":"img/study/cs/sys2/review/#control","title":"control","text":""},{"location":"img/study/cs/sys2/review/#scheduling","title":"Scheduling","text":""},{"location":"img/study/cs/sys2/review/#prohibit-table","title":"Prohibit table","text":""},{"location":"img/study/cs/sys2/review/#initial-confict-vector","title":"initial confict vector","text":"<p>\u4e8c\u8fdb\u5236\u6570\u5b57\u4e32\uff0cprohibit table\u4e2d\u5bf9\u5e94\u6570\u5b57\u7684\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4e3a0</p>"},{"location":"img/study/cs/sys2/review/#state-transition-graph","title":"state transition graph","text":""},{"location":"img/study/cs/sys2/review/#multiple-issue","title":"Multiple issue","text":""},{"location":"img/study/cs/sys2/review/#multiple-issue-processor-type","title":"multiple-issue processor type","text":""},{"location":"img/study/cs/sys2/review/#superscalar","title":"Superscalar","text":""},{"location":"img/study/cs/sys2/review/#vliwvery-long-instruction-word","title":"VLIW(Very Long Instruction Word)","text":""},{"location":"img/study/cs/sys2/review/#exception-hardware-s-interface","title":"Exception&amp; Hardware-S interface","text":""},{"location":"img/study/cs/sys2/review/#_2","title":"\u8f6f\u4ef6","text":"<p>\u57fa\u672c\u8109\u7edc\uff1a process -&gt;process scheduling -&gt;IPC -&gt;thread -&gt;sychronization -&gt;deadlock</p> <p>\u8fdb\u7a0b\uff1a\u8d44\u6e90\u5206\u914d\u548c\u4fdd\u62a4\u5355\u5143 \u7ebf\u7a0b\uff1a\u8d44\u6e90\u6267\u884c\u5355\u5143</p>"},{"location":"img/study/cs/sys2/review/#_3","title":"\u795e\u56fe","text":""},{"location":"img/study/cs/sys2/review/#process","title":"process","text":""},{"location":"img/study/cs/sys2/review/#pcb","title":"PCB","text":""},{"location":"img/study/cs/sys2/review/#process-state","title":"Process State","text":"<ol> <li> <p>new:   :star:forK(syscall):\u8fd4\u56de\u4e24\u503c\uff08\u5bf9\u7236\u8fdb\u7a0b\uff1a\u5b50\u8fdb\u7a0bPID\uff1b\u5b50\u8fdb\u7a0b\uff1a0\uff09\uff0ccopy\u4e24\u4efduser space context(pt regs) \u91cd\u70b9\uff1afork \u51fa\u7684\u8fdb\u7a0b\u5904</p> </li> <li> <p>context_switch:\u5207\u6362stack,pc(\u6d89\u53ca\u786c\u4ef6\u8d44\u6e90\uff0c\u53d1\u751f\u5728kernel) </p> </li> </ol>"},{"location":"img/study/cs/sys2/review/#process-schedulingstar","title":"Process scheduling:star:","text":""},{"location":"img/study/cs/sys2/review/#ipc","title":"IPC","text":""},{"location":"img/study/cs/sys2/review/#thread","title":"Thread","text":"<p>\u8fdb\u7a0b\u7684\u6267\u884c\u5355\u5143\uff1a</p> <p></p> <p>\u8fdb\u7a0b\u6267\u884c\u987a\u5e8f\u56fe \u8fdb\u7a0bfork\u540e\u8fdb\u5165ready\u961f\u5217\u7b49\u5f85</p> <p>1\u4e2a\u8fdb\u7a0b\u4e2d\u6709n\u4e2a\u7ebf\u7a0b\uff1an\u4e2atask struct \u8fdb\u7a0b\u65e0task struct,\u5b83\u7528leader thread\u7684task_struct</p> <p>thread node thread group\u904d\u5386thread</p> <p>user space code\u4e0ekernel space code \u4e0d\u540c thread:user kernel\u4e00\u5bf9\u4e00</p> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u7684pt regs\uff0c\u662fthread kernel stack\u4e00\u90e8\u5206</p>"},{"location":"img/study/cs/sys2/review/#synchronization","title":"synchronization","text":""},{"location":"img/study/cs/sys2/review/#critical-section","title":"critical section","text":"<p>Critical section(\u4e34\u754c\u533a):\u6307\u5728\u5e76\u53d1\u7f16\u7a0b\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5171\u4eab\u7684\u8d44\u6e90\uff08\u4f8b\u5982\u5171\u4eab\u5185\u5b58\u3001\u6587\u4ef6\u3001\u8bbe\u5907\u7b49\uff09\u9700\u8981\u88ab\u8bbf\u95ee\u7684\u90a3\u6bb5\u4ee3\u7801\u3002\u4e34\u754c\u533a\u4e2d\u7684\u4ee3\u7801\u90e8\u5206\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\u8bbf\u95ee\uff0c\u4ee5\u907f\u514d\u7ade\u4e89\u6761\u4ef6\uff08race condition\uff09\u548c\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002</p> <p>solution to critical section \u6761\u4ef6\uff1a</p> <ol> <li>Mutual exclusion(\u4e92\u65a5\u8bbf\u95ee): critical section\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c</li> <li>Progress(\u7a7a\u95f2\u8ba9\u8fdb):\u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\uff0c\u4e14\u6709\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165\u4e34\u754c\u533a\u65f6\uff0c\u5fc5\u5b9a\u6709\u8fdb\u7a0b\u80fd\u591f\u8fdb\u5165\u4e34\u754c\u533a</li> <li>Bounded waiting(\u6709\u9650\u7b49\u5f85\u65f6\u95f4):\u9632\u6b62starvation</li> </ol>"},{"location":"img/study/cs/sys2/review/#petersons-solution","title":"peterson's solution:\u53ea\u80fd\u89e3\u51b3\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u51b2\u7a81","text":"<p>Peterson\u7684\u7b97\u6cd5\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u5171\u4eab\u53d8\u91cf\u6765\u63a7\u5236\u4e24\u4e2a\u8fdb\u7a0b\u7684\u884c\u4e3a\uff1a</p> <ul> <li>flag[0] \u548c flag[1]\uff1a\u8fd9\u4e24\u4e2a\u53d8\u91cf\u8868\u793a\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u662f\u5426\u5e0c\u671b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> <li>turn\uff1a\u8fd9\u4e2a\u53d8\u91cf\u8868\u793a\u5f53\u524d\u8f6e\u5230\u54ea\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> </ul> <p></p> <p>\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u4e09\u4e2a\u6761\u4ef6\uff0c\u4f46\u6709\u5982\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>Only works for two processes case</li> <li>It assumes that LOAD and STORE are atomic</li> <li>\u6ca1\u8003\u8651Instruction reorder\uff1a\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u6307\u4ee4\u91cd\u6392</li> </ul>"},{"location":"img/study/cs/sys2/review/#hardware-solution","title":"Hardware solution","text":"<ol> <li> <p>Memory barriers(\u4e00\u79cd\u5904\u7406\u5668\u6307\u4ee4)\uff1a\u5185\u5b58\u5c4f\u969c\u4f5c\u4e3a\u540c\u6b65\u539f\u8bed\u88ab\u7528\u6765\u5f3a\u5236\u6307\u4ee4\u6309\u7279\u5b9a\u987a\u5e8f\u6267\u884c\uff0c\u786e\u4fdd\u5bf9\u5171\u4eab\u6570\u636e\u7684\u8bbf\u95ee\u6309\u9884\u671f\u53d1\u751f\u3002 </p> </li> <li> <p>\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff1a</p> </li> <li>test and set(TAS):\u5148\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7279\u5b9a\u503c\uff08\u59821\uff09\uff0c\u5e76\u8fd4\u56de\u539f\u503c\u3002\u8be5\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u6210\u529f\u83b7\u53d6\u9501\u3002    </li> <li> <p>compare and swap(CAS):CAS\u64cd\u4f5c\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u4e0e\u63d0\u4f9b\u7684\u9884\u671f\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u5339\u914d\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u7684\u503c\u66ff\u6362\u4e3a\u65b0\u503c\uff1b\u5982\u679c\u4e0d\u5339\u914d\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u5e76\u8fd4\u56de\u5f53\u524d\u503c\u3002CAS\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u786e\u4fdd\u591a\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\u3002    </p> </li> <li> <p>Atomic variables:</p> </li> </ol>"},{"location":"img/study/cs/sys2/review/#mutex-locks","title":"Mutex locks\uff08\u4e92\u65a5\u9501\uff09","text":"<p>\u4fdd\u8bc1\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6301\u6709\u8be5\u9501\u5e76\u8fdb\u5165\u4e34\u754c\u533a\uff08critical section\uff09\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5fc5\u987b\u7b49\u5f85\uff0c\u76f4\u5230\u8be5\u9501\u88ab\u91ca\u653e\u3002 \u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>while(true){\n    acquire lock(atomic)\n    critical section\n    release lock(atomic)\n    remainder section\n}\n</code></pre> <ol> <li>\u81ea\u65cb\u9501\uff1a\u81ea\u65cb\u9501\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u9501\u5b9e\u73b0\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u7ebf\u7a0b\u65e0\u6cd5\u83b7\u5f97\u9501\u65f6\uff0c\u5b83\u4f1a\u4e0d\u65ad\u5faa\u73af\uff08\u81ea\u65cb\uff09\uff0c\u68c0\u67e5\u9501\u7684\u72b6\u6001\u662f\u5426\u53d8\u4e3a\u53ef\u7528\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u9501\u4e89\u7528\u4e0d\u9891\u7e41\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u81ea\u65cb\u4f1a\u6d88\u8017CPU\u8d44\u6e90\u3002 \u5b9e\u73b0\uff1a  acquire \u5230release\u4e4b\u95f4\u5176\u4ed6\u8fdb\u7a0b\u5728busy waiting\u2014\u2014too much spinning\uff0c\u6d6a\u8d39CPU time</li> <li>\u57fa\u4e8e\u961f\u5217\u7684\u9501\uff08Queue-based Locks\uff09\uff1a\u7ebf\u7a0b\u4f1a\u6309\u7167\u8bf7\u6c42\u9501\u7684\u987a\u5e8f\u8fdb\u5165\u961f\u5217\uff0c\u7b49\u5230\u9501\u91ca\u653e\u65f6\u6309\u7167\u987a\u5e8f\u88ab\u5524\u9192\u3002\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u673a\u5236\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6309\u7167\u516c\u5e73\u7684\u987a\u5e8f\u83b7\u5f97\u9501\u3002</li> </ol>"},{"location":"img/study/cs/sys2/review/#semaphore","title":"Semaphore\uff08\u4fe1\u53f7\u91cf\uff09","text":"<p>\u4fe1\u53f7\u91cf\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u7cfb\u7edf\u4e2d\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u589e\u52a0\u6216\u51cf\u5c11\uff0c\u901a\u5e38\u901a\u8fc7\u4e24\u79cd\u64cd\u4f5c\u6765\u63a7\u5236\uff1a</p> <ul> <li> <p>P\u64cd\u4f5c\uff08\u5c1d\u8bd5\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a wait\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u51cf\u5c11\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u82e5\u4fe1\u53f7\u91cf\u5927\u4e8e0\uff0c\u64cd\u4f5c\u6210\u529f\uff0c\u4fe1\u53f7\u91cf\u51cf1\uff1b\u82e5\u4fe1\u53f7\u91cf\u4e3a0\uff0c\u5219\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u5927\u4e8e0\u4e3a\u6b62\u3002</p> </li> <li> <p>V\u64cd\u4f5c\uff08\u589e\u52a0\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a signal\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u589e\u52a0\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u4fe1\u53f7\u91cf\u52a01\uff0c\u5982\u679c\u6709\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u56e0\u4e3a\u4fe1\u53f7\u91cf\u4e3a0\u800c\u88ab\u963b\u585e\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u4f1a\u88ab\u5524\u9192\u7ee7\u7eed\u6267\u884c\u3002 </p> </li> </ul> <p>\u5b9e\u73b0\uff1a  \u5b9e\u73b0\u4f7f\u7528\u4e86spinning lock\u4f1a\u6709</p>"},{"location":"img/study/cs/sys2/review/#deadlock-and-starvation","title":"Deadlock and starvation","text":"<p>Deadlock:</p> <ul> <li>\u6761\u4ef6\uff1a</li> <li>\u4e92\u65a5\u6761\u4ef6\uff08Mutual Exclusion\uff09\uff1a\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u5728\u5360\u7528\u8d44\u6e90\u65f6\uff0c\u8be5\u8d44\u6e90\u4e0d\u80fd\u540c\u65f6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bbf\u95ee\u3002</li> <li>\u5360\u6709\u5e76\u7b49\u5f85\uff08Hold and Wait\uff09\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u5176\u4ed6\u88ab\u5360\u7528\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff08No Preemption\uff09\uff1a\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u4ece\u8fdb\u7a0b\u4e2d\u5265\u593a\uff0c\u53ea\u80fd\u7531\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\uff08Circular Wait\uff09\uff1a\u5b58\u5728\u4e00\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u7684\u5faa\u73af\u94fe\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u91ca\u653e\u8d44\u6e90\u3002 \u793a\u4f8b\uff1a \u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0b A \u548c B \u5404\u81ea\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u53e6\u4e00\u4e2a\u8d44\u6e90\uff1a \u8fdb\u7a0b A \u6301\u6709\u8d44\u6e90 1\uff0c\u7b49\u5f85\u8d44\u6e90 2\u3002 \u8fdb\u7a0b B \u6301\u6709\u8d44\u6e90 2\uff0c\u7b49\u5f85\u8d44\u6e90 1\u3002 A,B\u76f8\u4e92\u7b49\u5f85\u5bfc\u81f4\u6b7b\u9501\u3002</li> </ul> <p>Starvation\uff1a</p>"},{"location":"img/study/cs/sys2/review/#atomic-variable","title":"Atomic variable","text":"<p>\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u7684\u53d8\u91cf\uff0c\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u3002</p>"},{"location":"img/study/cs/sys2/review/#star","title":"\u4e09\u4e2a\u95ee\u9898:star:","text":"<ol> <li>Bounded buffer problem: \u6709\u754c\u7f13\u51b2\u533a\u95ee\u9898\uff0c\u53c8\u79f0\u4e3a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u662f\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u7ecf\u5178\u540c\u6b65\u95ee\u9898\u3002\u5b83\u63cf\u8ff0\u4e86\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u5171\u4eab\u6709\u9650\u7f13\u51b2\u533a\u65f6\u5982\u4f55\u5b89\u5168\u6709\u6548\u5730\u4ea4\u6362\u6570\u636e\u7684\u573a\u666f\u3002</li> </ol> <p> 2. Readers-Writers Problem:</p>"},{"location":"img/study/cs/sys2/review/#deadlock","title":"Deadlock","text":""},{"location":"img/study/cs/sys2/review/#_4","title":"\u56db\u4e2a\u6761\u4ef6","text":"<p>\u6b7b\u9501\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a</p> <ol> <li>\u4e92\u65a5\u6761\u4ef6\uff1a\u6bcf\u4e2a\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u8be5\u8d44\u6e90\u5728\u88ab\u5360\u7528\u65f6\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u3002</li> <li>\u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u81f3\u5c11\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u4e14\u7b49\u5f85\u83b7\u53d6\u5176\u4ed6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff1a\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u5265\u593a\uff0c\u53ea\u80fd\u7b49\u8fdb\u7a0b\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u5b58\u5728\u8fdb\u7a0b\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u7684\u60c5\u51b5\u3002</li> </ol>"},{"location":"img/study/cs/sys2/review/#_5","title":"\u89e3\u51b3\u65b9\u6848","text":""},{"location":"img/study/cs/sys2/review/#deadlock-prevention","title":"Deadlock prevention","text":"<p>\u6253\u7834\u6b7b\u9501\u56db\u4e2a\u6761\u4ef6</p>"},{"location":"img/study/cs/sys2/review/#deadlock-aviodance","title":"Deadlock aviodance","text":"<p>Banker's algorithm:\u5728\u6bcf\u6b21\u8d44\u6e90\u5206\u914d\u524d\uff0c\u7cfb\u7edf\u901a\u8fc7\u6a21\u62df\u662f\u5426\u4f1a\u5bfc\u81f4\u6b7b\u9501\u6765\u5224\u65ad\u662f\u5426\u5206\u914d\u8be5\u8d44\u6e90\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u76ee\u6807\u662f\u786e\u4fdd\u7cfb\u7edf\u5904\u4e8e\u4e00\u4e2a\u201c\u5b89\u5168\u72b6\u6001\u201d\uff0c\u5373\u53ef\u4ee5\u907f\u514d\u6b7b\u9501\u7684\u53d1\u751f\u3002</p> <p></p>"},{"location":"img/study/cs/sys2/review/#deadlock-detection","title":"Deadlock detection","text":"<p>\u5bfb\u627e\u73af \u95ee\u9898\uff1astarvation</p>"},{"location":"img/study/cs/sys2/review/#deadlock-recovery","title":"Deadlock recovery","text":"<p>kill deadlock process</p>"},{"location":"img/study/cs/sys2/review/#software","title":"Software","text":"<p>\u5185\u5b58\u4e0d\u5b58\u6570\u636e\u7c7b\u578b</p> <ol> <li> <p>OS\uff1aresource allocator abstractor, in kernel mode</p> </li> <li> <p>events type in OS:interrupts(hardware) and exception(software)</p> </li> <li>:star:syscall(unprivileged):interface between user and kernel mode</li> <li>U-&gt;K: context is stored in kernel stack(kernel entry does this)</li> <li> <p>signals,timers and timeouts, user input events,process events, faults and exceptions</p> </li> <li> <p>Sys call:</p> </li> <li> <p>system service:</p> </li> <li>static linker:\u79fb\u690d\u6027\u66f4\u5f3a\uff0c\u9700\u5185\u5b58\u5927</li> <li>dynamic linker:</li> <li>loaders: a part of the operating system responsible for loading executable programs (or shared libraries) into memory for execution.  </li> </ol> <p>heap\u53ef\u5171\u4eab\uff1a stack(per-thread)\uff1a\u4e0d\u53ef\u5171\u4eab\uff1a\u6808\u5185\u5b58\u662f\u4e0e\u51fd\u6570\u8c03\u7528\u7d27\u5bc6\u7ed1\u5b9a\u7684\uff0c\u5e76\u4e14\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u88ab\u91ca\u653e\uff0c\u6240\u4ee5\u5b83\u7684\u751f\u547d\u5468\u671f\u662f\u77ed\u6682\u7684\u3001\u5c40\u90e8\u7684\u3002\u56e0\u6b64\uff0c\u6808\u4e0d\u9002\u5408\u5728\u4e0d\u540c\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\uff0c\u6808\u7684\u5185\u5bb9\u4e0d\u80fd\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u4f20\u9012\u3002</p> <ol> <li>Process(resource allocation and protection):</li> <li>PCB:\u5305\u542bPID,pstate,PC</li> </ol>"},{"location":"study/ailogic/","title":"Introduction","text":"<p>\u8fd9\u662f\u300a\u4eba\u5de5\u667a\u80fd\u903b\u8f91\u300b\u7684\u8bfe\u7a0b\u7b14\u8bb0\uff0c\u8bfe\u7a0b\u6559\u6750\u540c\u8bfe\u7a0b\u540d\u79f0\uff0c\u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e\uff08\u6b63\u5728\u51fa\u7248\uff09\u3002 \u8fd9\u91cc\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9\u90fd\u6765\u81ea\u4e66\u672c\u3002</p>"},{"location":"study/ailogic/introduction/","title":"\u8bfe\u7a0b\u5bfc\u8bba","text":"<p>\u65b9\u6cd5\u8bba\u89d2\u5ea6\u4e0a\uff0c\u5b9e\u73b0\u4eba\u5de5\u667a\u80fd\u7684\u9014\u5f84\uff1a</p> <ul> <li>\u7b26\u53f7\u4e3b\u4e49\uff1a\u4f7f\u7528\u7b26\u53f7\u8bed\u8a00\u8868\u793a\u77e5\u8bc6\uff0c\u901a\u8fc7\u7b26\u53f7\u8fd0\u7b97\u505a\u51fa\u51b3\u7b56\u548c\u5224\u65ad\u3002\u53ef\u4ee5\u63cf\u8ff0\u5404\u7c7b\u62bd\u8c61\u95ee\u9898\uff0c\u901a\u7528\u6027\u548c\u53ef\u89e3\u91ca\u6027\u597d\u3002</li> <li>\u4e9a\u7b26\u53f7\u4e3b\u4e49\uff1a\u91c7\u7528\u57fa\u4e8e\u6982\u7387\u7edf\u8ba1\u7684\u5b66\u4e60\uff0c\u5efa\u7acb\u5728\u5927\u6570\u636e\u57fa\u7840\u4e0a\uff0c\u53ef\u89e3\u91ca\u6027\u5dee\uff0c\u4e0d\u64c5\u957f\u89e3\u51b3\u6d89\u53ca\u590d\u6742\u903b\u8f91\u5173\u7cfb\u7684\u62bd\u8c61\u95ee\u9898\u3002</li> </ul> <p>\u7efc\u5408\u4e24\u8005\uff0c\u672c\u8bfe\u7a0b\u6db5\u76d6\u77e5\u8bc6\u7684\u8868\u793a\u548c\u63a8\u7406\u7684\u903b\u8f91\u5b66\u5185\u5bb9\u3002</p> <p>\u63a8\u7406\u7814\u7a76\u4e00\u7ec4\u547d\u9898\u96c6\u5408\u548c\u4e00\u4e2a\u65b0\u547d\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u524d\u8005\u4e3a\u524d\u63d0\uff0c\u540e\u8005\u4e3a\u7ed3\u8bba\u3002\u4f9d\u636e\u67d0\u79cd\u63a8\u7406\u5173\u7cfb\uff0c\u53ef\u4ee5\u4ece\u4e00\u7ec4\u524d\u63d0\u63a8\u51fa\u67d0\u4e2a\u7ed3\u8bba\u3002\u6211\u4eec\u628a\u524d\u63d0\u3001\u7ed3\u8bba\u548c\u63a8\u7406\u5173\u7cfb\u7ec4\u6210\u7684\u4e00\u4e2a\u7ed3\u6784\u79f0\u4e3a\u8bba\u8bc1\u3002</p> <p>\u63a8\u7406\u7c7b\u578b\uff1a   - \u4ece\u5df2\u6709\u77e5\u8bc6\u63a8\u51fa\u65b0\u77e5\u8bc6\uff1a\u6f14\u7ece\u63a8\u7406   - \u4ece\u6848\u4f8b\u5f52\u7eb3\u51fa\u65b0\u77e5\u8bc6\uff1a\u5f52\u7eb3\u63a8\u7406   - \u4ece\u6240\u89c2\u5bdf\u7684\u73b0\u8c61\u548c\u5df2\u6709\u77e5\u8bc6\u5bfb\u6c42\u6700\u4f73\u89e3\u91ca\uff1a\u6eaf\u56e0\u63a8\u7406</p>"},{"location":"study/ailogic/introduction/#_2","title":"\u63a8\u7406\u7c7b\u578b","text":"<p>\u547d\u9898\uff1a\u6709\u771f\u5047\u503c\u7684\u8bed\u53e5\u3002</p>"},{"location":"study/ailogic/introduction/#_3","title":"\u6f14\u7ece\u63a8\u7406","text":"<ol> <li>\u6709\u5355\u8c03\u6027\u7684\u6f14\u7ece\u63a8\u7406\uff1a\u8fd9\u79cd\u6f14\u7ece\u63a8\u7406\u53ef\u4ee5\u201c\u4fdd\u771f\u201d\uff08\u5982\u679c\u524d\u63d0\u4e3a\u771f\uff0c\u5219\u7ed3\u8bba\u5fc5\u4e3a\u771f\uff09</li> </ol> <p>\u7528\u6709\u6548\u6027\u6765\u523b\u753b\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u7684\u597d\u574f\u3002\u6211\u4eec\u8bf4\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u662f\u6709\u6548\u7684\u5f53\u4e14\u4ec5\u5f53\uff1a\u5982\u679c\u8be5\u8bba\u8bc1\u7684\u524d\u63d0\u4e3a\u771f\uff0c\u5219\u5176\u7ed3\u8bba\u4e5f\u5fc5\u7136\u4e3a\u771f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u4e0d\u662f\u6709\u6548\u7684\uff0c\u5219\u5b83\u4e0d\u80fd\u4fdd\u771f\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u8c2c\u8bef\u3002</p> <p>\u4f8b\uff1a \u6240\u6709M\u90fd\u662fP\u3002 \u6240\u6709S\u90fd\u662fM\u3002 \u56e0\u6b64\u6240\u6709S\u90fd\u662fP\u3002</p> <p>\u5355\u8c03\u6027\u6307\uff0c\u5982\u679c\u4e00\u4e2a\u6f14\u7ece\u8bba\u8bc1\u7684\u7ed3\u8bba\u4e3a\u771f\uff0c\u90a3\u4e48\u5f53\u51fa\u73b0\u65b0\u524d\u63d0\u65f6\uff0c\u8be5\u7ed3\u8bba\u539f\u6765\u7684\u8bba\u8bc1\u4fdd\u6301\u4e3a\u771f\u3002</p> <ol> <li>\u975e\u5355\u8c03\u63a8\u7406\uff08\u62d3\u5c55\u6f14\u7ece\u63a8\u7406\uff09\uff1a\u6f14\u7ece\u8bba\u8bc1\u4e2d\u4fe1\u606f\u4e0d\u786e\u5b9a\u3001\u4e0d\u5b8c\u5907\u6216\u4e0d\u4e00\u81f4\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u5957\u7528\u4e0a\u8ff0\u63a8\u7406\u5f62\u5f0f\u800c\u5f97\u5230\u53ef\u9760\u7684\u7ed3\u8bba\u3002\u901a\u5e38\uff0c\u628a\u7ed3\u8bba\u53ef\u4ee5\u88ab\u65b0\u4fe1\u606f\u63a8\u7ffb\u7684\u63a8\u7406\u79f0\u4e3a\u975e\u5355\u8c03\u63a8\u7406\u3002</li> </ol> <p>\u4f8b\uff1a \u9e1f\u4f1a\u98de\u3002 \u591a\u90bb\u56fd\u662f\u9e1f\u3002 \u56e0\u6b64\u591a\u90bb\u56fd\u4f1a\u98de\u3002</p> <p>\u201c\u9e1f\u4f1a\u98de\u201d\u547d\u9898\u4e0d\u5b8c\u5907\u3002\u4e0d\u4e00\u5b9a\u6240\u6709\u9e1f\u90fd\u4f1a\u98de\u3002 \u4e3a\u4e86\u5bf9\u4e0d\u5b8c\u5907\u77e5\u8bc6\u8fdb\u884c\u63a8\u7406\uff0c\u53ef\u4ee5\u5728\u6f14\u7ece\u63a8\u7406\u4e2d\u4f7f\u7528\u201c\u6b63\u5e38\u6027\u5047\u8bbe\u201d\uff0c\u5e76\u7531\u6b64\u5f62\u6210\u57fa\u4e8e\u5047\u8bbe\u7684\u6f14\u7ece\u63a8\u7406\u3002</p> <p>\u4f8b\uff1a \u9e1f\u4f1a\u98de\uff0c\u9664\u975e\u53ef\u4ee5\u8bc1\u660e\u5b83\u4e0d\u6b63\u5e38\u3002 Tweety\u662f\u9e1f\u3002 \u56e0\u6b64\uff0cTweety\u4f1a\u98de\u3002</p> <p>\u9664\u4e86\u5728\u6f14\u7ece\u63a8\u7406\u4e2d\u4f7f\u7528\u201c\u6b63\u5e38\u6027\u5047\u8bbe\u201d\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u628a\u5305\u542b\u4f8b\u5916\u7684\u77e5\u8bc6\u8868\u793a\u6210\u53ef\u5e9f\u6b62\u89c4\u5219\u3002\u4e00\u822c\u5730\uff0c\u53ef\u5e9f\u6b62\u89c4\u5219\u53ef\u4ee5\u8868\u793a\u4e3a\u201c\u5178\u578b\u5730\uff0c\u5982\u679cA\u5219B\u201d\u3002B\u53ef\u88ab\u53cd\u9762\u8bc1\u636e\u63a8\u7ffb\u3002\u57fa\u4e8e\u53ef\u5e9f\u6b62\u89c4\u5219\u7684\u63a8\u7406\u79f0\u4e3a\u53ef\u5e9f\u6b62\u63a8\u7406\u3002</p>"},{"location":"study/ailogic/introduction/#_4","title":"\u5f52\u7eb3\u63a8\u7406","text":"<p>\u5f52\u7eb3\u63a8\u7406\uff1a\u4ece\u89c2\u5bdf\u4e8b\u4f8b\u5230\u4e00\u822c\u539f\u7406\u7684\u63a8\u7406\u3002\u5982\u679c\u4e00\u4e2a\u8bba\u8bc1\u4e2d\u7684\u63a8\u7406\u5173\u7cfb\u4e3a\u5f52\u7eb3\u63a8\u7406\uff0c\u5219\u79f0\u4e4b\u4e3a\u5f52\u7eb3\u8bba\u8bc1\u3002</p> <p>\u4f8b\uff1a \u8fd9\u4e9b\u8c46\u5b50\u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u3002 \u8fd9\u4e9b\u8c46\u5b50\u662f\u767d\u8272\u7684\u3002 \u56e0\u6b64\uff0c\u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u7684\u8c46\u5b50\u90fd\u662f\u767d\u8272\u7684\u3002</p> <p>\u7528\u5f52\u7eb3\u5f3a\u5ea6\u523b\u753b\u5f52\u7eb3\u8bba\u8bc1\u597d\u574f\uff1a\u4ece\u89c2\u5bdf\u4e8b\u4f8b\u5230\u4e00\u822c\u89c4\u5f8b\u7684\u63a8\u7406\u8fc7\u7a0b\u6709\u4e0d\u786e\u5b9a\u6027\uff0c\u53ef\u4ee5\u7528\u6982\u7387\u523b\u753b\uff0c\u6982\u7387\u5927\u5c0f\u53ef\u4ee5\u4f5c\u4e3a\u5f52\u7eb3\u5f3a\u5ea6\u3002</p>"},{"location":"study/ailogic/introduction/#_5","title":"\u6eaf\u56e0\u63a8\u7406","text":"<ol> <li> <p>\u6982\u5ff5\uff1a\u4ece\u89c2\u5bdf\u73b0\u8c61\u5230\u6700\u4f73\u89e3\u91ca\u7684\u63a8\u7406\u3002</p> </li> <li> <p>\u5f62\u5f0f\uff1a</p> </li> </ol> <p>\u5982\u679cp\u90a3\u4e48q\u3002 q\u6210\u7acb\u3002 \u56e0\u6b64p\u6210\u7acb\u3002</p> <p>\u4f8b\uff1a \u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u7684\u8c46\u5b50\u90fd\u662f\u767d\u8272\u7684\u3002 \u8fd9\u4e9b\u8c46\u5b50\u662f\u767d\u8272\u7684\u3002 \u56e0\u6b64\uff0c\u8fd9\u4e9b\u8c46\u5b50\u6765\u81ea\u8fd9\u4e2a\u888b\u5b50\u3002</p>"},{"location":"study/ailogic/introduction/#_6","title":"\u5173\u4e8e\u8bba\u8bc1\u7684\u63a8\u7406","text":"<p>\u5173\u4e8e\u8bba\u8bc1\u7684\u63a8\u7406\u662f\u4e00\u79cd\u901a\u8fc7\u6784\u9020\u8bba\u8bc1\u3001\u6bd4\u8f83\u8bba\u8bc1\u548c\u8bc4\u4f30\u8bba\u8bc1\u6765\u786e\u5b9a\u8bba\u8bc1\u7684\u53ef\u63a5\u53d7\u6027\u7684\u63a8\u7406\u3002\u5982\u4e24\u5c0f\u513f\u8fa9\u65e5\uff0c\u6bcf\u4eba\u90fd\u8bf4\u4e86\u4e24\u4e2a\u8bba\u8bc1\uff0c\u8bba\u8bc1\u95f4\u5b58\u5728\u53cd\u9a73\u5173\u7cfb\uff08\u7ed3\u8bba\u77db\u76fe\uff09\u3002\u6240\u4ee5\u5982\u679c\u63a5\u53d7\u4e00\u4e2a\u8bba\u8bc1\u5c31\u5fc5\u987b\u62d2\u7edd\u88ab\u5176\u53cd\u9a73\u7684\u8bba\u8bc1\u3002</p>"},{"location":"study/ailogic/introduction/#_7","title":"\u4eba\u5de5\u667a\u80fd\u903b\u8f91\u7684\u4e3b\u8981\u7814\u7a76\u65b9\u5411","text":""},{"location":"study/ailogic/introduction/#_8","title":"\u57fa\u4e8e\u6f14\u7ece\u63a8\u7406\u7684\u903b\u8f91","text":"<p>\u7ecf\u5178\u6f14\u7ece\u903b\u8f91\uff1a\u5bf9\u4e8e\u786e\u5b9a\u7684\u3001\u5b8c\u5907\u7684\u3001\u4e00\u81f4\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u91c7\u7528\u7ecf\u5178\u6f14\u7ece\u903b\u8f91\u6240\u63d0\u4f9b\u7684\u903b\u8f91\u8bed\u8a00\u548c\u63a8\u7406\u673a\u5236\u3002 \u5305\u62ec\u547d\u9898\u903b\u8f91\u548c\u4e00\u9636\u903b\u8f91\u3002\u5176\u4e2d\uff0c\u7ecf\u5178\u547d\u9898\u903b\u8f91\u4ee5\u7b80\u5355\u547d\u9898\u4f5c\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u7814\u7a76\u5982\u4f55\u4ece\u7b80\u5355\u547d\u9898\u51fa\u53d1\u901a\u8fc7\u8054\u7ed3\u8bcd\u6784\u9020\u590d\u5408\u547d\u9898\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u7814\u7a76\u590d\u5408\u547d\u9898\u4e4b\u95f4\u7684\u53ef\u63a8\u5bfc\u6027\u5173\u7cfb\u3002\u4e00\u9636\u903b\u8f91\u5728\u547d\u9898\u903b\u8f91\u7684\u57fa\u7840\u4e0a\uff0c\u7814\u7a76\u5305\u542b\u8c13\u8bcd\u548c\u91cf\u8bcd\u7684\u547d\u9898\u7684\u7ed3\u6784\u89c4\u5f8b\u4ee5\u53ca\u8fd9\u4e9b\u547d\u9898\u4e4b\u95f4\u7684\u53ef\u63a8\u5bfc\u6027\u5173\u7cfb\u3002</p> <p>\u975e\u5355\u8c03\u903b\u8f91\uff1a\u5f53\u77e5\u8bc6\u5b58\u5728\u4e0d\u5b8c\u5907\u6027\u548c\u4e0d\u4e00\u81f4\u6027\u65f6\uff0c\u7ecf\u5178\u4e00\u9636\u903b\u8f91\u4e0d\u8db3\u4ee5\u63d0\u4f9b\u5408\u9002\u7684\u8868\u793a\u8bed\u8a00\u548c\u63a8\u7406\u673a\u5236\uff0c\u9700\u8981\u52a0\u4ee5\u6269\u5c55\uff0c\u5f62\u6210\u5404\u79cd\u975e\u5355\u8c03\u903b\u8f91\u3002</p> <p>\u7ecf\u5178\u4e00\u9636\u903b\u8f91\u7684\u5c40\u9650\uff1a   - \u63a8\u7406\u65f6\u524d\u63d0\u6761\u4ef6\u53ef\u80fd\u6570\u91cf\u5f88\u5927\u6216\u8005\u96be\u4ee5\u7a77\u4e3e\uff0c\u65e0\u6cd5\u5728\u4e00\u9636\u903b\u8f91\u4e2d\u5f97\u5230\u5408\u7406\u8868\u8fbe\u3002\uff08\u8981\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\u9700\u8981\u8003\u8651\u5404\u4e2a\u65b9\u9762\u7684\u524d\u63d0\uff0c\u5c24\u5176\u662f\u5b9e\u8df5\u4e2d\uff09   - \u5b9e\u8df5\u63a8\u7406\u4e2d\u4e0d\u540c\u89c4\u8303\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u51b2\u7a81\u3002</p> <p>\u89e3\u51b3\u65b9\u5f0f\uff1a\u62d3\u5c55\u4e00\u9636\u903b\u8f91\u63a8\u7406\uff1a</p> <ol> <li>\u6dfb\u52a0\u6b63\u5e38\u6027\u5047\u8bbe\u800c\u6784\u9020\u7f3a\u7701\u89c4\u5219\u3002\u4e00\u6761\u7f3a\u7701\u89c4\u5219\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u201c\u5982\u679c\u524d\u63d0\u6761\u4ef6:\u8fa9\u62a4\u6761\u4ef6\uff0c\u90a3\u4e48\u7ed3\u8bba\u201d\u3002\u7ed9\u5b9a\u4e00\u6761\u7f3a\u7701\u89c4\u5219\uff0c\u5f53\u5176\u524d\u63d0\u6761\u4ef6\u53ef\u8bc1\uff0c\u800c\u8fa9\u62a4\u6761\u4ef6\u7684\u53cd\u9762\u4e0d\u53ef\u8bc1\u65f6\uff0c\u53ef\u4ee5\u63a8\u51fa\u7ed3\u8bba\u3002\u9700\u8981\u6ce8\u610f\uff0c\u65b0\u6761\u4ef6\u6dfb\u52a0\u53ef\u4ee5\u63a8\u7ffb\u7ed3\u8bba\u3002</li> </ol> <p>\u4f8b\uff1a\u201c\u8f6c\u52a8\u70b9\u706b\u94a5\u5319\uff1a\u53d1\u52a8\u673a\u542f\u52a8/\u53d1\u52a8\u673a\u542f\u52a8\u201d\u662f\u4e00\u6761\u7f3a\u7701\u89c4\u5219\u3002\u5f53\u5904\u4e8e\u201c\u8fa9\u62a4\u6761\u4ef6\u201d\u4f4d\u7f6e\u7684\u201c\u53d1\u52a8\u673a\u542f\u52a8\u201d\u7684\u53cd\u9762\uff0c\u5373\u201c\u53d1\u52a8\u673a\u65e0\u6cd5\u542f\u52a8\u201d\u4e0d\u53ef\u8bc1\u65f6\uff0c\u53ef\u4ee5\u63a8\u51fa\u201c\u53d1\u52a8\u673a\u542f\u52a8\u201d\u8fd9\u4e2a\u7ed3\u8bba\u3002</p> <ol> <li>\u6dfb\u52a0\u53ef\u5e9f\u6b62\u89c4\u5219\uff1a\u201c\u5178\u578b\u5730/\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679cA\u90a3\u4e48B\u201d</li> </ol>"},{"location":"study/ailogic/introduction/#_9","title":"\u5f52\u7eb3\u3001\u4e0d\u786e\u5b9a\u6027\u4e0e\u56e0\u679c\u63a8\u65ad","text":"<p>\u5f52\u7eb3\u903b\u8f91\u7f16\u7a0b\uff1a\u628a\u5f52\u7eb3\u63a8\u7406\u4e0e\u673a\u5668\u5b66\u4e60\u7406\u8bba\u76f8\u7ed3\u5408\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4ece\u6848\u4f8b\u4e2d\u81ea\u52a8\u5b66\u4e60\u4e00\u822c\u89c4\u5219\u3002\u7ed9\u5b9a\u80cc\u666f\u77e5\u8bc6\u53ca\u6848\u4f8b\uff0c\u5f52\u7eb3\u903b\u8f91\u7f16\u7a0b\u7cfb\u7edf\u81ea\u52a8\u63a8\u5bfc\u51fa\u4e00\u4e2a\u903b\u8f91\u7a0b\u5e8f\uff0c\u4f7f\u5176\u8574\u6db5\u6240\u6709\u7684\u6b63\u4f8b\uff0c\u800c\u4e0d\u8574\u6db5\u4efb\u4f55\u53cd\u4f8b\u3002</p> <p>\u4e0d\u786e\u5b9a\u63a8\u7406\uff1a\u5bf9\u4e8e\u4e0d\u786e\u5b9a\u7684\u77e5\u8bc6\uff0c\u4f9d\u636e\u4e0d\u786e\u5b9a\u6027\u7684\u7279\u70b9\uff0c\u53ef\u4ee5\u533a\u5206\u4e09\u79cd\u4e0d\u540c\u7684\u63a8\u7406\u7c7b\u578b\u3002\u7b2c\u4e00\u79cd\u63a8\u7406\u57fa\u4e8e\u5ba2\u89c2\u6982\u7387\u7406\u8bba\u3002\u5ba2\u89c2\u6982\u7387\u5173\u4e8e\u4e8b\u4ef6\u7684\u53d1\u751f\u7387\u3002\u7b2c\u4e8c\u79cd\u63a8\u7406\u57fa\u4e8e\u4e3b\u89c2\u6982\u7387\uff0c\u5373\u4e3b\u4f53\u5bf9\u547d\u9898\u786e\u5b9a\u6027\u7684\u4e3b\u89c2\u786e\u4fe1\u7a0b\u5ea6\u3002\u57fa\u4e8e\u4e3b\u89c2\u6982\u7387\u7684\u63a8\u7406\u6a21\u578b\u5305\u62ec\u8d1d\u53f6\u65af\u7f51\u7edc\u3001\u4fe1\u5ff5\u7f51\u7edc\u3001\u8bc1\u636e\u7406\u8bba\u7b49\u3002\u7b2c\u4e09\u79cd\u63a8\u7406\u57fa\u4e8e\u6a21\u7cca\u5ea6\u3002</p> <p>\u56e0\u679c\u63a8\u65ad\uff1a\u56e0\u679c\u63a8\u65ad\u7814\u7a76\u5982\u4f55\u4ece\u89c2\u6d4b\u7ed3\u679c\u4e2d\u5bfb\u627e\u5f15\u53d1\u7ed3\u679c\u7684\u539f\u56e0\uff0c\u8003\u8651\u6570\u636e\u751f\u6210\u7684\u8fc7\u7a0b\uff0c\u7531\u679c\u6eaf\u56e0\u3002\u56e0\u679c\u63a8\u65ad\u7684\u6a21\u578b\u5305\u62ec\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u548c\u56e0\u679c\u56fe\u3002</p>"},{"location":"study/ailogic/introduction/#_10","title":"\u77e5\u8bc6\u7684\u8868\u793a\u4e0e\u63a8\u7406","text":""},{"location":"study/cs/","title":"Computer system","text":"<p>This is the computer system course, including hardware part and software part. The course includes the content of CPU design and basic knowledge of OS.  </p>"},{"location":"study/cs/ILP/","title":"ILP(Instruction level parallelism)","text":""},{"location":"study/cs/datastructure/","title":"Data structure","text":""},{"location":"study/cs/datastructure/#graph","title":"Graph","text":"<p>!!! Overall Introduction: The graph is powerful tool to handle many practical problems, especially the routine management ones, like crossing the river. There are may algorithms, both referred to in the data structure course and discrete mathematics courses. The theory and the relative proofs are indeed important, which verifies the validity of these algorithms. However, as for my current situation, I think the most urgent thing is to know how to implement the in code.  </p>"},{"location":"study/cs/datastructure/#dfs-and-its-application","title":"DFS and its application","text":"<p>DFS is used to traverse the graph, each vertex only once, and it will give a spanning tree if we record the edges throughout the whole process.</p> <p>Here is the general code: The graph here is a UDAG(undirected acyclic) and unweighted.</p> <pre><code>void DFS(int G[][], int v, int Nv, int visited[] ){\n    visited[v]=1;\n    for(int i=0; i&lt;Nv; i++){\n        if( G[v][i]&amp;&amp;!visited[i] ){\n            DFS(G, i, Nv, visited);\n        }\n    }\n}\n</code></pre>"},{"location":"study/cs/datastructure/#topological-sort","title":"Topological Sort","text":"<p>The graph is a DAG, unweighted and connected.</p> <pre><code>int top=0;\nvoid DFS(int a[][], int v, int Nv, int visited[], int stack){\n    visited[v]=true;\n    for(int i=0;i&lt;Nv;i++){\n        if(a[v][i]&amp;&amp;!visited[i]){\n            DFS(a, i, Nv, visited);\n        }\n    }\n    stack[top++]=v;\n}\nvoid topologcial_sort(int G[][], int Nv){\n    int stack[Nv];\n    int visited[Nv];\n    for(int i=0;i&lt;Nv;i++){\n        visited[i]=0;\n    }\n    DFS(G, 0, Nv, visited, stack);\n    while(top&gt;-1){\n        printf(\"%d \",stack[top--]);\n    }\n}\n</code></pre>"},{"location":"study/cs/datastructure/#circle-detection","title":"Circle detection","text":""},{"location":"study/cs/datastructure/#strongly-connected-components-computation","title":"Strongly Connected components computation","text":"<p>Tarjan\u7b97\u6cd5\u662f\u7528\u6765\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components, SCC\uff09\u7684\u7ecf\u5178\u7b97\u6cd5\u3002\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u6307\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u6700\u5927\u5b50\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e00\u5bf9\u9876\u70b9\u90fd\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u3002Tarjan\u7b97\u6cd5\u662f\u57fa\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\uff08O(V + E)\uff09\u3002</p>"},{"location":"study/cs/datastructure/#tarjan","title":"Tarjan\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3","text":"<p>Tarjan\u7b97\u6cd5\u4f7f\u7528\u4e00\u4e2a\u6808\u548c\u4e00\u4e9b\u8f85\u52a9\u6570\u7ec4\u6765\u8bb0\u5f55\u9876\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\u3002\u5728DFS\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u9876\u70b9\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u7f16\u53f7\uff08DFS\u7f16\u53f7\uff09\u548c\u4e00\u4e2a\u6700\u4f4e\u53ef\u8fbe\u7f16\u53f7\uff08Low-link\u503c\uff09\u3002\u901a\u8fc7\u8fd9\u4e9b\u7f16\u53f7\uff0c\u53ef\u4ee5\u5224\u65ad\u9876\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p>"},{"location":"study/cs/datastructure/#_1","title":"\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u8bbe\u7f6eDFS\u7f16\u53f7\u3001Low-link\u503c\u7b49\u8f85\u52a9\u6570\u7ec4\uff0c\u5e76\u521d\u59cb\u5316\u6808\u3002</li> <li>DFS\u904d\u5386\uff1a\u5bf9\u6bcf\u4e2a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u6267\u884cDFS\uff0c\u9012\u5f52\u5730\u8bbf\u95ee\u6240\u6709\u53ef\u8fbe\u7684\u9876\u70b9\u3002</li> <li>\u66f4\u65b0Low-link\u503c\uff1a\u5728DFS\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u5f53\u524d\u9876\u70b9\u548c\u5176\u540e\u7ee7\u9876\u70b9\u7684Low-link\u503c\u3002</li> <li>\u8bc6\u522b\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5f53\u53d1\u73b0\u4e00\u4e2a\u9876\u70b9\u7684DFS\u7f16\u53f7\u548cLow-link\u503c\u76f8\u7b49\u65f6\uff0c\u5b83\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff0c\u5c06\u6808\u4e2d\u6240\u6709\u5230\u8fbe\u8be5\u9876\u70b9\u7684\u9876\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/cs/datastructure/#_2","title":"\u4f2a\u4ee3\u7801","text":"<p>\u4e0b\u9762\u662fTarjan\u7b97\u6cd5\u7684\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>// n \u662f\u56fe\u4e2d\u7684\u9876\u70b9\u6570\nindex = 0\nstack = []\nindices = [-1] * n\nlowlink = [0] * n\nonStack = [False] * n\nSCCs = []\n\nfunction strongconnect(v):\n    indices[v] = index\n    lowlink[v] = index\n    index += 1\n    stack.push(v)\n    onStack[v] = True\n\n    // \u8003\u8651 v \u7684\u6bcf\u4e2a\u540e\u7ee7\u9876\u70b9 w\n    for each (v, w) in edges:\n        if indices[w] == -1:\n            // w \u8fd8\u672a\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u8bbf\u95ee\u5b83\n            strongconnect(w)\n            lowlink[v] = min(lowlink[v], lowlink[w])\n        else if onStack[w]:\n            // w \u5728\u6808\u4e2d\uff0c\u662f\u4e00\u4e2a\u56de\u8fb9\n            lowlink[v] = min(lowlink[v], indices[w])\n\n    // \u5982\u679c v \u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\n    if lowlink[v] == indices[v]:\n        SCC = []\n        while True:\n            w = stack.pop()\n            onStack[w] = False\n            SCC.append(w)\n            if w == v:\n                break\n        SCCs.append(SCC)\n\nfor each v in vertices:\n    if indices[v] == -1:\n        strongconnect(v)\n\nreturn SCCs\n</code></pre>"},{"location":"study/cs/datastructure/#c","title":"C\u8bed\u8a00\u5b9e\u73b0","text":"<p>\u4e0b\u9762\u662fTarjan\u7b97\u6cd5\u5728C\u8bed\u8a00\u4e2d\u7684\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAX 100\n\nint index = 0, n;\nint indices[MAX], lowlink[MAX];\nbool onStack[MAX];\nint stack[MAX], stackTop = -1;\nint graph[MAX][MAX];\nint SCC[MAX][MAX], SCCIndex = 0, SCCSizes[MAX];\n\nvoid push(int v) {\n    stack[++stackTop] = v;\n    onStack[v] = true;\n}\n\nint pop() {\n    int v = stack[stackTop--];\n    onStack[v] = false;\n    return v;\n}\n\nvoid strongconnect(int v) {\n    indices[v] = lowlink[v] = index++;\n    push(v);\n\n    for (int w = 0; w &lt; n; w++) {\n        if (graph[v][w]) {\n            if (indices[w] == -1) {\n                strongconnect(w);\n                lowlink[v] = lowlink[v] &lt; lowlink[w] ? lowlink[v] : lowlink[w];\n            } else if (onStack[w]) {\n                lowlink[v] = lowlink[v] &lt; indices[w] ? lowlink[v] : indices[w];\n            }\n        }\n    }\n\n    if (lowlink[v] == indices[v]) {\n        int w;\n        do {\n            w = pop();\n            SCC[SCCIndex][SCCSizes[SCCIndex]++] = w;\n        } while (w != v);\n        SCCIndex++;\n    }\n}\n\nvoid tarjan() {\n    for (int i = 0; i &lt; n; i++) {\n        indices[i] = -1;\n        lowlink[i] = 0;\n        onStack[i] = false;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (indices[i] == -1) {\n            strongconnect(i);\n        }\n    }\n}\n\nint main() {\n    printf(\"Enter the number of vertices: \");\n    scanf(\"%d\", &amp;n);\n\n    printf(\"Enter the adjacency matrix:\\n\");\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            scanf(\"%d\", &amp;graph[i][j]);\n        }\n    }\n\n    tarjan();\n\n    printf(\"Strongly Connected Components:\\n\");\n    for (int i = 0; i &lt; SCCIndex; i++) {\n        printf(\"SCC %d: \", i + 1);\n        for (int j = 0; j &lt; SCCSizes[i]; j++) {\n            printf(\"%d \", SCC[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/cs/datastructure/#_3","title":"\u89e3\u91ca","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u8bbe\u7f6eDFS\u7f16\u53f7\u6570\u7ec4<code>indices</code>\u548cLow-link\u503c\u6570\u7ec4<code>lowlink</code>\uff0c\u521d\u59cb\u5316\u6808\u548c\u76f8\u5173\u6807\u8bb0\u3002</li> <li>\u9012\u5f52\u51fd\u6570 <code>strongconnect</code>\uff1a\u6267\u884cDFS\uff0c\u66f4\u65b0Low-link\u503c\uff0c\u5e76\u5728\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u5c06\u6808\u4e2d\u76f8\u5173\u9876\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> <li>\u4e3b\u51fd\u6570 <code>tarjan</code>\uff1a\u5bf9\u6bcf\u4e2a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u8c03\u7528\u9012\u5f52\u51fd\u6570<code>strongconnect</code>\u3002</li> <li>\u8f93\u5165\u8f93\u51fa\uff1a\u5728<code>main</code>\u51fd\u6570\u4e2d\u8bfb\u53d6\u9876\u70b9\u6570\u91cf\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u8c03\u7528<code>tarjan</code>\u7b97\u6cd5\uff0c\u8f93\u51fa\u627e\u5230\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol> <p>Kosaraju-Sharir\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components, SCC\uff09\u7684\u7ecf\u5178\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u57fa\u4e8e\u4e24\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(V + E)\uff0c\u5176\u4e2dV\u662f\u9876\u70b9\u6570\uff0cE\u662f\u8fb9\u6570\u3002</p>"},{"location":"study/cs/datastructure/#kosaraju-sharir","title":"Kosaraju-Sharir\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u53cd\u8f6c\u56fe\uff1a\u9996\u5148\u53cd\u8f6c\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u3002</li> <li>\u7b2c\u4e00\u6b21DFS\uff1a\u5bf9\u539f\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5b8c\u6210\u65f6\u95f4\u3002</li> <li>\u7b2c\u4e8c\u6b21DFS\uff1a\u6309\u7167\u7b2c\u4e00\u6b21DFS\u7684\u5b8c\u6210\u65f6\u95f4\u7684\u9006\u5e8f\u5bf9\u53cd\u8f6c\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u5230\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/cs/datastructure/#_4","title":"\u7b97\u6cd5\u4f2a\u4ee3\u7801","text":"<pre><code>function kosarajuSharir(G):\n    let G_rev be the reverse of graph G\n    let S be an empty stack\n    let visited be a map from node to boolean\n\n    // First DFS: Record the finish time of each node\n    function dfs1(v):\n        visited[v] = true\n        for each neighbor w of v in G:\n            if not visited[w]:\n                dfs1(w)\n        S.push(v)\n\n    // Second DFS: Collect nodes in the same SCC\n    function dfs2(v, component):\n        visited[v] = true\n        component.add(v)\n        for each neighbor w of v in G_rev:\n            if not visited[w]:\n                dfs2(w, component)\n\n    // Initialize the visited map and run the first DFS\n    for each vertex v in G:\n        visited[v] = false\n    for each vertex v in G:\n        if not visited[v]:\n            dfs1(v)\n\n    // Reinitialize the visited map for the second DFS\n    for each vertex v in G:\n        visited[v] = false\n\n    // Process all nodes in the order defined by the stack S\n    let SCCs be an empty list of components\n    while S is not empty:\n        v = S.pop()\n        if not visited[v]:\n            let component be an empty list\n            dfs2(v, component)\n            SCCs.append(component)\n\n    return SCCs\n</code></pre>"},{"location":"study/cs/datastructure/#c_1","title":"C\u8bed\u8a00\u5b9e\u73b0","text":"<p>\u4ee5\u4e0b\u662fKosaraju-Sharir\u7b97\u6cd5\u7684C\u8bed\u8a00\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAX 100\n\nint graph[MAX][MAX];\nint graph_rev[MAX][MAX];\nbool visited[MAX];\nint stack[MAX];\nint stackTop = -1;\nint SCC[MAX][MAX], SCCIndex = 0, SCCSizes[MAX];\nint n;\n\nvoid push(int v) {\n    stack[++stackTop] = v;\n}\n\nint pop() {\n    return stack[stackTop--];\n}\n\nvoid dfs1(int v) {\n    visited[v] = true;\n    for (int w = 0; w &lt; n; w++) {\n        if (graph[v][w] &amp;&amp; !visited[w]) {\n            dfs1(w);\n        }\n    }\n    push(v);\n}\n\nvoid dfs2(int v) {\n    visited[v] = true;\n    SCC[SCCIndex][SCCSizes[SCCIndex]++] = v;\n    for (int w = 0; w &lt; n; w++) {\n        if (graph_rev[v][w] &amp;&amp; !visited[w]) {\n            dfs2(w);\n        }\n    }\n}\n\nvoid kosarajuSharir() {\n    // Step 1: Run DFS on the original graph to fill the stack\n    for (int i = 0; i &lt; n; i++) {\n        visited[i] = false;\n    }\n    for (int i = 0; i &lt; n; i++) {\n        if (!visited[i]) {\n            dfs1(i);\n        }\n    }\n\n    // Step 2: Reverse the graph\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            graph_rev[i][j] = graph[j][i];\n        }\n    }\n\n    // Step 3: Run DFS on the reversed graph in the order defined by the stack\n    for (int i = 0; i &lt; n; i++) {\n        visited[i] = false;\n    }\n    while (stackTop != -1) {\n        int v = pop();\n        if (!visited[v]) {\n            SCCSizes[SCCIndex] = 0;\n            dfs2(v);\n            SCCIndex++;\n        }\n    }\n}\n\nint main() {\n    printf(\"Enter the number of vertices: \");\n    scanf(\"%d\", &amp;n);\n\n    printf(\"Enter the adjacency matrix:\\n\");\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            scanf(\"%d\", &amp;graph[i][j]);\n        }\n    }\n\n    kosarajuSharir();\n\n    printf(\"Strongly Connected Components:\\n\");\n    for (int i = 0; i &lt; SCCIndex; i++) {\n        printf(\"SCC %d: \", i + 1);\n        for (int j = 0; j &lt; SCCSizes[i]; j++) {\n            printf(\"%d \", SCC[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/cs/datastructure/#_5","title":"\u89e3\u91ca","text":"<ol> <li>\u521d\u59cb\u5316\u548c\u8f93\u5165\uff1a\u8bfb\u53d6\u9876\u70b9\u6570\u91cf\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u521d\u59cb\u5316\u76f8\u5173\u6570\u7ec4\u548c\u53d8\u91cf\u3002</li> <li>\u7b2c\u4e00\u6b21DFS\uff1a\u5bf9\u539f\u56fe\u6267\u884cDFS\uff0c\u6309\u7167\u5b8c\u6210\u65f6\u95f4\u5c06\u9876\u70b9\u538b\u5165\u6808\u4e2d\u3002</li> <li>\u56fe\u53cd\u8f6c\uff1a\u751f\u6210\u53cd\u8f6c\u56fe\uff0c\u5c06\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\u65b9\u5411\u53cd\u8f6c\u3002</li> <li>\u7b2c\u4e8c\u6b21DFS\uff1a\u6309\u7167\u7b2c\u4e00\u6b21DFS\u7684\u5b8c\u6210\u65f6\u95f4\u7684\u9006\u5e8f\u5bf9\u53cd\u8f6c\u56fe\u6267\u884cDFS\uff0c\u627e\u5230\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> <li>\u8f93\u51fa\u7ed3\u679c\uff1a\u8f93\u51fa\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/cs/sys2/","title":"review of sys2","text":""},{"location":"study/cs/sys2/#_1","title":"\u786c\u4ef6","text":""},{"location":"study/cs/sys2/#isa","title":"ISA","text":"<p>Arch:</p> <ol> <li>Stack architecture:</li> <li>Accumulator</li> <li>GPR</li> <li>Register-Memory</li> <li>load-store</li> </ol> <p>addressing mode:</p>"},{"location":"study/cs/sys2/#pipeline","title":"pipeline","text":"<p>class: </p>"},{"location":"study/cs/sys2/#performance","title":"Performance","text":"<ol> <li>TP(throughput):\\(TP=\\frac{n}{T}\\) </li> <li>Speedup </li> <li>Efficiency  \u4e3e\u4f8b\uff1a  </li> </ol>"},{"location":"study/cs/sys2/#hazard","title":"hazard","text":""},{"location":"study/cs/sys2/#structural","title":"structural","text":"<ol> <li>Df: A required resource is busy</li> <li>Sotution: Stall: insert bubble:addi x0, x0, 0</li> </ol>"},{"location":"study/cs/sys2/#data","title":"data","text":"<ol> <li>Df:<ol> <li>Data dependency between instructions</li> <li>Need to wait for previous instruction to complete its data read/write</li> </ol> </li> <li>Solution: </li> </ol> <ul> <li>detect and forwarding  </li> <li>Load-Use Hazard Detection: detect and insert bubble </li> </ul>"},{"location":"study/cs/sys2/#control","title":"control","text":""},{"location":"study/cs/sys2/#scheduling","title":"Scheduling","text":""},{"location":"study/cs/sys2/#prohibit-table","title":"Prohibit table","text":""},{"location":"study/cs/sys2/#initial-confict-vector","title":"initial confict vector","text":"<p>\u4e8c\u8fdb\u5236\u6570\u5b57\u4e32\uff0cprohibit table\u4e2d\u5bf9\u5e94\u6570\u5b57\u7684\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4e3a0</p>"},{"location":"study/cs/sys2/#state-transition-graph","title":"state transition graph","text":""},{"location":"study/cs/sys2/#multiple-issue","title":"Multiple issue","text":""},{"location":"study/cs/sys2/#multiple-issue-processor-type","title":"multiple-issue processor type","text":""},{"location":"study/cs/sys2/#superscalar","title":"Superscalar","text":""},{"location":"study/cs/sys2/#vliwvery-long-instruction-word","title":"VLIW(Very Long Instruction Word)","text":""},{"location":"study/cs/sys2/#exception-hardware-s-interface","title":"Exception&amp; Hardware-S interface","text":""},{"location":"study/cs/sys2/#_2","title":"\u8f6f\u4ef6","text":"<p>\u57fa\u672c\u8109\u7edc\uff1a process -&gt;process scheduling -&gt;IPC -&gt;thread -&gt;sychronization -&gt;deadlock</p> <p>\u8fdb\u7a0b\uff1a\u8d44\u6e90\u5206\u914d\u548c\u4fdd\u62a4\u5355\u5143 \u7ebf\u7a0b\uff1a\u8d44\u6e90\u6267\u884c\u5355\u5143</p>"},{"location":"study/cs/sys2/#_3","title":"\u795e\u56fe","text":""},{"location":"study/cs/sys2/#process","title":"process","text":""},{"location":"study/cs/sys2/#pcb","title":"PCB","text":""},{"location":"study/cs/sys2/#process-state","title":"Process State","text":"<ol> <li> <p>new:   :star:forK(syscall):\u8fd4\u56de\u4e24\u503c\uff08\u5bf9\u7236\u8fdb\u7a0b\uff1a\u5b50\u8fdb\u7a0bPID\uff1b\u5b50\u8fdb\u7a0b\uff1a0\uff09\uff0ccopy\u4e24\u4efduser space context(pt regs) \u91cd\u70b9\uff1afork \u51fa\u7684\u8fdb\u7a0b\u5904</p> </li> <li> <p>context_switch:\u5207\u6362stack,pc(\u6d89\u53ca\u786c\u4ef6\u8d44\u6e90\uff0c\u53d1\u751f\u5728kernel) </p> </li> </ol>"},{"location":"study/cs/sys2/#process-schedulingstar","title":"Process scheduling:star:","text":""},{"location":"study/cs/sys2/#ipc","title":"IPC","text":""},{"location":"study/cs/sys2/#thread","title":"Thread","text":"<p>\u8fdb\u7a0b\u7684\u6267\u884c\u5355\u5143\uff1a</p> <p></p> <p>\u8fdb\u7a0b\u6267\u884c\u987a\u5e8f\u56fe \u8fdb\u7a0bfork\u540e\u8fdb\u5165ready\u961f\u5217\u7b49\u5f85</p> <p>1\u4e2a\u8fdb\u7a0b\u4e2d\u6709n\u4e2a\u7ebf\u7a0b\uff1an\u4e2atask struct \u8fdb\u7a0b\u65e0task struct,\u5b83\u7528leader thread\u7684task_struct</p> <p>thread node thread group\u904d\u5386thread</p> <p>user space code\u4e0ekernel space code \u4e0d\u540c thread:user kernel\u4e00\u5bf9\u4e00</p> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u7684pt regs\uff0c\u662fthread kernel stack\u4e00\u90e8\u5206</p>"},{"location":"study/cs/sys2/#synchronization","title":"synchronization","text":""},{"location":"study/cs/sys2/#critical-section","title":"critical section","text":"<p>Critical section(\u4e34\u754c\u533a):\u6307\u5728\u5e76\u53d1\u7f16\u7a0b\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5171\u4eab\u7684\u8d44\u6e90\uff08\u4f8b\u5982\u5171\u4eab\u5185\u5b58\u3001\u6587\u4ef6\u3001\u8bbe\u5907\u7b49\uff09\u9700\u8981\u88ab\u8bbf\u95ee\u7684\u90a3\u6bb5\u4ee3\u7801\u3002\u4e34\u754c\u533a\u4e2d\u7684\u4ee3\u7801\u90e8\u5206\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\u8bbf\u95ee\uff0c\u4ee5\u907f\u514d\u7ade\u4e89\u6761\u4ef6\uff08race condition\uff09\u548c\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002</p> <p>solution to critical section \u6761\u4ef6\uff1a</p> <ol> <li>Mutual exclusion(\u4e92\u65a5\u8bbf\u95ee): critical section\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c</li> <li>Progress(\u7a7a\u95f2\u8ba9\u8fdb):\u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\uff0c\u4e14\u6709\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165\u4e34\u754c\u533a\u65f6\uff0c\u5fc5\u5b9a\u6709\u8fdb\u7a0b\u80fd\u591f\u8fdb\u5165\u4e34\u754c\u533a</li> <li>Bounded waiting(\u6709\u9650\u7b49\u5f85\u65f6\u95f4):\u9632\u6b62starvation</li> </ol>"},{"location":"study/cs/sys2/#petersons-solution","title":"peterson's solution:\u53ea\u80fd\u89e3\u51b3\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u51b2\u7a81","text":"<p>Peterson\u7684\u7b97\u6cd5\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u5171\u4eab\u53d8\u91cf\u6765\u63a7\u5236\u4e24\u4e2a\u8fdb\u7a0b\u7684\u884c\u4e3a\uff1a</p> <ul> <li>flag[0] \u548c flag[1]\uff1a\u8fd9\u4e24\u4e2a\u53d8\u91cf\u8868\u793a\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u662f\u5426\u5e0c\u671b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> <li>turn\uff1a\u8fd9\u4e2a\u53d8\u91cf\u8868\u793a\u5f53\u524d\u8f6e\u5230\u54ea\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> </ul> <p></p> <p>\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u4e09\u4e2a\u6761\u4ef6\uff0c\u4f46\u6709\u5982\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>Only works for two processes case</li> <li>It assumes that LOAD and STORE are atomic</li> <li>\u6ca1\u8003\u8651Instruction reorder\uff1a\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u6307\u4ee4\u91cd\u6392</li> </ul>"},{"location":"study/cs/sys2/#hardware-solution","title":"Hardware solution","text":"<ol> <li> <p>Memory barriers(\u4e00\u79cd\u5904\u7406\u5668\u6307\u4ee4)\uff1a\u5185\u5b58\u5c4f\u969c\u4f5c\u4e3a\u540c\u6b65\u539f\u8bed\u88ab\u7528\u6765\u5f3a\u5236\u6307\u4ee4\u6309\u7279\u5b9a\u987a\u5e8f\u6267\u884c\uff0c\u786e\u4fdd\u5bf9\u5171\u4eab\u6570\u636e\u7684\u8bbf\u95ee\u6309\u9884\u671f\u53d1\u751f\u3002 </p> </li> <li> <p>\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff1a</p> </li> <li>test and set(TAS):\u5148\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7279\u5b9a\u503c\uff08\u59821\uff09\uff0c\u5e76\u8fd4\u56de\u539f\u503c\u3002\u8be5\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u6210\u529f\u83b7\u53d6\u9501\u3002    </li> <li> <p>compare and swap(CAS):CAS\u64cd\u4f5c\u8bfb\u53d6\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u4e0e\u63d0\u4f9b\u7684\u9884\u671f\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u5339\u914d\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u7684\u503c\u66ff\u6362\u4e3a\u65b0\u503c\uff1b\u5982\u679c\u4e0d\u5339\u914d\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u5e76\u8fd4\u56de\u5f53\u524d\u503c\u3002CAS\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u786e\u4fdd\u591a\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\u3002    </p> </li> <li> <p>Atomic variables:</p> </li> </ol>"},{"location":"study/cs/sys2/#mutex-locks","title":"Mutex locks\uff08\u4e92\u65a5\u9501\uff09","text":"<p>\u4fdd\u8bc1\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6301\u6709\u8be5\u9501\u5e76\u8fdb\u5165\u4e34\u754c\u533a\uff08critical section\uff09\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5fc5\u987b\u7b49\u5f85\uff0c\u76f4\u5230\u8be5\u9501\u88ab\u91ca\u653e\u3002 \u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>while(true){\n    acquire lock(atomic)\n    critical section\n    release lock(atomic)\n    remainder section\n}\n</code></pre> <ol> <li>\u81ea\u65cb\u9501\uff1a\u81ea\u65cb\u9501\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u9501\u5b9e\u73b0\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u7ebf\u7a0b\u65e0\u6cd5\u83b7\u5f97\u9501\u65f6\uff0c\u5b83\u4f1a\u4e0d\u65ad\u5faa\u73af\uff08\u81ea\u65cb\uff09\uff0c\u68c0\u67e5\u9501\u7684\u72b6\u6001\u662f\u5426\u53d8\u4e3a\u53ef\u7528\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u9501\u4e89\u7528\u4e0d\u9891\u7e41\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u81ea\u65cb\u4f1a\u6d88\u8017CPU\u8d44\u6e90\u3002 \u5b9e\u73b0\uff1a  acquire \u5230release\u4e4b\u95f4\u5176\u4ed6\u8fdb\u7a0b\u5728busy waiting\u2014\u2014too much spinning\uff0c\u6d6a\u8d39CPU time</li> <li>\u57fa\u4e8e\u961f\u5217\u7684\u9501\uff08Queue-based Locks\uff09\uff1a\u7ebf\u7a0b\u4f1a\u6309\u7167\u8bf7\u6c42\u9501\u7684\u987a\u5e8f\u8fdb\u5165\u961f\u5217\uff0c\u7b49\u5230\u9501\u91ca\u653e\u65f6\u6309\u7167\u987a\u5e8f\u88ab\u5524\u9192\u3002\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u673a\u5236\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6309\u7167\u516c\u5e73\u7684\u987a\u5e8f\u83b7\u5f97\u9501\u3002</li> </ol>"},{"location":"study/cs/sys2/#semaphore","title":"Semaphore\uff08\u4fe1\u53f7\u91cf\uff09","text":"<p>\u4fe1\u53f7\u91cf\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u7cfb\u7edf\u4e2d\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u589e\u52a0\u6216\u51cf\u5c11\uff0c\u901a\u5e38\u901a\u8fc7\u4e24\u79cd\u64cd\u4f5c\u6765\u63a7\u5236\uff1a</p> <ul> <li> <p>P\u64cd\u4f5c\uff08\u5c1d\u8bd5\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a wait\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u51cf\u5c11\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u82e5\u4fe1\u53f7\u91cf\u5927\u4e8e0\uff0c\u64cd\u4f5c\u6210\u529f\uff0c\u4fe1\u53f7\u91cf\u51cf1\uff1b\u82e5\u4fe1\u53f7\u91cf\u4e3a0\uff0c\u5219\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u5927\u4e8e0\u4e3a\u6b62\u3002</p> </li> <li> <p>V\u64cd\u4f5c\uff08\u589e\u52a0\uff09\uff1a\u901a\u5e38\u4e5f\u79f0\u4e3a signal\u64cd\u4f5c\uff0c\u5b83\u8bd5\u56fe\u589e\u52a0\u4fe1\u53f7\u91cf\u7684\u503c\u3002\u4fe1\u53f7\u91cf\u52a01\uff0c\u5982\u679c\u6709\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u56e0\u4e3a\u4fe1\u53f7\u91cf\u4e3a0\u800c\u88ab\u963b\u585e\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u4f1a\u88ab\u5524\u9192\u7ee7\u7eed\u6267\u884c\u3002 </p> </li> </ul> <p>\u5b9e\u73b0\uff1a  \u5b9e\u73b0\u4f7f\u7528\u4e86spinning lock\u4f1a\u6709</p>"},{"location":"study/cs/sys2/#deadlock-and-starvation","title":"Deadlock and starvation","text":"<p>Deadlock:</p> <ul> <li>\u6761\u4ef6\uff1a</li> <li>\u4e92\u65a5\u6761\u4ef6\uff08Mutual Exclusion\uff09\uff1a\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u5728\u5360\u7528\u8d44\u6e90\u65f6\uff0c\u8be5\u8d44\u6e90\u4e0d\u80fd\u540c\u65f6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bbf\u95ee\u3002</li> <li>\u5360\u6709\u5e76\u7b49\u5f85\uff08Hold and Wait\uff09\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u5176\u4ed6\u88ab\u5360\u7528\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff08No Preemption\uff09\uff1a\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u4ece\u8fdb\u7a0b\u4e2d\u5265\u593a\uff0c\u53ea\u80fd\u7531\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\uff08Circular Wait\uff09\uff1a\u5b58\u5728\u4e00\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u7684\u5faa\u73af\u94fe\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u91ca\u653e\u8d44\u6e90\u3002 \u793a\u4f8b\uff1a \u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0b A \u548c B \u5404\u81ea\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u53e6\u4e00\u4e2a\u8d44\u6e90\uff1a \u8fdb\u7a0b A \u6301\u6709\u8d44\u6e90 1\uff0c\u7b49\u5f85\u8d44\u6e90 2\u3002 \u8fdb\u7a0b B \u6301\u6709\u8d44\u6e90 2\uff0c\u7b49\u5f85\u8d44\u6e90 1\u3002 A,B\u76f8\u4e92\u7b49\u5f85\u5bfc\u81f4\u6b7b\u9501\u3002</li> </ul> <p>Starvation\uff1a</p>"},{"location":"study/cs/sys2/#atomic-variable","title":"Atomic variable","text":"<p>\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u7684\u53d8\u91cf\uff0c\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u3002</p>"},{"location":"study/cs/sys2/#star","title":"\u4e09\u4e2a\u95ee\u9898:star:","text":"<ol> <li>Bounded buffer problem: \u6709\u754c\u7f13\u51b2\u533a\u95ee\u9898\uff0c\u53c8\u79f0\u4e3a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u662f\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u7ecf\u5178\u540c\u6b65\u95ee\u9898\u3002\u5b83\u63cf\u8ff0\u4e86\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u5171\u4eab\u6709\u9650\u7f13\u51b2\u533a\u65f6\u5982\u4f55\u5b89\u5168\u6709\u6548\u5730\u4ea4\u6362\u6570\u636e\u7684\u573a\u666f\u3002</li> </ol> <p> 2. Readers-Writers Problem:</p>"},{"location":"study/cs/sys2/#deadlock","title":"Deadlock","text":""},{"location":"study/cs/sys2/#_4","title":"\u56db\u4e2a\u6761\u4ef6","text":"<p>\u6b7b\u9501\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a</p> <ol> <li>\u4e92\u65a5\u6761\u4ef6\uff1a\u6bcf\u4e2a\u8d44\u6e90\u53ea\u80fd\u7531\u4e00\u4e2a\u8fdb\u7a0b\u5360\u7528\uff0c\u4e14\u8be5\u8d44\u6e90\u5728\u88ab\u5360\u7528\u65f6\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u3002</li> <li>\u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u81f3\u5c11\u6301\u6709\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u4e14\u7b49\u5f85\u83b7\u53d6\u5176\u4ed6\u88ab\u5176\u4ed6\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6\uff1a\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5236\u5265\u593a\uff0c\u53ea\u80fd\u7b49\u8fdb\u7a0b\u91ca\u653e\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u5b58\u5728\u8fdb\u7a0b\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u7684\u60c5\u51b5\u3002</li> </ol>"},{"location":"study/cs/sys2/#_5","title":"\u89e3\u51b3\u65b9\u6848","text":""},{"location":"study/cs/sys2/#deadlock-prevention","title":"Deadlock prevention","text":"<p>\u6253\u7834\u6b7b\u9501\u56db\u4e2a\u6761\u4ef6</p>"},{"location":"study/cs/sys2/#deadlock-aviodance","title":"Deadlock aviodance","text":"<p>Banker's algorithm:\u5728\u6bcf\u6b21\u8d44\u6e90\u5206\u914d\u524d\uff0c\u7cfb\u7edf\u901a\u8fc7\u6a21\u62df\u662f\u5426\u4f1a\u5bfc\u81f4\u6b7b\u9501\u6765\u5224\u65ad\u662f\u5426\u5206\u914d\u8be5\u8d44\u6e90\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u76ee\u6807\u662f\u786e\u4fdd\u7cfb\u7edf\u5904\u4e8e\u4e00\u4e2a\u201c\u5b89\u5168\u72b6\u6001\u201d\uff0c\u5373\u53ef\u4ee5\u907f\u514d\u6b7b\u9501\u7684\u53d1\u751f\u3002</p> <p></p>"},{"location":"study/cs/sys2/#deadlock-detection","title":"Deadlock detection","text":"<p>\u5bfb\u627e\u73af \u95ee\u9898\uff1astarvation</p>"},{"location":"study/cs/sys2/#deadlock-recovery","title":"Deadlock recovery","text":"<p>kill deadlock process</p>"},{"location":"study/cs/sys2/#software","title":"Software","text":"<p>\u5185\u5b58\u4e0d\u5b58\u6570\u636e\u7c7b\u578b</p> <ol> <li> <p>OS\uff1aresource allocator abstractor, in kernel mode</p> </li> <li> <p>events type in OS:interrupts(hardware) and exception(software)</p> </li> <li>:star:syscall(unprivileged):interface between user and kernel mode</li> <li>U-&gt;K: context is stored in kernel stack(kernel entry does this)</li> <li> <p>signals,timers and timeouts, user input events,process events, faults and exceptions</p> </li> <li> <p>Sys call:</p> </li> <li> <p>system service:</p> </li> <li>static linker:\u79fb\u690d\u6027\u66f4\u5f3a\uff0c\u9700\u5185\u5b58\u5927</li> <li>dynamic linker:</li> <li>loaders: a part of the operating system responsible for loading executable programs (or shared libraries) into memory for execution.  </li> </ol> <p>heap\u53ef\u5171\u4eab\uff1a stack(per-thread)\uff1a\u4e0d\u53ef\u5171\u4eab\uff1a\u6808\u5185\u5b58\u662f\u4e0e\u51fd\u6570\u8c03\u7528\u7d27\u5bc6\u7ed1\u5b9a\u7684\uff0c\u5e76\u4e14\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u88ab\u91ca\u653e\uff0c\u6240\u4ee5\u5b83\u7684\u751f\u547d\u5468\u671f\u662f\u77ed\u6682\u7684\u3001\u5c40\u90e8\u7684\u3002\u56e0\u6b64\uff0c\u6808\u4e0d\u9002\u5408\u5728\u4e0d\u540c\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\uff0c\u6808\u7684\u5185\u5bb9\u4e0d\u80fd\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u4f20\u9012\u3002</p> <ol> <li>Process(resource allocation and protection):</li> <li>PCB:\u5305\u542bPID,pstate,PC</li> </ol>"},{"location":"study/cs/system/","title":"Computer System","text":""},{"location":"study/cs/system/#quantitative-approaches","title":"Quantitative approaches","text":"<p>\\(CPU\\_Time=IC\\times CPI\\times Clock Pereiod\\)</p> <p>\\(CPU\\_Time=\\frac{Instructions}{Program}\\times \\frac{Clock\\_cycles}{Instructions}\\times \\frac{Seconds}{Clock\\_cycles}\\)</p> <p>IC: instruction count</p> <ul> <li>If different instruction classes take different numbers of cycles:</li> </ul> <p>Clock Cycles=\\(\\sum_{i=1}^{n}(CPI_i\\times IC_i)\\)</p> <p>CPI=\\(\\frac{Clock Cycles}{IC}=\\sum_{i=1}^{n}(CPI_i\\times \\frac{IC_i}{IC})\\)</p>"},{"location":"study/cs/system/#principles-of-computer-design","title":"Principles of computer design","text":"<ul> <li> <p>Use parallelism: multiple processors, disks, memmory banks, pipelining</p> </li> <li> <p>Principle of Locality: reuse data and instructions</p> </li> <li> <p>Focus on the common case: Amdahl's Law</p> </li> </ul> <p>Amdahl's Law: \\(T_{improved}=\\frac{T_{affected}}{improvement factor}+T_{unaffected}\\)</p> <p>\\(Fraction_{enhanced}\\) :proportion of segment can be enhanced</p> \\[ Execution\\_time_{new}=Exe\\_time_{can't be enhanced}+Ece time_{enhanced} \\] \\[ =Execution\\_time_{old}((1-Fraction_{enhanced})+\\frac{Fraction_{enhanced}}{Speedup_{enhanced}}) \\] \\[ Speedup_{overall}=\\frac{Exe\\_time_{old}}{Exe\\_time_{new}}=\\frac{1}{(1-Fraction_{enhanced})+\\frac{Fraction_{enhanced}}{Speedup_{enhanced}}} \\] <p>An example:</p> <p></p> <p>Important inference:</p> \\[ Speedup_{overall}&lt;1/(1-Fraction_{enhanced}) \\]"},{"location":"study/cs/system/#great-architectures-ideas","title":"Great architectures ideas","text":"<ul> <li> <p>Design for Moore's law</p> </li> <li> <p>Use abstraction to simplify design</p> </li> <li> <p>Make the common case fast</p> </li> <li> <p>Improve performance via parallelism</p> </li> <li> <p>Improve performance via pipelining</p> </li> <li> <p>v=Improve performance via prediction</p> </li> <li> <p>Use a hierarchy of memories.</p> </li> <li> <p>Improve dependability via redudancy</p> </li> </ul>"},{"location":"study/math/","title":"Math","text":"<p>Here is some maths knowledge from books. I want to emphasize what is important.</p>"},{"location":"study/math/discrete/quadratic-probing/","title":"Quadratic probing","text":""},{"location":"study/math/discrete/quadratic-probing/#_2","title":"\u6563\u5217\u8868\u2014\u2014\u5e73\u65b9\u63a2\u6d4b\u2014\u2014\u4e8c\u6b21\u5269\u4f59","text":""},{"location":"study/math/discrete/quadratic-probing/#_3","title":"\u6563\u5217\u8868\u7684\u5e73\u65b9\u63a2\u6d4b","text":"<p>\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u6563\u5217\u8868\uff08Hash Table\uff09\u7684\u5e73\u65b9\u63a2\u6d4b\uff08Quadratic Probing\uff09\uff1a</p> <p>\u5e73\u65b9\u63a2\u6d4b \u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u3002\u54c8\u5e0c\u51b2\u7a81\u53d1\u751f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u4e0d\u540c\u7684\u952e\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65f6\u3002\u5e73\u65b9\u63a2\u6d4b\u901a\u8fc7\u6539\u53d8\u51b2\u7a81\u4f4d\u7f6e\u7684\u63a2\u6d4b\u65b9\u5f0f\uff0c\u6765\u51cf\u5c11\u51b2\u7a81\u5e76\u5747\u5300\u5206\u5e03\u952e\u503c\u3002 \u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\u63a2\u6d4b\u4f4d\u7f6e=(\u521d\u59cb\u54c8\u5e0c\u4f4d\u7f6e+i^2)%\u8868\u957f</p> <p>\u518d\u6765\u770b\u770b\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014C\u8bed\u8a00\u63cf\u8ff0\uff08Mark Allen Weiss \u7b2c\u4e8c\u7248 \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e\uff09\u300b119\u9875\u5b9a\u74065.1\u7684\u8bc1\u660e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u5173\u5e73\u65b9\u63a2\u6d4b\u7684\u91cd\u8981\u7ed3\u8bba\uff0c\u8fd9\u91cc\u7684\u8bc1\u660e\u4f3c\u4e4e\u4e0d\u662f\u5f88\u5b8c\u6574\u3002</p> <p>\u5b9a\u74065.1\uff1a\u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u662f\u7a7a\u7684\u65f6\u5019\uff0c\u603b\u80fd\u591f\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</p> <p></p> <p>\u8bc1\u660e\u7684\u5012\u6570\u7b2c\u4e8c\u884c</p> <p>\u201c\u56e0\u6b64\u4efb\u4f55\u5143\u7d20\u90fd\u6709 \\(\\lfloor TableSize/2\\rfloor\\) \u4e2a\u53ef\u80fd\u88ab\u653e\u5230\u7684\u4f4d\u7f6e\u3002\u201d</p> <p>\u8fd9\u53e5\u8bdd\u4e4d\u4e00\u770b\u5e76\u4e0d\u663e\u7136\uff0c\u56e0\u4e3a\u5b9a\u7406\u5148\u8bc1\u660e\u4e86\u524d \\(\\lfloor TableSize/2\\rfloor\\) \u4e2a\u5907\u9009\u4f4d\u7f6e\u662f\u4e92\u5f02\u7684\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bf4\u660e\u540e\u9762\u7684 \\(\\lfloor TableSize/2\\rfloor\\) \u662f\u4ec0\u4e48\u60c5\u51b5\u3002\u6709\u53ef\u80fd\u540e\u9762\u53ef\u80fd\u7684\u60c5\u51b5\u4e0e\u524d\u9762\u4e0d\u540c\uff0c\u5bfc\u81f4\u4efb\u4f55\u5143\u7d20\u90fd\u6709 \\(TableSize\\) \u4e2a\u53ef\u80fd\u7684\u4f4d\u7f6e\u3002\u90a3\u6309\u4e66\u4e2d\u7684\u8bf4\u6cd5\uff0c\u5e94\u8be5\u5728\u6b64\u53e5\u7684 \\(\\lfloor TableSize/2\\rfloor\\) \u524d\u52a0\u201c\u81f3\u5c11\u201d\u3002 \u4f46\u662f\u6211\u4eec\u4e0b\u9762\u4f1a\u8bc1\u660e\uff0c\u4e66\u4e2d\u7684\u8bf4\u6cd5\u662f\u5bf9\u7684\uff0c\u5373\u53ea\u6709 \\(\\lfloor TableSize/2\\rfloor\\) \u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u9762\u4e00\u534a\u7684\u5907\u9009\u4f4d\u7f6e\u548c\u524d\u9762\u4e00\u534a\u662f\u76f8\u540c\u7684\u3002</p> <p>\u5e73\u65b9\u63a2\u6d4b\u662f\u5728\u8ba1\u7b97\u51b2\u7a81\u5143\u7d20\u5728\u53d1\u751f\u7b2c \\(i\\) \u6b21\u51b2\u7a81\u5c06\u88ab\u653e\u5230\u7684\u65b0\u4f4d\u7f6e\uff1a \\(F(x,i) = x \\%p+i^2\\)\uff0c\u5047\u8bbe \\(p\\) \u4e3a \\(hash table\\) \u7684\u5927\u5c0f\uff0c\u4e3a\u5947\u7d20\u6570\uff0c\\(hash(x)=x\\%p\\) ,</p> <p>\u90a3\u4e48\u66f4\u786e\u5207\u5730\uff0c\\(F(x,i) = (x \\%p+i^2)\\%p=(x\\%p+i^2\\%p)\\%p\\) \u8fd9\u662f\u56e0\u4e3a\\((a+b)\\%p=(a\\%p+b\\%p)\\%p\\).</p> <p>\u4e0a\u9762 \\(F(x,i)\\)\u7684\u7ed3\u679c\u5728 \\(x\\) \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u53ea\u53d6\u51b3\u4e8e \\(i\\)\uff0c\u5373\u51b2\u7a81\u53d1\u751f\u7684\u6b21\u6570\u3002\u6240\u4ee5\u53ea\u8003\u8651 \\(i^2\\%p\\) \u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\u6240\u6709\u7684\u53ef\u80fd\u7ed3\u679c\u5373\u53ef\u3002\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7\\(p\\)\u4e2a\uff08\u56e0\u4e3a\u6a21 \\(p\\) \u7684\u540c\u4f59\u7c7b\u53ea\u6709\\(p\\)\u79cd\uff09\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\\(i^2\\%p\\) \u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\u6240\u6709\u7684\u53ef\u80fd\u7ed3\u679c\u5c31\u662f\u6a21 \\(p\\) \u7684\u6240\u6709\u4e8c\u6b21\u5269\u4f59\uff0c\u7ed3\u679c\u7684\u4e2a\u6570\u5c31\u662f\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\u52a0\u4e00\uff0c\u4e0b\u9762\u5c06\u4f1a\u8bc1\u660e\u6a21 \\(p\\) \u7684\u4e8c\u6b21\u5269\u4f59\u4e2a\u6570\u4e3a \\(\\frac{p-1}{2}\\)\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_4","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u5b9a\u4e49","text":"<p>\u4e8c\u6b21\u5269\u4f59\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570\\(a\\)\u79f0\u4e3a\u6a21\\(p\\)\u7684\u4e8c\u6b21\u5269\u4f59\uff0c\u5982\u679c\u5b58\u5728\u67d0\u4e2a\u6574\u6570\\(i\\)\u4f7f\u5f97\\(i^2\\equiv a \\pmod{p}\\) \u6210\u7acb\uff0c\u5426\u5219\u79f0\u4e3a\u6a21\\(p\\)\u7684\u4e8c\u6b21\u975e\u5269\u4f59\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u8bb0\u53f7\uff1a\u52d2\u8ba9\u5fb7\u7b26\u53f7\uff08Legendre\uff09\u6765\u8868\u793a\u4e8c\u6b21\u5269\u4f59\u5173\u7cfb $$ (\\frac{a}{p})= \\begin{cases} 1, &amp; a \\text{\u662f} p \\text{\u7684\u4e8c\u6b21\u5269\u4f59}\\ -1, &amp; a \\text{\u662f} p \\text{\u7684\u4e8c\u6b21\u975e\u5269\u4f59}\\ 0, &amp; p|a \\end{cases} $$</p>"},{"location":"study/math/discrete/quadratic-probing/#_5","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u6c42\u89e3\u6a21 \\(p\\)\u7684\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff0c\u5373 \\(i^2\\equiv a \\pmod{p}\\)\u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\uff0c\u6b63\u6574\u6570 \\(a\\)\u7684\u4e2a\u6570\u3002</p> <p>\u5148\u8003\u8651 \\(i\\) \u7684\u53d6\u503c\uff0c\u663e\u7136\u53ea\u8981\u4ece1\u53d6\u5230p\u5373\u53ef\uff0c\u82e5\\(i&gt;p\uff0c\\)\u5219 \\(\\exists q\\in Z, i=qp+r, 0&lt;r&lt;p\\) \u6b64\u65f6 \\(i^2\\%p=r^2\\%p\\)\uff0c\u4ecd\u53ea\u9700\u8003\u8651\u5c0f\u4e8ep\u7684\u60c5\u51b5\u5373\u53ef\u3002</p> <p>\u8bbe \\(1\\leq x &lt; y \\leq p\\),\u4e14\\(x^2\\%p\\equiv y^2\\%p\\). \u6545\u6709 \\(p|(x^2-y^2)\\) \uff0c\u5373 \\(p|(x+y)(x-y)\\) \u7531\\(x,y\\)\u7684\u53d6\u503c\u8303\u56f4\u53ef\u77e5 \\(p|(x+y)\\)\uff0c\u8fdb\u4e00\u6b65\u5730\uff0c \\(x+y=p\\)\u3002</p> <p>\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u5173\u7cfb\uff1a\u5f53\u4e24\u4e2a\u6570\u548c\u4e3a\u6a21\u6570\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u7684\u5e73\u65b9\u6a21\u9664\u8fd9\u4e2a\u6a21\u6570\u7ed3\u679c\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e \\((1,p-1),(2,p-2),\u00b7\u00b7\u00b7\\) \u8fd9 \\(\\frac{p-1}{2}\\) \u4e2a\u6570\u5bf9\uff08\u522b\u5fd8\u4e86p\u4e3a\u5947\u7d20\u6570\uff09\uff0c\u5904\u4e8e\u540c\u4e00\u6570\u5bf9\u4e2d\u7684\u6570\uff0c\u5b83\u4eec\u7684\u5e73\u65b9\u6a21\u9664\\(p\\)\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u4e0d\u540c\u6570\u5bf9\u4e2d\u7684\u5143\u7d20\u6a21\u9664\\(p\\)\u7ed3\u679c\u4e0d\u540c\uff0c\u5171\u6709 \\(\\frac{p-1}{2}\\) \u4e2a\u7ed3\u679c\u3002</p> <p>\u56e0\u6b64\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\u5c31\u662f \\(\\frac{p-1}{2}\\)\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_6","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u68c0\u9a8c","text":"<p>\u6709\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u77e5 \\(i^2\\equiv a \\pmod{p}\\) \u5f0f\u4e2d\u7684\\(a, p\\)\u8981\u53bb\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684 \\(i\\)\uff08\u8fd9\u5c31\u662f\u6c42\u89e3\u4e8c\u6b21\u5269\u4f59\u65b9\u7a0b\uff09\u3002\u4f46\u662f\u8fd9\u6837\u7684\\(i\\)\u5e76\u4e0d\u4e00\u5b9a\u5b58\u5728\uff08\u8fd9\u79cd\u60c5\u51b5\u5c31\u79f0a\u662f\u6a21p\u7684\u4e8c\u6b21\u975e\u5269\u4f59\uff09\u3002</p> <p>\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u6a21\u9664 \\(p\\) \u7684\u4e8c\u6b21\u5269\u4f59\u662f\u4ec0\u4e48\uff0c\u8fd9\u65f6\u5019 \\(i\\) \u5c31\u66f4\u4e0d\u77e5\u9053\u4e86\uff0c\u4e0d\u8fc7\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u77e5\u9053\u4e86\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u53ea\u9700\u4ece1\u5230 \\(\\frac{p-1}{2}\\) \u4e4b\u95f4\u4e00\u4e2a\u4e00\u4e2a\u68c0\u9a8c\u5c31\u884c\u3002\u90a3\u4e48\u5982\u4f55\u68c0\u9a8c\u4e00\u4e2a\u6570\u5b83\u662f\u4e0d\u662f\u6a21\u9664p\u7684\u4e8c\u6b21\u5269\u4f59\u5462\uff1f\u6b27\u62c9\u544a\u8bc9\u6211\u4eec\u6709\u6b27\u62c9\u51c6\u5219\uff08Euler Criterion\uff09\uff1a $$ (\\frac{a}{p})\\equiv a^{\\frac{p-1}{2}}\\pmod{p}= \\begin{cases} 1 \\pmod{p} &amp; \\text{\u5982\u679c } a \\text{ \u662f\u6a21 } p \\text{ \u7684\u4e8c\u6b21\u5269\u4f59} \\ -1 \\pmod{p} &amp; \\text{\u5982\u679c } a \\text{ \u4e0d\u662f\u6a21 } p \\text{ \u7684\u4e8c\u6b21\u5269\u4f59} \\end{cases} $$</p> <p>\u6240\u4ee5\u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\u4e0a\u6765\uff0c\u51b2\u7a81\u65f6\u53d1\u751f\u65f6\uff0c\u5229\u7528\u5e73\u65b9\u63a2\u6d4b \\(hashtable\\) \u4e2d\u6240\u6709\u5907\u9009\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u6a21  \\(TableSize\\) \u7684\u4e8c\u6b21\u5269\u4f59 (\\(i^2\\%p\\))  \u52a0\u4e0a\u4e00\u4e2a \\(x\\%p\\) \u518d\u6a21\u9664 \\(p\\)\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u7528\u8003\u8651\u4e2a\u6570\uff0c\u5b83\u6709 \\(\\lfloor TableSize/ 2\\rfloor\\) \u4e2a\u3002 \u4e8e\u662f\uff0c\u518d\u770b\u5b9a\u74065.1\uff0c\u8868\u81f3\u5c11\u4e00\u534a\u7a7a\u65f6\uff0c\u4e8c\u6b21\u5269\u4f59\u81f3\u5c11\u6709\u4e24\u4e2a\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709\u7a7a\u7684\u5907\u9009\u4f4d\u7f6e\uff0c\u6545\u4e00\u5b9a\u53ef\u4ee5\u653e\u4e0b\u4e00\u4e2a\u65b0\u5143\u7d20\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_7","title":"\u6563\u5217\u5e73\u65b9\u63a2\u6d4b\u63d2\u5165\u5931\u8d25\u95ee\u9898","text":"<p>\u6700\u540e\u6765\u770b\u4e00\u4e2a\u5224\u65ad\u9898\uff0c\u6b63\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u7f18\u8d77\u3002</p> <p>If 7 elements have been stored in a hash table of size 13 at positions { 0, 1, 2, 4, 5, 10, 11 }, and the hash function is H(x) = x%13. Then an empty spot can't be found when inserting the element 40 with quadratic probing.</p> <p>\u7b54\u6848\u662f\u2714 \u4e00\u822c\u7684\u89e3\u6cd5\u662f\u4e0d\u65ad\u7528 \\((40+i^2) mod{13}(i=0,1,2, \\cdots)\\) \u6c42\u5f97\u65b0\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u540e\u53d1\u73b0\u7ed3\u679c\u662f \\(1, 2, 5, 10, 4, 0, 11, 11, 0, 4, 10, 5, 2\\) \u8fd913\u4e2a\u6570\u5faa\u73af\uff0c\u5168\u662f\u9898\u4e2d\u5df2\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee540\u4e0d\u80fd\u6210\u529f\u63d2\u5165\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u5bf9\u4e8c\u6b21\u5269\u4f59\u7684\u8ba8\u8bba\u5bf9\u8fd9\u4e2a\u5faa\u73af\u7ed9\u51fa\u89e3\u91ca\u3002 \u5148\u8f6c\u6362\u4e00\u4e0b\u63d2\u5165\u4f4d\u7f6e\u8868\u8fbe\u5f0f\uff1a \\((40+i^2) mod{13}=(40 mod{13}+i^2 mod{13})mod{13}=(1+i^2 mod{13})mod{13},(i=0,1,2, \\cdots)\\)\uff0c \u8fd9\u4e2a\u7ed3\u679c\u53ef\u80fd\u7684\u53d6\u503c\u4e2a\u6570\uff08\u4e5f\u5c31\u662f\u53ef\u63d2\u5165\u4f4d\u7f6e\u4e2a\u6570\uff09\uff0c\u53d6\u51b3\u4e8e $i^2mod{13}\u7684\u503c\u7684\u4e2a\u6570 $\u3002</p> <p>\u9996\u5148\uff0c\u53ef\u4ee5\u786e\u5b9a\u6a21\u966413\u7684\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff1a\\(\\frac{p-1}{2}=\\frac{13-1}{2}=6\\)\u3002 \u5728\u8fd9\u9053\u9898\u91cc\uff0c\u6a21\u6570\u7684\u7ed3\u679c\u53ef\u4ee5\u4e3a0\uff0c\u6545\u5728\u6563\u5217\u4e2d\u6709 \\(6+1=7\\) \u4e2a\u53ef\u63d2\u5165\u4f4d\u7f6e\u3002\u63a5\u7740\u6211\u4eec\u5c31\u4ec5\u9700\u5224\u65ad\u6240\u7ed9\u7684positions\u662f\u5426\u4e3a\u8fd97\u4e2a\u53ef\u63d2\u5165\u4f4d\u7f6e\u3002\uff08\u5b9e\u9645\u4e0a\u5f97\u5230\u7684\u5faa\u73af\u5df2\u7ecf\u8bc1\u5b9e\u4e86\u786e\u5b9e\u662f\u8fd97\u4e2a\uff09</p> <p>\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6b27\u62c9\u51c6\u5219\uff0c\u5c06\u6240\u7ed9\u7684position\u6807\u53f7\u51cf\u53bb1\u540e\u6c426\u6b21\u65b9\u7136\u540e\u6a21\u966413\uff0c\u770b\u770b\u7ed3\u679c\u662f\u4e0d\u662f1\uff08\u6b64\u65f6\u5373\u4e3a\u6a2113\u7684\u4e8c\u6b21\u5269\u4f59\uff09\u6216\u80050\u3002 \u6ce8\u610f\uff1a0\u51cf\u53bb1\u7ed3\u679c\u53d612\uff0c\u56e0\u4e3a \\(1+12=13\\equiv0 mod{13}\\)</p> <p>\u4e0b\u9762\u662f\u9a8c\u8bc1\u7684Python\u4ee3\u7801\uff1a</p> <pre><code>positions=[0,1,2,4,5,10,11]\nres=[0,1]\np=13\nfor position in positions:\n    if position==0:\n        position=13\n    if (position-1)**((p-1)/2)%13 in res:\n        print(f\"position {position%13} is not insertable\")\n</code></pre>"},{"location":"study/math/linear%20algebra/","title":"Linear algebra","text":"<p>Here are some linear algebra knowledge.</p>","tags":["Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/","title":"SVD","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#introduction","title":"Introduction","text":"<p>SVD(singular value decomposition) is a mathematical method to process matrix. SVD can help extract the key traits of the number in a matrix. Apparently we can use it to process images because images are expressed as matries in computer science. This article is aimed to figure out why and how the SVD can extract the traits of the matrix. Plus I want to give several examples of its application in computere science.  </p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd_1","title":"SVD","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#start-from-one-way-to-factorize-matrix","title":"Start from one way to factorize matrix","text":"<p>Here is a matrix with \\(rank=1\\):</p> \\[ A=\\begin{pmatrix}   1&amp;2&amp;3 \\\\   1&amp;2&amp;3 \\end{pmatrix} \\] <p>It can be written as a column times a row:</p> \\[ A=\\begin{pmatrix}   1&amp;2&amp;3 \\\\   1&amp;2&amp;3 \\end{pmatrix}=\\begin{pmatrix}   1 \\\\   1 \\end{pmatrix}\\begin{pmatrix}   1&amp;2&amp;3 \\end{pmatrix} \\] <p>We can say the matrix is decomposed as a column times a row and more generally, for any matrix, it can be decomposed as the sum of \\(column \\times row\\) with different coefficients. A coefficient decides the weight of the specific \\(column \\times row\\) in the whole sum. Here is an example:</p> \\[ A=\\begin{pmatrix}   a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}=a\\begin{pmatrix}   1 \\\\   0 \\end{pmatrix}\\begin{pmatrix}   1&amp;0&amp;0 \\end{pmatrix}+b\\begin{pmatrix}   0 \\\\   1 \\end{pmatrix}\\begin{pmatrix}   0&amp;1&amp;0 \\end{pmatrix} \\] <p>It can be formalised as</p> \\[ A=\\sigma_1{u_1}v_1^{T}+\\sigma_2u_2v_2^{T} \\] <p>Here \\(a\\)(\\(\\sigma_1\\)) is the weight of the first \\(column \\times row\\) on the left and \\(b\\)(\\(\\sigma_2\\)) is the only other one. If \\(a\\) is much more larger than \\(b\\), we can neglect the second product to approximate \\(A\\) as only one \\(column \\times row\\) with its coefficient. This is useful to store the matrix \\(A\\) with less space.  </p> <p>But where is the trait? Let's get it now: \\(A\\) is by \\(m\\times n\\), and suppose it has been decomposed as follow:</p> \\[ A=\\sigma_1{u_1}v_1^{T}+\\sigma_2u_2v_2^{T}+\\cdots+\\sigma_n u_n v_n^{T} \\tag{1} \\] <p>where \\(\\sigma_1&gt;\\sigma_2&gt;\\cdots&gt;\\sigma_n\\).</p> <p>We can take in equation (1) in this way: \\(\\sigma_i\\) is the weight, \\(u_i\\) is the trait vector and \\(v_i^{T}\\) is the combination vector who gives a matrix \\(A_i\\) of \\(m \\times n\\) by \\(u_i v_i^{T}\\), whose columns are the multiple of \\(u_i\\) with their coefficients in \\(v_i^{T}\\).</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd-form","title":"SVD form","text":"<p>In matrix notation and more formalised, the former example could be written</p> \\[ A=\\begin{pmatrix}   a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}=\\begin{pmatrix}   1&amp;0 \\\\   0&amp;1 \\end{pmatrix}\\begin{pmatrix}    a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}\\begin{pmatrix}   1&amp;0&amp;0 \\\\   0&amp;1&amp;0 \\\\   0&amp;0&amp;1 \\end{pmatrix} \\] <p>In a general form of \\(A_{m\\times n}\\), the SVD wants to write \\(A\\) as</p> \\[ A=U\\Sigma V^T \\tag{2} \\] <p>\\(U_{m\\times m}\\) is called the left singular matrix with left singular vectors as its colomns and \\(V^{T}_{n\\times n}\\) is the right one. \\(\\Sigma_{m\\times n}\\) has singular values \\(\\sigma_i\\) arranged in descending order in position \\(\\Sigma_{ii}\\)  and zeros in other positions.  </p> <p>Usually, \\(U\\) and \\(V\\) are orthogonal matrix. Therefore, \\(V^{-1}=V^{T}\\), and multiply \\(V\\) in both side of equation (2) we can get another form of it and it is where equation (2) comes from:</p> \\[ AV=U\\Sigma \\tag{3} \\] <p>The idea is the same as that of diagonalising a real and symmetric square matrix with orthogonal matrix:</p> \\[ A=Q\\Lambda Q^T \\Leftrightarrow AQ=Q\\Lambda \\] <p>where \\(\\Lambda\\) is a diagonal matrix with eigen values of \\(A\\) and \\(Q\\) is the orthogonal matrix with corresponding orthonormal eigen vectors.  </p> <p>Back to equation (3), rewrite it with specific vectors:</p> \\[ A\\begin{pmatrix} v_1&amp;v_2&amp;\\cdots &amp;v_n \\end{pmatrix}=\\begin{pmatrix} u_1&amp;u_2&amp;\\cdots &amp;u_m \\end{pmatrix}\\begin{pmatrix} \\sigma_1&amp;0&amp;\\cdots &amp;0 \\\\ 0       &amp;\\sigma_2 &amp;\\cdots&amp;0\\\\ \\vdots &amp;\\vdots&amp;\\cdots&amp;0 \\end{pmatrix}_{m\\times n} \\] <p>Suppose there are \\(\\sigma_1\\) to \\(\\sigma_r\\). Then we have</p> \\[ Av_i=\\sigma_i u_i, i=1,2,\\cdots,r \\tag{4} \\] <p>What we need to do is find these singular values \\(\\sigma_i\\) and corresponding sigular vectors \\(v_i\\) and \\(u_i\\), where \\(u_i\\) can be given by \\(v_i\\) and \\(\\sigma_i\\) with equation (4).  </p> <p>Transpose both sides of equation (2):</p> \\[ A^T=V\\Sigma^T U^T \\] <p>Then multiply with \\(A\\):</p> \\[ AA^T=(U\\Sigma V^T)(V\\Sigma^T U^T)=U(\\Sigma\\Sigma^T)U^T \\tag{5} \\] <p>\\((\\Sigma\\Sigma^T)\\) is a \\({m\\times m}\\) matrix with \\(\\sigma_1^2,\\sigma_2^2,\\cdots,\\sigma_r^2\\) and zeros on \\((\\Sigma\\Sigma^T)_{ii}\\) and zero otherwise. Therefore, \\(\\sigma_i^2(i=1,2,...,r)\\) are eigenvalues of \\(AA^T\\), with \\(u_i\\) being their corresponding eigenvectors. Similarly, we can also get \\(\\sigma_i^2(i=1,2,...,r)\\) are eigenvalues of \\(A^TA\\), with \\(v_i\\) being their corresponding eigenvectors.</p> <ul> <li>Conclusion: Now let's summarize the whole process of SVD. Our aim is to write \\(A\\) as \\(U\\Sigma V^T\\)</li> </ul>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd-applicationpca","title":"SVD application\u2014\u2014PCA","text":"<p>PCA(principal component analysis) is a dimensionality reduction technique used in statistics and machine learning. It transforms a dataset with many correlated variables into a smaller set of uncorrelated variables called principal components, while preserving as much variance as possible. SVD is an effective way to implement PCA.</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#a-visulized-example","title":"A visulized example","text":"<p>Take \\(A_{m\\times n}\\) in this way: A set of \\(n\\) samples with \\(m\\) variables of measurement. Here is an example from reference[1] listed last.  </p> <p>Suppose we have \\(n\\) different points in a 2-D plane and we want to find out the principal direction of these points, namely a line that will be as close as possible to the points.  </p> <p>First, we center each of the measurement: \\(x,y\\) in this example. Substract \\(\\bar{x}\\) and \\(\\bar{y}\\) for each \\(x_i\\) and \\(y_i\\). We can get a matrix \\(A_{2\\times n}\\) with each of its row having average of \\(0\\).</p> <p>We can draw these centered points in a coordinate. The center of these points is the origin. It helps a lot when we try to find the direction formed by these points.</p> <p>\\(R^2\\) or a subspace in \\(R^m\\)\"&gt;</p> <p>Now consider doing SVD on \\(A\\):</p> \\[ A=U\\Sigma V^T=\\begin{pmatrix} u_1&amp;u_2 \\end{pmatrix}\\Sigma \\begin{pmatrix} v_1&amp;v_2&amp;\\cdots&amp;v_n \\end{pmatrix}^T \\] <p>The leading sigular vector with bigger sigular value shows the direction in the former scatter graph for the reasons we talk about above.  </p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#least-perpendicular-squares","title":"Least perpendicular squares","text":"<p>Also this direction is the direction with least perpendicular squares.</p> <p>Namely, the sum of squared distances from the points to the line is a minimum.  </p> <p>Proof: Consider a triangle formed by the origin, the line and the point \\(a_i\\)(a vector with\\((x_i,y_i)\\)). Using Pythagorean theorem: $$ ||a_i||^2=|a_i^Tu_1|^2+|a_i^Tu_2|^2 $$</p> <p>The first term on the right is the projection of \\(a_i\\) on the direction of \\(u_1\\)(unit vector), namely the principal direction and the second term is the distance square we want. Sum all the distance squares:</p> \\[ d_{sum}=\\sum_{i=1}^{n}|a_i^Tu_2|^2=\\sum_{i=1}^{n}||a_i||^2-\\sum_{i=1}^{n}|a_i^Tu_1|^2 \\] <p>The first term on the right is a constant for given points and the second term can be written as</p> \\[ \\sum_{i=1}^{n}|a_i^Tu_1|^2=\\begin{pmatrix} a_1^Tu_1&amp;a_2^Tu_1\\cdots&amp;a_n^Tu_1 \\end{pmatrix}\\begin{pmatrix} a_1^Tu_1\\\\ a_2^Tu_1\\\\ \\vdots\\\\ a_n^Tu_1 \\end{pmatrix}=u_1^TAA^Tu_1 \\] <p>Minimise \\(d_{sum}\\) means maximise \\(u_1^TAA^Tu_1\\). Of course it arrives it maximum when \\(u_1\\) is the singular vector for the maximum singular value. This cooresponds with the PCA by SVD.</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#the-general-form","title":"The general form","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#application-in-computer-science","title":"Application in computer science","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#face-recognition","title":"Face recognition","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svdfrom-the-operator-perspective","title":"SVD\u2014\u2014from the operator perspective","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#polar-decomposition","title":"Polar decomposition","text":"<p>\\(A=U\\Sigma V^T=(UV^T) (V\\Sigma V^T)=QS\\)</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#references","title":"References","text":"<ul> <li>[1] Chapter 7 Introduction to linear algebra 5th by Gilbert Strang  </li> <li>[2] Eigenface Wiki</li> <li>[3] Chapter 7 Linear algebra done right 4th by Sheldon Axler</li> </ul>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/maths%20analysis/maths%20analysis/","title":"Maths","text":""},{"location":"study/math/maths%20analysis/maths%20analysis/#calculus","title":"Calculus","text":"\\[ \\sum_{i=1}^{n}i^2=\\frac{n(n+1)(2n+1)}{6} \\]"},{"location":"study/math/probability/","title":"probability theorem","text":"<p>This is the probability theorem section.</p>"},{"location":"study/network/","title":"Introduction","text":"<p>Here will record the network course I am learning: Computer Network: A Top-Down Approach. Here is the original course site:</p> <p>Computer Network: A top-Down Approach.</p> <p>Here is the table of contents:</p> <ol> <li> <p>Introduction</p> </li> <li> <p>Application Layer</p> </li> <li> <p>Transport Layer</p> </li> <li> <p>Internet Layer</p> </li> <li> <p>Link layer</p> </li> </ol>"},{"location":"study/network/application%20layer/","title":"The application layer","text":""},{"location":"study/network/application%20layer/#principles-of-network-applications","title":"Principles of Network Applications","text":""},{"location":"study/network/application%20layer/#communication-paradigm","title":"Communication paradigm","text":"<p>Client-server paradigm: server:</p> <ul> <li>always-on host</li> <li>permanent IP address</li> <li>often in data centers, for scaling clients:</li> <li>contact, communicate with server</li> <li>may be intermittently connected</li> <li>may have dynamic IP addresses</li> <li>do not communicate directly with each other examples: HTTP, IMAP, FTP</li> </ul> <p>Peer-peer architecture:</p> <ul> <li>no always-on server</li> <li>arbitrary end systems directly communicate</li> <li>peers request service from other peers, provide service in return to other peers</li> <li>peers are intermittently connected and change IP addresses example: P2P file sharing [BitTorrent]</li> </ul>"},{"location":"study/network/application%20layer/#sockets","title":"Sockets","text":"<p>Process: program running within a host(resources management and allocation)</p> <ul> <li>Addressing: IP address + port</li> <li>Communication:</li> <li>within same host: IPC(inter-process communication)</li> <li>different host: exchanging messages</li> </ul> <p></p>"},{"location":"study/network/application%20layer/#protocols","title":"Protocols","text":"<p>Securing TCP:</p> <p>Vanilla TCP &amp; UDP sockets:</p> <ul> <li>no encryption</li> <li>cleartext passwords sent into socket traverse Internet  in cleartext (!)</li> </ul> <p>Transport Layer Security (TLS):</p> <ul> <li>provides encrypted TCP connections</li> <li>data integrity</li> <li>end-point authentication</li> </ul>"},{"location":"study/network/application%20layer/#web-and-http","title":"Web and HTTP","text":""},{"location":"study/network/application%20layer/#http","title":"HTTP","text":"<p>HTTP: hypertext transfer protocol</p> <ul> <li>Web's application-layer protocol</li> <li>client/server model</li> <li>stateless: server maintains no infomation about past client requests(so we need cookie)</li> <li>HTTP uses TCP in the transport-layer</li> </ul> <p>There are two types of HTTP connections:</p> <ul> <li>Non-persistent HTTP: at most one object sent over TCP connection. It is used by HTTP/1.0 by default.</li> <li>Persistent HTTP: multiple objects can be sent over single TCP connection between client, and that server. Used by HTTP/1.1 by default.</li> </ul> <p>Non-persistent HTTP example:</p> <p></p> <p>But it is bothering to initiate TCP every time we want to sent a request because it takes time and gets OS overhead:</p> <p></p> <p>Info</p> <p>RTT is roundtrip time</p> <p>Therefore, we use persistent HTTP(HTTP1.1) more. Property of persistent  HTTP (HTTP1.1):</p> <ul> <li>server leaves connection open after sending response</li> <li>subsequent HTTP messages  between same client/server sent over open connection</li> <li>client sends requests as soon as it encounters a referenced object</li> <li>as little as one RTT for all the referenced objects (cutting response time in half)</li> </ul>"},{"location":"study/network/application%20layer/#http-message","title":"HTTP message","text":"<p>Request message HTTP request message general format:</p> <p></p> <p>Other HTTP request messages:</p> <ul> <li>GET method: include user data in URL field of HTTP GET request message (following a \u2018?\u2019)</li> <li>POST method: for web page including form input</li> <li>PUT method: uploads new file (object) to server, and completely replaces file that exists at specified URL with content in entity body of POST HTTP request message</li> <li>HEAD method: request the headers of a resource, but without the actual content (body) of the resource, similar to the GET method but without getting response body</li> </ul> <p>Response message:</p> <ul> <li>Format:</li> <li>Status line: HTTP version  Status code Status message</li> <li>Headers: Content-type etc</li> <li>Body(optional): html, jpeg, etc</li> </ul>"},{"location":"study/network/application%20layer/#cookies","title":"Cookies","text":"<p>Why we need cookies:</p> <p>HTTP GET/response interaction is stateless:  </p> <ul> <li>no need for client/server to track \u201cstate\u201d of multi-step exchange</li> <li>all HTTP requests are independent of each other</li> <li>no need for client/server to \u201crecover\u201d from a partially-completed-but-never-completely-completed transaction</li> </ul> <p>Considering stateful one protocol:  </p> <p></p> <p>What is Cookie</p> <p>Cookie is a small piece of data sent from a server to a client's web browser when client requests server for the first time and it is stored on the client side. Format: <code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; &lt;attributes&gt;</code></p> <p>What it can do:</p> <ul> <li>track user behavior on a given website (first party cookies)</li> <li>track user behavior across multiple websites (third party cookies) without user ever choosing to visit tracker site (!)</li> </ul> <p>How third party cookies(from websites you didn't choose to visit) track users' behavior?</p> <p>The third-party: like ad.com. When you visit example.com, it returns you cookies and you store it locally. This is the first party cookie. But at the same time you will request ad.com in some way and they send cookies to you and store them.</p> <p>When you visit example2.com, there is still ad there so you send request to ad.com and they store the cookies recording you have visited example2.com.</p> <p>In this way, the ad.com know you have visited example.com, example2.com and so on. It knows more about you and could give you personalized ads on sites with ad.com resourses embedded in.</p> <p></p> <p></p> <p>Tip</p> <p>In chrome the cookie of a specific site we are visiting can be seen by using application in developer tools.</p> GDPR <p>When cookies can identify an individual, cookies are considered personal data, subject to GDPR(general data protection regulation) personal data regulations.</p>"},{"location":"study/network/application%20layer/#web-caches","title":"Web caches","text":"<p>caching's goal</p> <p>To satisfy client requests without involving origin server. Then this can reduce response time for client request and reduce traffic on an institution's access link.</p> <p>How it works:</p> <ul> <li>user configures browser to point to a (local) Web cache and browser sends all HTTP requests to cache</li> <li>if object in cache: cache returns object to client</li> <li>else cache requests object from origin server, caches received object, then returns object to client</li> </ul> <p></p> Note <p>There is <code>Cache-Control</code> section in both HTTP request and response headers.</p> <ul> <li> <p>In request header, used to indicate how the client (usually a browser) wants to interact with caches when requesting a resource.</p> </li> <li> <p>In response header: used by the server to specify caching instructions for the client (browser) and intermediate caches (like CDNs or proxy servers). <code>Cache-Control: private</code>: the response is specific to a single user and should not be cached by shared caches (e.g., proxy servers or CDNs). However, it can be cached in the browser's local cache. <code>Cache-Control: public</code>:  the response can be cached by both private and shared caches. This is typically used for resources that are meant to be publicly available, such as images or static files.</p> </li> </ul>"},{"location":"study/network/application%20layer/#http2","title":"HTTP/2","text":"<p>Goal: decrease delay in multi-object HTTP requests</p> <p>Property: increased flexibility at server in sending objects to client:</p> <ol> <li>methods, status codes, most header fields unchanged from HTTP 1.1</li> <li>transmission order of requested objects based on client-specified object priority (not necessarily FCFS)</li> <li>push unrequested objects to client</li> <li>divide objects into frames, schedule frames to mitigate HOL(head-of-line) blocking(first large packets block the latter small ones)</li> </ol>"},{"location":"study/network/application%20layer/#e-mail","title":"E-mail","text":"<p>3 main components: user agent(mail reader), mail severs, SMTP(simple mail transfer protocol)</p>"},{"location":"study/network/application%20layer/#dnsdomain-name-system","title":"DNS(domain name system)","text":""},{"location":"study/network/application%20layer/#services","title":"Services","text":"<p>services:</p> <ul> <li>translate hostname to IP address</li> <li>host/mailserver aliasing</li> </ul>"},{"location":"study/network/application%20layer/#structure","title":"Structure","text":"<ul> <li>root name servers: official, contact-of-last-resort by name servers that can not resolve name</li> <li>Top-Level domain(TLD) severs:</li> <li>responsible for .com, .org, .net, .edu, .aero, .jobs, .museums, and all top-level country domains, e.g.: .cn, .uk, .fr, .ca, .jp</li> <li>Network Solutions: authoritative registry for .com, .net TLD</li> <li>Educause: .edu TLD</li> <li>Authoritative DNS servers: organization\u2019s own DNS server(s), providing authoritative hostname to IP mappings for organization\u2019s named hosts.</li> </ul>"},{"location":"study/network/application%20layer/#caching","title":"Caching","text":"<p>Once (any) name server learns mapping, it caches mapping, and immediately returns a cached mapping in response to a query.</p> <ul> <li>caching improves response time</li> <li>cache entries timeout (disappear) after some time (TTL)</li> <li>TLD servers typically cached in local name servers</li> </ul>"},{"location":"study/network/application%20layer/#dns-records","title":"DNS records","text":"<p>record types: </p> <p>DNS protocol messages:</p> <p></p> <p></p> <p>An DNS response message in wiresharp(results with display filter: dns)</p> <p></p>"},{"location":"study/network/application%20layer/#p2p-applications","title":"P2P applications","text":""},{"location":"study/network/application%20layer/#p2p-architecture","title":"P2P architecture","text":"<p>Basic idea</p> <ul> <li>no always-on server</li> <li>arbitrary end systems directly communicate</li> <li>peers request service from other peers, provide service in return to other peers</li> <li>self scalability \u2013 new peers bring new service capacity, and new service demands</li> <li>peers are intermittently connected and change IP addresses</li> <li>complex management</li> <li>examples: P2P file sharing (BitTorrent), streaming (KanKan), VoIP (Skype)</li> </ul>"},{"location":"study/network/application%20layer/#file-distribution-time","title":"File distribution time","text":"<p>For the following discussion: F is the file size and u and v are the upload and download speed respectively.</p> <p></p> <p></p>"},{"location":"study/network/application%20layer/#bittorrent","title":"BitTorrent","text":"<ul> <li>A peer joining torrent:  </li> <li>has no chunks, but will accumulate them over time from other peers</li> <li> <p>registers with tracker to get list of peers, connects to subset of peers (\u201cneighbors\u201d)</p> </li> <li> <p>while downloading, peer uploads chunks to other peers</p> </li> <li>peer may change peers with whom it exchanges chunks</li> <li>churn: peers may come and go</li> <li>once peer has entire file, it may (selfishly) leave or (altruistically) remain in torrent</li> </ul> <p>Requesting chunks: At any given time, different peers have different subsets of file chunks. Periodically, Alice asks each peer for list of chunks that they have. Alice requests missing chunks from peers, rarest first</p> <p>Sending chunks: tit-for-tat</p> <ul> <li>Alice sends chunks to those four peers currently sending her chunks at highest rate. Other peers are choked by Alice (do not receive chunks from her)</li> <li>Re-evaluate top 4 every 10 secs</li> <li>Every 30 secs: randomly select another peer, starts sending chunks, namely\u201coptimistically unchoke\u201d this peer and this newly chosen peer may join top 4</li> <li>For higher upload rate: find better trading partners</li> </ul>"},{"location":"study/network/application%20layer/#video-streaming-and-cnds","title":"Video streaming and CNDs","text":""},{"location":"study/network/application%20layer/#challenges","title":"Challenges","text":"<ul> <li>server-to-client bandwidth will vary over time</li> <li>packet loss, delay due to congestion will delay playout</li> </ul> <ul> <li>continuous playout constraint: during client video playout, playout timig must match original timing</li> </ul> <p>With client-side buffering:</p> <p></p>"},{"location":"study/network/application%20layer/#dash","title":"DASH","text":"<p>Refer to Dynamic, Adaptive streaming over HTTP. It is an approach that allows a client to adapt the encoding rate of retrieved video to network congestion conditions.</p> <ul> <li>server:</li> <li>divides video file into multiple chunks</li> <li>each chunk encoded at multiple different rates</li> <li>different rate encodings stored in different files</li> <li>files replicated in various CDN nodes</li> <li> <p>manifest file: provides URLs for different chunks</p> </li> <li> <p>client:</p> </li> <li>periodically estimates server-to-client bandwidth</li> <li>consulting manifest, requests one chunk at a time<ul> <li>chooses maximum coding rate sustainable given current bandwidth</li> <li>can choose different coding rates at different points in time (depending on available bandwidth at time), and from different servers</li> </ul> </li> </ul> <p>General streaming</p> <p>Streaming video = encoding + DASH + playout buffering</p>"},{"location":"study/network/application%20layer/#cndcontent-delivery-network","title":"CND(content delivery network)","text":"<p>challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users?</p> <p>store/serve multiple copies of videos at multiple geographically distributed sites (CDN)</p> <ul> <li>enter deep: push CDN servers deep into many access networks</li> <li>bring home: smaller number of larger clusters in POPs near access nets</li> </ul> <p></p>"},{"location":"study/network/application%20layer/#socket-programming-with-udp-and-tcp","title":"Socket Programming with UDP and TCP","text":""},{"location":"study/network/internet%20layer/","title":"The Internet Layer","text":"<p>graph TD   A[Start] --&gt; B[Step 1]   B --&gt; C[Step 2]   C --&gt; D[End]</p>"},{"location":"study/network/introduction/","title":"Chapter1 Computer network and the Internet","text":""},{"location":"study/network/introduction/#network-edge","title":"Network edge","text":"<ol> <li>hosts: clients and servers</li> </ol> <p>host sends packets of data. Packet transmission delay is defined as time needed to transmit L-bit packet into link. Suppose the transmission rate is \\(R\\), then delay= \\(L(bits)/R(bits/sec)\\) .</p> <ol> <li>access network:</li> <li>cable based access: frequency division multiplexing (FDM): different channels transmitted in different frequency bands</li> <li>DSL(digital subscriber line): use existing telephone line to central office DSLAM</li> <li> <p>wireless:</p> <ul> <li>Wireless local area networks(WLANS)</li> <li>Wide-area cellular access networks</li> </ul> </li> <li> <p>physical meadia:</p> </li> <li> <p>coaxial cable</p> </li> <li>fiber optic cable</li> <li>wireless radio</li> <li>radio link types:<ul> <li>wireless LAN</li> <li>Bluetooth</li> <li>terrestrial microwave</li> <li>satellite</li> </ul> </li> </ol>"},{"location":"study/network/introduction/#network-core","title":"Network core","text":"<p>Packet-switching: hosts break application-layer messages into packets. Then, network forwards packets from one router to the next, across links on path from source to destination.</p> <p>Entire packet must arrive at router before it can be transmitted on next link, so we need to store and forward.  </p> <p>Packet switching has the problem of queuing.</p> <p></p> <p>There is another way of switching: circuit switching.</p> <p></p>"},{"location":"study/network/introduction/#performance","title":"Performance","text":""},{"location":"study/network/introduction/#packet-delay","title":"Packet delay","text":"<p>Happens when packets queue in router buffers, waiting for ture for transmission.</p> <p></p> <p></p>"},{"location":"study/network/introduction/#packet-loss","title":"Packet loss","text":"<p>Happens when memeory to hold queued packets fills up</p>"},{"location":"study/network/introduction/#throughut","title":"Throughut","text":"<p>Throughput: rate (bits/time unit) at which bits are being sent from sender to receiver Bottleneck link: link on end-end path that constrains end-end throughput.</p>"},{"location":"study/network/introduction/#protocol-layers","title":"Protocol layers","text":"<p>There are different ways to represent protocol layers, like the OSI(Open Systems Interconnection) model(7 layers) and TCP/IP model(4 layers). Here we use the 5-layer model.</p> <ol> <li>application: supporting network applications</li> <li> <p>HTTP, IMAP, SMTP, DNS</p> </li> <li> <p>transport: process-process data transfer</p> </li> <li> <p>TCP, UDP</p> </li> <li> <p>network: routing of datagrams from source to destination</p> </li> <li> <p>IP, routing protocols</p> </li> <li> <p>link: data transfer between neighboring  network elements</p> </li> <li> <p>Ethernet, 802.11 (WiFi), PPP</p> </li> <li> <p>physical: bits \u201con the wire\u201d</p> </li> </ol> <p>PDU(protocol data unit) encapsulated in each layer:</p> <p>Application: message Transport: segment Network: datagrams Link: frame Physical: bits</p> <p></p>"},{"location":"study/network/link%20layer/","title":"The link layer","text":""},{"location":"study/network/transport%20layer/","title":"The transport layer","text":""},{"location":"study/oop/","title":"OOP","text":"","tags":["OOP"]},{"location":"study/oop/cpp/","title":"The basic knowledge of C++","text":""},{"location":"study/oop/cpp/#new-and-delete","title":"new and delete","text":"<p>\u7528\u4e8e\u5806\u4e0a\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\uff0c\u4e0eC\u4e2d<code>malloc</code>\u548c<code>free</code>\u76f8\u4f3c\u3002</p> <pre><code>int* pt=new int;\nint* pt1=new int[10];\ndelete pt;\ndelete[] pt1;\n\nMyClass* obj = new MyClass;  // \u8c03\u7528\u6784\u9020\u51fd\u6570(constructor)\ndelete obj;                  // \u8c03\u7528\u6790\u6784\u51fd\u6570(destructor)\u5e76\u91ca\u653e\u5185\u5b58\n</code></pre>"},{"location":"study/oop/cpp/#reference","title":"Reference","text":"<p>reference(\u5f15\u7528)\u672c\u8d28\u662f\u4e2a\u53d8\u91cf\u7684\u522b\u540d\uff0c\u5f15\u7528\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u522b\u540d\u8bbf\u95ee\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u590d\u5236\u5176\u503c\u3002<code>type &amp;ref = variable</code>\u3002 \u7279\u70b9\uff1a</p> <ul> <li>\u5f15\u7528\u5728\u58f0\u660e\u65f6\u5c31\u5fc5\u987b\u521d\u59cb\u5316\u4e14\u4e4b\u540e\u4e0d\u80fd\u6539\u53d8\u5f15\u7528\u7684\u5bf9\u8c61\u3002</li> <li>\u5f15\u7528\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u522b\u540d\uff0c\u5b83\u548c\u539f\u59cb\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u5185\u5b58\u5730\u5740\u3002</li> <li>\u5f15\u7528\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u907f\u514d\u4e86\u5927\u5bf9\u8c61\u7684\u590d\u5236\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u5916\u90e8\u5bf9\u8c61\u7684\u503c\u3002</li> </ul> <p>\u7528\u6cd5\uff1a</p> <pre><code>void increment(int &amp;x) {\n    x++;  // \u901a\u8fc7\u5f15\u7528\u4fee\u6539\u5916\u90e8\u53d8\u91cf\u7684\u503c\n}\n\n\nint&amp; getMax(int &amp;a, int &amp;b) {\n    return (a &gt; b) ? a : b;  // \u8fd4\u56de\u5f15\u7528\n}\nint x=10,y=20;\ngetMax(x,y)=30;  //\u73b0\u5728y=30\n\n\nvoid printValue(const int &amp;x) {//\u4f20\u9012\u5927\u578b\u5bf9\u8c61/\u7ed3\u6784\u4f53\u65f6\u5c24\u5176\u91cd\u8981\uff0c\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u590d\u5236\uff0c\u540c\u65f6\u4fdd\u62a4\u539f\u59cb\u6570\u636e\u3002\n    std::cout &lt;&lt; x &lt;&lt; std::endl;  // \u4e0d\u80fd\u4fee\u6539 x\n}\nint x;\nprintValue(x);\n</code></pre> <p>\u4e0e\u6307\u9488\u7684\u533a\u522b\uff1a | \u7279\u6027                   | \u5f15\u7528\uff08Reference\uff09                          | \u6307\u9488\uff08Pointer\uff09                             | |------------------------|-----------------------------------------|-------------------------------------------| | \u8bed\u6cd5               | <code>type &amp;ref = variable;</code>                  | <code>type* ptr = &amp;variable;</code>                   | | \u662f\u5426\u53ef\u4e3a\u7a7a         | \u4e0d\u53ef\u4e3a\u7a7a\uff08\u5fc5\u987b\u5f15\u7528\u6709\u6548\u7684\u5bf9\u8c61\uff09            | \u53ef\u4ee5\u4e3a\u7a7a\uff08\u6307\u5411 <code>nullptr</code>\uff09                  | | \u662f\u5426\u53ef\u4ee5\u4fee\u6539\u6307\u5411\u5bf9\u8c61 | \u4e0d\u53ef\u4ee5\u4fee\u6539\u5f15\u7528\u6307\u5411\u7684\u5bf9\u8c61                  | \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6307\u9488\u6765\u6539\u53d8\u5b83\u6307\u5411\u7684\u5bf9\u8c61        | | \u5185\u5b58\u5f00\u9500           | \u5f15\u7528\u6ca1\u6709\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500\uff0c\u5b83\u662f\u4e00\u4e2a\u522b\u540d      | \u6307\u9488\u6709\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500\uff08\u5b58\u50a8\u6307\u9488\u672c\u8eab\u7684\u5730\u5740\uff09  | | \u4f7f\u7528\u573a\u666f           | \u66f4\u5e38\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3001\u8fd4\u56de\u5f15\u7528\u7b49          | \u66f4\u7075\u6d3b\uff0c\u53ef\u4ee5\u6307\u5411\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u4f46\u9700\u8981\u7ba1\u7406\u5185\u5b58 | | \u5e38\u91cf\u5f15\u7528           | <code>const type &amp;</code>                           | <code>const type*</code>                              |</p> <p>\u9650\u5236\uff1a</p> <ul> <li>No pointers to reference: <code>int&amp; * p;//illegal;</code></li> <li>No array of references</li> </ul>"},{"location":"study/oop/cpp/#const","title":"const","text":"<p>C++\u4e2d\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u58f0\u660e\u5e38\u91cf\u6216\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u8868\u793a\u6570\u636e\u4e0d\u53ef\u4fee\u6539\u3002const \u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u786e\u5b9a\u7684\u5e38\u91cf\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u786e\u5b9a\u5176\u503c\u3002</p>"}]}