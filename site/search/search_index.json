{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cool Tea's Site","text":"<p>This is the homepage.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#others","title":"Others","text":""},{"location":"#code-block","title":"Code block","text":"printf.c<pre><code>int a=10;\nprintf(\"Hello World!\");\n</code></pre>"},{"location":"#math","title":"Math","text":"\\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\]"},{"location":"#expandable-note","title":"Expandable note","text":"\u70b9\u51fb\u5c55\u5f00\u5185\u5bb9 an easy note <p>here is how the note tag is implemented.</p> a warning <p>This is a warning</p> <p>\u9009\u9879\u5361\u793a\u4f8b</p> <p>\u9009\u9879\u5361\u5185\u5bb9 <pre><code>def hello():\n    print(\"Hello, world!\")\n</code></pre></p> \u9009\u9879\u5361info <p>\u9009\u9879\u5361\u5185\u5bb9 <pre><code>def hello():\n    print(\"Hello, world!\")\n</code></pre></p>"},{"location":"#footnotes","title":"footnotes","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5e26\u811a\u6ce8\u7684\u53e5\u5b50<sup>1</sup>\u3002 haafasdfeafesdfajjjakadfa;faeipfhawke</p>"},{"location":"#tasklist","title":"Tasklist","text":"<ul> <li> \u5df2\u5b8c\u6210\u4efb\u52a1</li> <li> \u672a\u5b8c\u6210\u4efb\u52a1</li> </ul> <ol> <li> <p>\u8fd9\u662f\u811a\u6ce8\u7684\u5185\u5bb9\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"about/","title":"About me","text":"<p>You can find me on the earth in the vast universe.</p>"},{"location":"home/","title":"Welcome to Cool Spy's Site","text":"<p>This is my home.</p>"},{"location":"home/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"home/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"home/#others","title":"Others","text":"<p>If you want to learn maths, see maths for further information</p> printf.c<pre><code>printf(\"Hello World!\");\n</code></pre> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] an easy note <p>here is how the note tag is implemented.</p>"},{"location":"Animation/animation/","title":"Aniamtion","text":"<p>You may think here will be how the animes are created. However, for the moment, I just plan to put some thoughts about what I watched and am watching here, in order that I can see how it really makes a difference to my life, either positively or negatively.</p>"},{"location":"Animation/good%20anime/","title":"Good animes","text":"<p>Here are some good animes:</p>"},{"location":"study/cs/datastructure/","title":"Data structure","text":""},{"location":"study/cs/datastructure/#graph","title":"Graph","text":"<p>!!! Overall Introduction: The graph is powerful tool to handle many practical problems, especially the routine management ones, like crossing the river. There are may algorithms, both referred to in the data structure course and discrete mathematics courses. The theory and the relative proofs are indeed important, which verifies the validity of these algorithms. However, as for my current situation, I think the most urgent thing is to know how to implement the in code.  </p>"},{"location":"study/cs/datastructure/#dfs-and-its-application","title":"DFS and its application","text":"<p>DFS is used to traverse the graph, each vertex only once, and it will give a spanning tree if we record the edges throughout the whole process.</p> <p>Here is the general code: The graph here is a UDAG(undirected acyclic) and unweighted.</p> <pre><code>void DFS(int G[][], int v, int Nv, int visited[] ){\n    visited[v]=1;\n    for(int i=0; i&lt;Nv; i++){\n        if( G[v][i]&amp;&amp;!visited[i] ){\n            DFS(G, i, Nv, visited);\n        }\n    }\n}\n</code></pre>"},{"location":"study/cs/datastructure/#topological-sort","title":"Topological Sort","text":"<p>The graph is a DAG, unweighted and connected.</p> <pre><code>int top=0;\nvoid DFS(int a[][], int v, int Nv, int visited[], int stack){\n    visited[v]=true;\n    for(int i=0;i&lt;Nv;i++){\n        if(a[v][i]&amp;&amp;!visited[i]){\n            DFS(a, i, Nv, visited);\n        }\n    }\n    stack[top++]=v;\n}\nvoid topologcial_sort(int G[][], int Nv){\n    int stack[Nv];\n    int visited[Nv];\n    for(int i=0;i&lt;Nv;i++){\n        visited[i]=0;\n    }\n    DFS(G, 0, Nv, visited, stack);\n    while(top&gt;-1){\n        printf(\"%d \",stack[top--]);\n    }\n}\n</code></pre>"},{"location":"study/cs/datastructure/#circle-detection","title":"Circle detection","text":""},{"location":"study/cs/datastructure/#strongly-connected-components-computation","title":"Strongly Connected components computation","text":"<p>Tarjan\u7b97\u6cd5\u662f\u7528\u6765\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components, SCC\uff09\u7684\u7ecf\u5178\u7b97\u6cd5\u3002\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u6307\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u6700\u5927\u5b50\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e00\u5bf9\u9876\u70b9\u90fd\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u3002Tarjan\u7b97\u6cd5\u662f\u57fa\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\uff08O(V + E)\uff09\u3002</p>"},{"location":"study/cs/datastructure/#tarjan","title":"Tarjan\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3","text":"<p>Tarjan\u7b97\u6cd5\u4f7f\u7528\u4e00\u4e2a\u6808\u548c\u4e00\u4e9b\u8f85\u52a9\u6570\u7ec4\u6765\u8bb0\u5f55\u9876\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\u3002\u5728DFS\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u9876\u70b9\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u7f16\u53f7\uff08DFS\u7f16\u53f7\uff09\u548c\u4e00\u4e2a\u6700\u4f4e\u53ef\u8fbe\u7f16\u53f7\uff08Low-link\u503c\uff09\u3002\u901a\u8fc7\u8fd9\u4e9b\u7f16\u53f7\uff0c\u53ef\u4ee5\u5224\u65ad\u9876\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p>"},{"location":"study/cs/datastructure/#_1","title":"\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u8bbe\u7f6eDFS\u7f16\u53f7\u3001Low-link\u503c\u7b49\u8f85\u52a9\u6570\u7ec4\uff0c\u5e76\u521d\u59cb\u5316\u6808\u3002</li> <li>DFS\u904d\u5386\uff1a\u5bf9\u6bcf\u4e2a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u6267\u884cDFS\uff0c\u9012\u5f52\u5730\u8bbf\u95ee\u6240\u6709\u53ef\u8fbe\u7684\u9876\u70b9\u3002</li> <li>\u66f4\u65b0Low-link\u503c\uff1a\u5728DFS\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u5f53\u524d\u9876\u70b9\u548c\u5176\u540e\u7ee7\u9876\u70b9\u7684Low-link\u503c\u3002</li> <li>\u8bc6\u522b\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5f53\u53d1\u73b0\u4e00\u4e2a\u9876\u70b9\u7684DFS\u7f16\u53f7\u548cLow-link\u503c\u76f8\u7b49\u65f6\uff0c\u5b83\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff0c\u5c06\u6808\u4e2d\u6240\u6709\u5230\u8fbe\u8be5\u9876\u70b9\u7684\u9876\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/cs/datastructure/#_2","title":"\u4f2a\u4ee3\u7801","text":"<p>\u4e0b\u9762\u662fTarjan\u7b97\u6cd5\u7684\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>// n \u662f\u56fe\u4e2d\u7684\u9876\u70b9\u6570\nindex = 0\nstack = []\nindices = [-1] * n\nlowlink = [0] * n\nonStack = [False] * n\nSCCs = []\n\nfunction strongconnect(v):\n    indices[v] = index\n    lowlink[v] = index\n    index += 1\n    stack.push(v)\n    onStack[v] = True\n\n    // \u8003\u8651 v \u7684\u6bcf\u4e2a\u540e\u7ee7\u9876\u70b9 w\n    for each (v, w) in edges:\n        if indices[w] == -1:\n            // w \u8fd8\u672a\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u8bbf\u95ee\u5b83\n            strongconnect(w)\n            lowlink[v] = min(lowlink[v], lowlink[w])\n        else if onStack[w]:\n            // w \u5728\u6808\u4e2d\uff0c\u662f\u4e00\u4e2a\u56de\u8fb9\n            lowlink[v] = min(lowlink[v], indices[w])\n\n    // \u5982\u679c v \u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\n    if lowlink[v] == indices[v]:\n        SCC = []\n        while True:\n            w = stack.pop()\n            onStack[w] = False\n            SCC.append(w)\n            if w == v:\n                break\n        SCCs.append(SCC)\n\nfor each v in vertices:\n    if indices[v] == -1:\n        strongconnect(v)\n\nreturn SCCs\n</code></pre>"},{"location":"study/cs/datastructure/#c","title":"C\u8bed\u8a00\u5b9e\u73b0","text":"<p>\u4e0b\u9762\u662fTarjan\u7b97\u6cd5\u5728C\u8bed\u8a00\u4e2d\u7684\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAX 100\n\nint index = 0, n;\nint indices[MAX], lowlink[MAX];\nbool onStack[MAX];\nint stack[MAX], stackTop = -1;\nint graph[MAX][MAX];\nint SCC[MAX][MAX], SCCIndex = 0, SCCSizes[MAX];\n\nvoid push(int v) {\n    stack[++stackTop] = v;\n    onStack[v] = true;\n}\n\nint pop() {\n    int v = stack[stackTop--];\n    onStack[v] = false;\n    return v;\n}\n\nvoid strongconnect(int v) {\n    indices[v] = lowlink[v] = index++;\n    push(v);\n\n    for (int w = 0; w &lt; n; w++) {\n        if (graph[v][w]) {\n            if (indices[w] == -1) {\n                strongconnect(w);\n                lowlink[v] = lowlink[v] &lt; lowlink[w] ? lowlink[v] : lowlink[w];\n            } else if (onStack[w]) {\n                lowlink[v] = lowlink[v] &lt; indices[w] ? lowlink[v] : indices[w];\n            }\n        }\n    }\n\n    if (lowlink[v] == indices[v]) {\n        int w;\n        do {\n            w = pop();\n            SCC[SCCIndex][SCCSizes[SCCIndex]++] = w;\n        } while (w != v);\n        SCCIndex++;\n    }\n}\n\nvoid tarjan() {\n    for (int i = 0; i &lt; n; i++) {\n        indices[i] = -1;\n        lowlink[i] = 0;\n        onStack[i] = false;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (indices[i] == -1) {\n            strongconnect(i);\n        }\n    }\n}\n\nint main() {\n    printf(\"Enter the number of vertices: \");\n    scanf(\"%d\", &amp;n);\n\n    printf(\"Enter the adjacency matrix:\\n\");\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            scanf(\"%d\", &amp;graph[i][j]);\n        }\n    }\n\n    tarjan();\n\n    printf(\"Strongly Connected Components:\\n\");\n    for (int i = 0; i &lt; SCCIndex; i++) {\n        printf(\"SCC %d: \", i + 1);\n        for (int j = 0; j &lt; SCCSizes[i]; j++) {\n            printf(\"%d \", SCC[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/cs/datastructure/#_3","title":"\u89e3\u91ca","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u8bbe\u7f6eDFS\u7f16\u53f7\u6570\u7ec4<code>indices</code>\u548cLow-link\u503c\u6570\u7ec4<code>lowlink</code>\uff0c\u521d\u59cb\u5316\u6808\u548c\u76f8\u5173\u6807\u8bb0\u3002</li> <li>\u9012\u5f52\u51fd\u6570 <code>strongconnect</code>\uff1a\u6267\u884cDFS\uff0c\u66f4\u65b0Low-link\u503c\uff0c\u5e76\u5728\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u5c06\u6808\u4e2d\u76f8\u5173\u9876\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> <li>\u4e3b\u51fd\u6570 <code>tarjan</code>\uff1a\u5bf9\u6bcf\u4e2a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u8c03\u7528\u9012\u5f52\u51fd\u6570<code>strongconnect</code>\u3002</li> <li>\u8f93\u5165\u8f93\u51fa\uff1a\u5728<code>main</code>\u51fd\u6570\u4e2d\u8bfb\u53d6\u9876\u70b9\u6570\u91cf\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u8c03\u7528<code>tarjan</code>\u7b97\u6cd5\uff0c\u8f93\u51fa\u627e\u5230\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol> <p>Kosaraju-Sharir\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components, SCC\uff09\u7684\u7ecf\u5178\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u57fa\u4e8e\u4e24\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(V + E)\uff0c\u5176\u4e2dV\u662f\u9876\u70b9\u6570\uff0cE\u662f\u8fb9\u6570\u3002</p>"},{"location":"study/cs/datastructure/#kosaraju-sharir","title":"Kosaraju-Sharir\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u53cd\u8f6c\u56fe\uff1a\u9996\u5148\u53cd\u8f6c\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u3002</li> <li>\u7b2c\u4e00\u6b21DFS\uff1a\u5bf9\u539f\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5b8c\u6210\u65f6\u95f4\u3002</li> <li>\u7b2c\u4e8c\u6b21DFS\uff1a\u6309\u7167\u7b2c\u4e00\u6b21DFS\u7684\u5b8c\u6210\u65f6\u95f4\u7684\u9006\u5e8f\u5bf9\u53cd\u8f6c\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u5230\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/cs/datastructure/#_4","title":"\u7b97\u6cd5\u4f2a\u4ee3\u7801","text":"<pre><code>function kosarajuSharir(G):\n    let G_rev be the reverse of graph G\n    let S be an empty stack\n    let visited be a map from node to boolean\n\n    // First DFS: Record the finish time of each node\n    function dfs1(v):\n        visited[v] = true\n        for each neighbor w of v in G:\n            if not visited[w]:\n                dfs1(w)\n        S.push(v)\n\n    // Second DFS: Collect nodes in the same SCC\n    function dfs2(v, component):\n        visited[v] = true\n        component.add(v)\n        for each neighbor w of v in G_rev:\n            if not visited[w]:\n                dfs2(w, component)\n\n    // Initialize the visited map and run the first DFS\n    for each vertex v in G:\n        visited[v] = false\n    for each vertex v in G:\n        if not visited[v]:\n            dfs1(v)\n\n    // Reinitialize the visited map for the second DFS\n    for each vertex v in G:\n        visited[v] = false\n\n    // Process all nodes in the order defined by the stack S\n    let SCCs be an empty list of components\n    while S is not empty:\n        v = S.pop()\n        if not visited[v]:\n            let component be an empty list\n            dfs2(v, component)\n            SCCs.append(component)\n\n    return SCCs\n</code></pre>"},{"location":"study/cs/datastructure/#c_1","title":"C\u8bed\u8a00\u5b9e\u73b0","text":"<p>\u4ee5\u4e0b\u662fKosaraju-Sharir\u7b97\u6cd5\u7684C\u8bed\u8a00\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAX 100\n\nint graph[MAX][MAX];\nint graph_rev[MAX][MAX];\nbool visited[MAX];\nint stack[MAX];\nint stackTop = -1;\nint SCC[MAX][MAX], SCCIndex = 0, SCCSizes[MAX];\nint n;\n\nvoid push(int v) {\n    stack[++stackTop] = v;\n}\n\nint pop() {\n    return stack[stackTop--];\n}\n\nvoid dfs1(int v) {\n    visited[v] = true;\n    for (int w = 0; w &lt; n; w++) {\n        if (graph[v][w] &amp;&amp; !visited[w]) {\n            dfs1(w);\n        }\n    }\n    push(v);\n}\n\nvoid dfs2(int v) {\n    visited[v] = true;\n    SCC[SCCIndex][SCCSizes[SCCIndex]++] = v;\n    for (int w = 0; w &lt; n; w++) {\n        if (graph_rev[v][w] &amp;&amp; !visited[w]) {\n            dfs2(w);\n        }\n    }\n}\n\nvoid kosarajuSharir() {\n    // Step 1: Run DFS on the original graph to fill the stack\n    for (int i = 0; i &lt; n; i++) {\n        visited[i] = false;\n    }\n    for (int i = 0; i &lt; n; i++) {\n        if (!visited[i]) {\n            dfs1(i);\n        }\n    }\n\n    // Step 2: Reverse the graph\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            graph_rev[i][j] = graph[j][i];\n        }\n    }\n\n    // Step 3: Run DFS on the reversed graph in the order defined by the stack\n    for (int i = 0; i &lt; n; i++) {\n        visited[i] = false;\n    }\n    while (stackTop != -1) {\n        int v = pop();\n        if (!visited[v]) {\n            SCCSizes[SCCIndex] = 0;\n            dfs2(v);\n            SCCIndex++;\n        }\n    }\n}\n\nint main() {\n    printf(\"Enter the number of vertices: \");\n    scanf(\"%d\", &amp;n);\n\n    printf(\"Enter the adjacency matrix:\\n\");\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            scanf(\"%d\", &amp;graph[i][j]);\n        }\n    }\n\n    kosarajuSharir();\n\n    printf(\"Strongly Connected Components:\\n\");\n    for (int i = 0; i &lt; SCCIndex; i++) {\n        printf(\"SCC %d: \", i + 1);\n        for (int j = 0; j &lt; SCCSizes[i]; j++) {\n            printf(\"%d \", SCC[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"study/cs/datastructure/#_5","title":"\u89e3\u91ca","text":"<ol> <li>\u521d\u59cb\u5316\u548c\u8f93\u5165\uff1a\u8bfb\u53d6\u9876\u70b9\u6570\u91cf\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u521d\u59cb\u5316\u76f8\u5173\u6570\u7ec4\u548c\u53d8\u91cf\u3002</li> <li>\u7b2c\u4e00\u6b21DFS\uff1a\u5bf9\u539f\u56fe\u6267\u884cDFS\uff0c\u6309\u7167\u5b8c\u6210\u65f6\u95f4\u5c06\u9876\u70b9\u538b\u5165\u6808\u4e2d\u3002</li> <li>\u56fe\u53cd\u8f6c\uff1a\u751f\u6210\u53cd\u8f6c\u56fe\uff0c\u5c06\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\u65b9\u5411\u53cd\u8f6c\u3002</li> <li>\u7b2c\u4e8c\u6b21DFS\uff1a\u6309\u7167\u7b2c\u4e00\u6b21DFS\u7684\u5b8c\u6210\u65f6\u95f4\u7684\u9006\u5e8f\u5bf9\u53cd\u8f6c\u56fe\u6267\u884cDFS\uff0c\u627e\u5230\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> <li>\u8f93\u51fa\u7ed3\u679c\uff1a\u8f93\u51fa\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ol>"},{"location":"study/math/","title":"Math","text":"<p>Here is some maths knowledge from books. I want to emphasize what is important.</p>"},{"location":"study/math/discrete/quadratic-probing/","title":"Quadratic probing","text":""},{"location":"study/math/discrete/quadratic-probing/#_2","title":"\u6563\u5217\u8868\u2014\u2014\u5e73\u65b9\u63a2\u6d4b\u2014\u2014\u4e8c\u6b21\u5269\u4f59","text":""},{"location":"study/math/discrete/quadratic-probing/#_3","title":"\u6563\u5217\u8868\u7684\u5e73\u65b9\u63a2\u6d4b","text":"<p>\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u6563\u5217\u8868\uff08Hash Table\uff09\u7684\u5e73\u65b9\u63a2\u6d4b\uff08Quadratic Probing\uff09\uff1a</p> <p>\u5e73\u65b9\u63a2\u6d4b \u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u3002\u54c8\u5e0c\u51b2\u7a81\u53d1\u751f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u4e0d\u540c\u7684\u952e\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65f6\u3002\u5e73\u65b9\u63a2\u6d4b\u901a\u8fc7\u6539\u53d8\u51b2\u7a81\u4f4d\u7f6e\u7684\u63a2\u6d4b\u65b9\u5f0f\uff0c\u6765\u51cf\u5c11\u51b2\u7a81\u5e76\u5747\u5300\u5206\u5e03\u952e\u503c\u3002 \u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\u63a2\u6d4b\u4f4d\u7f6e=(\u521d\u59cb\u54c8\u5e0c\u4f4d\u7f6e+i^2)%\u8868\u957f</p> <p>\u518d\u6765\u770b\u770b\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014C\u8bed\u8a00\u63cf\u8ff0\uff08Mark Allen Weiss \u7b2c\u4e8c\u7248 \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e\uff09\u300b119\u9875\u5b9a\u74065.1\u7684\u8bc1\u660e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u5173\u5e73\u65b9\u63a2\u6d4b\u7684\u91cd\u8981\u7ed3\u8bba\uff0c\u8fd9\u91cc\u7684\u8bc1\u660e\u4f3c\u4e4e\u4e0d\u662f\u5f88\u5b8c\u6574\u3002</p> <p>\u5b9a\u74065.1\uff1a\u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u662f\u7a7a\u7684\u65f6\u5019\uff0c\u603b\u80fd\u591f\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</p> <p></p> <p>\u8bc1\u660e\u7684\u5012\u6570\u7b2c\u4e8c\u884c</p> <p>\u201c\u56e0\u6b64\u4efb\u4f55\u5143\u7d20\u90fd\u6709 \\(\\lfloor TableSize/2\\rfloor\\) \u4e2a\u53ef\u80fd\u88ab\u653e\u5230\u7684\u4f4d\u7f6e\u3002\u201d</p> <p>\u8fd9\u53e5\u8bdd\u4e4d\u4e00\u770b\u5e76\u4e0d\u663e\u7136\uff0c\u56e0\u4e3a\u5b9a\u7406\u5148\u8bc1\u660e\u4e86\u524d \\(\\lfloor TableSize/2\\rfloor\\) \u4e2a\u5907\u9009\u4f4d\u7f6e\u662f\u4e92\u5f02\u7684\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bf4\u660e\u540e\u9762\u7684 \\(\\lfloor TableSize/2\\rfloor\\) \u662f\u4ec0\u4e48\u60c5\u51b5\u3002\u6709\u53ef\u80fd\u540e\u9762\u53ef\u80fd\u7684\u60c5\u51b5\u4e0e\u524d\u9762\u4e0d\u540c\uff0c\u5bfc\u81f4\u4efb\u4f55\u5143\u7d20\u90fd\u6709 \\(TableSize\\) \u4e2a\u53ef\u80fd\u7684\u4f4d\u7f6e\u3002\u90a3\u6309\u4e66\u4e2d\u7684\u8bf4\u6cd5\uff0c\u5e94\u8be5\u5728\u6b64\u53e5\u7684 \\(\\lfloor TableSize/2\\rfloor\\) \u524d\u52a0\u201c\u81f3\u5c11\u201d\u3002 \u4f46\u662f\u6211\u4eec\u4e0b\u9762\u4f1a\u8bc1\u660e\uff0c\u4e66\u4e2d\u7684\u8bf4\u6cd5\u662f\u5bf9\u7684\uff0c\u5373\u53ea\u6709 \\(\\lfloor TableSize/2\\rfloor\\) \u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u9762\u4e00\u534a\u7684\u5907\u9009\u4f4d\u7f6e\u548c\u524d\u9762\u4e00\u534a\u662f\u76f8\u540c\u7684\u3002</p> <p>\u5e73\u65b9\u63a2\u6d4b\u662f\u5728\u8ba1\u7b97\u51b2\u7a81\u5143\u7d20\u5728\u53d1\u751f\u7b2c \\(i\\) \u6b21\u51b2\u7a81\u5c06\u88ab\u653e\u5230\u7684\u65b0\u4f4d\u7f6e\uff1a \\(F(x,i) = x \\%p+i^2\\)\uff0c\u5047\u8bbe \\(p\\) \u4e3a \\(hash table\\) \u7684\u5927\u5c0f\uff0c\u4e3a\u5947\u7d20\u6570\uff0c\\(hash(x)=x\\%p\\) ,</p> <p>\u90a3\u4e48\u66f4\u786e\u5207\u5730\uff0c\\(F(x,i) = (x \\%p+i^2)\\%p=(x\\%p+i^2\\%p)\\%p\\) \u8fd9\u662f\u56e0\u4e3a\\((a+b)\\%p=(a\\%p+b\\%p)\\%p\\).</p> <p>\u4e0a\u9762 \\(F(x,i)\\)\u7684\u7ed3\u679c\u5728 \\(x\\) \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u53ea\u53d6\u51b3\u4e8e \\(i\\)\uff0c\u5373\u51b2\u7a81\u53d1\u751f\u7684\u6b21\u6570\u3002\u6240\u4ee5\u53ea\u8003\u8651 \\(i^2\\%p\\) \u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\u6240\u6709\u7684\u53ef\u80fd\u7ed3\u679c\u5373\u53ef\u3002\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7\\(p\\)\u4e2a\uff08\u56e0\u4e3a\u6a21 \\(p\\) \u7684\u540c\u4f59\u7c7b\u53ea\u6709\\(p\\)\u79cd\uff09\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\\(i^2\\%p\\) \u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\u6240\u6709\u7684\u53ef\u80fd\u7ed3\u679c\u5c31\u662f\u6a21 \\(p\\) \u7684\u6240\u6709\u4e8c\u6b21\u5269\u4f59\uff0c\u7ed3\u679c\u7684\u4e2a\u6570\u5c31\u662f\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\u52a0\u4e00\uff0c\u4e0b\u9762\u5c06\u4f1a\u8bc1\u660e\u6a21 \\(p\\) \u7684\u4e8c\u6b21\u5269\u4f59\u4e2a\u6570\u4e3a \\(\\frac{p-1}{2}\\)\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_4","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u5b9a\u4e49","text":"<p>\u4e8c\u6b21\u5269\u4f59\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570\\(a\\)\u79f0\u4e3a\u6a21\\(p\\)\u7684\u4e8c\u6b21\u5269\u4f59\uff0c\u5982\u679c\u5b58\u5728\u67d0\u4e2a\u6574\u6570\\(i\\)\u4f7f\u5f97\\(i^2\\equiv a \\pmod{p}\\) \u6210\u7acb\uff0c\u5426\u5219\u79f0\u4e3a\u6a21\\(p\\)\u7684\u4e8c\u6b21\u975e\u5269\u4f59\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u8bb0\u53f7\uff1a\u52d2\u8ba9\u5fb7\u7b26\u53f7\uff08Legendre\uff09\u6765\u8868\u793a\u4e8c\u6b21\u5269\u4f59\u5173\u7cfb $$ (\\frac{a}{p})= \\begin{cases} 1, &amp; a \\text{\u662f} p \\text{\u7684\u4e8c\u6b21\u5269\u4f59}\\ -1, &amp; a \\text{\u662f} p \\text{\u7684\u4e8c\u6b21\u975e\u5269\u4f59}\\ 0, &amp; p|a \\end{cases} $$</p>"},{"location":"study/math/discrete/quadratic-probing/#_5","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u6c42\u89e3\u6a21 \\(p\\)\u7684\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff0c\u5373 \\(i^2\\equiv a \\pmod{p}\\)\u5728 \\(i\\) \u53d6\u904d\u6b63\u6574\u6570\u65f6\uff0c\u6b63\u6574\u6570 \\(a\\)\u7684\u4e2a\u6570\u3002</p> <p>\u5148\u8003\u8651 \\(i\\) \u7684\u53d6\u503c\uff0c\u663e\u7136\u53ea\u8981\u4ece1\u53d6\u5230p\u5373\u53ef\uff0c\u82e5\\(i&gt;p\uff0c\\)\u5219 \\(\\exists q\\in Z, i=qp+r, 0&lt;r&lt;p\\) \u6b64\u65f6 \\(i^2\\%p=r^2\\%p\\)\uff0c\u4ecd\u53ea\u9700\u8003\u8651\u5c0f\u4e8ep\u7684\u60c5\u51b5\u5373\u53ef\u3002</p> <p>\u8bbe \\(1\\leq x &lt; y \\leq p\\),\u4e14\\(x^2\\%p\\equiv y^2\\%p\\). \u6545\u6709 \\(p|(x^2-y^2)\\) \uff0c\u5373 \\(p|(x+y)(x-y)\\) \u7531\\(x,y\\)\u7684\u53d6\u503c\u8303\u56f4\u53ef\u77e5 \\(p|(x+y)\\)\uff0c\u8fdb\u4e00\u6b65\u5730\uff0c \\(x+y=p\\)\u3002</p> <p>\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u5173\u7cfb\uff1a\u5f53\u4e24\u4e2a\u6570\u548c\u4e3a\u6a21\u6570\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u7684\u5e73\u65b9\u6a21\u9664\u8fd9\u4e2a\u6a21\u6570\u7ed3\u679c\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e \\((1,p-1),(2,p-2),\u00b7\u00b7\u00b7\\) \u8fd9 \\(\\frac{p-1}{2}\\) \u4e2a\u6570\u5bf9\uff08\u522b\u5fd8\u4e86p\u4e3a\u5947\u7d20\u6570\uff09\uff0c\u5904\u4e8e\u540c\u4e00\u6570\u5bf9\u4e2d\u7684\u6570\uff0c\u5b83\u4eec\u7684\u5e73\u65b9\u6a21\u9664\\(p\\)\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u4e0d\u540c\u6570\u5bf9\u4e2d\u7684\u5143\u7d20\u6a21\u9664\\(p\\)\u7ed3\u679c\u4e0d\u540c\uff0c\u5171\u6709 \\(\\frac{p-1}{2}\\) \u4e2a\u7ed3\u679c\u3002</p> <p>\u56e0\u6b64\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\u5c31\u662f \\(\\frac{p-1}{2}\\)\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_6","title":"\u4e8c\u6b21\u5269\u4f59\u7684\u68c0\u9a8c","text":"<p>\u6709\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u77e5 \\(i^2\\equiv a \\pmod{p}\\) \u5f0f\u4e2d\u7684\\(a, p\\)\u8981\u53bb\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684 \\(i\\)\uff08\u8fd9\u5c31\u662f\u6c42\u89e3\u4e8c\u6b21\u5269\u4f59\u65b9\u7a0b\uff09\u3002\u4f46\u662f\u8fd9\u6837\u7684\\(i\\)\u5e76\u4e0d\u4e00\u5b9a\u5b58\u5728\uff08\u8fd9\u79cd\u60c5\u51b5\u5c31\u79f0a\u662f\u6a21p\u7684\u4e8c\u6b21\u975e\u5269\u4f59\uff09\u3002</p> <p>\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u6a21\u9664 \\(p\\) \u7684\u4e8c\u6b21\u5269\u4f59\u662f\u4ec0\u4e48\uff0c\u8fd9\u65f6\u5019 \\(i\\) \u5c31\u66f4\u4e0d\u77e5\u9053\u4e86\uff0c\u4e0d\u8fc7\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u77e5\u9053\u4e86\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u53ea\u9700\u4ece1\u5230 \\(\\frac{p-1}{2}\\) \u4e4b\u95f4\u4e00\u4e2a\u4e00\u4e2a\u68c0\u9a8c\u5c31\u884c\u3002\u90a3\u4e48\u5982\u4f55\u68c0\u9a8c\u4e00\u4e2a\u6570\u5b83\u662f\u4e0d\u662f\u6a21\u9664p\u7684\u4e8c\u6b21\u5269\u4f59\u5462\uff1f\u6b27\u62c9\u544a\u8bc9\u6211\u4eec\u6709\u6b27\u62c9\u51c6\u5219\uff08Euler Criterion\uff09\uff1a $$ (\\frac{a}{p})\\equiv a^{\\frac{p-1}{2}}\\pmod{p}= \\begin{cases} 1 \\pmod{p} &amp; \\text{\u5982\u679c } a \\text{ \u662f\u6a21 } p \\text{ \u7684\u4e8c\u6b21\u5269\u4f59} \\ -1 \\pmod{p} &amp; \\text{\u5982\u679c } a \\text{ \u4e0d\u662f\u6a21 } p \\text{ \u7684\u4e8c\u6b21\u5269\u4f59} \\end{cases} $$</p> <p>\u6240\u4ee5\u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\u4e0a\u6765\uff0c\u51b2\u7a81\u65f6\u53d1\u751f\u65f6\uff0c\u5229\u7528\u5e73\u65b9\u63a2\u6d4b \\(hashtable\\) \u4e2d\u6240\u6709\u5907\u9009\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u6a21  \\(TableSize\\) \u7684\u4e8c\u6b21\u5269\u4f59 (\\(i^2\\%p\\))  \u52a0\u4e0a\u4e00\u4e2a \\(x\\%p\\) \u518d\u6a21\u9664 \\(p\\)\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u7528\u8003\u8651\u4e2a\u6570\uff0c\u5b83\u6709 \\(\\lfloor TableSize/ 2\\rfloor\\) \u4e2a\u3002 \u4e8e\u662f\uff0c\u518d\u770b\u5b9a\u74065.1\uff0c\u8868\u81f3\u5c11\u4e00\u534a\u7a7a\u65f6\uff0c\u4e8c\u6b21\u5269\u4f59\u81f3\u5c11\u6709\u4e24\u4e2a\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709\u7a7a\u7684\u5907\u9009\u4f4d\u7f6e\uff0c\u6545\u4e00\u5b9a\u53ef\u4ee5\u653e\u4e0b\u4e00\u4e2a\u65b0\u5143\u7d20\u3002</p>"},{"location":"study/math/discrete/quadratic-probing/#_7","title":"\u6563\u5217\u5e73\u65b9\u63a2\u6d4b\u63d2\u5165\u5931\u8d25\u95ee\u9898","text":"<p>\u6700\u540e\u6765\u770b\u4e00\u4e2a\u5224\u65ad\u9898\uff0c\u6b63\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u7f18\u8d77\u3002</p> <p>If 7 elements have been stored in a hash table of size 13 at positions { 0, 1, 2, 4, 5, 10, 11 }, and the hash function is H(x) = x%13. Then an empty spot can't be found when inserting the element 40 with quadratic probing.</p> <p>\u7b54\u6848\u662f\u2714 \u4e00\u822c\u7684\u89e3\u6cd5\u662f\u4e0d\u65ad\u7528 \\((40+i^2) mod{13}(i=0,1,2, \\cdots)\\) \u6c42\u5f97\u65b0\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u540e\u53d1\u73b0\u7ed3\u679c\u662f \\(1, 2, 5, 10, 4, 0, 11, 11, 0, 4, 10, 5, 2\\) \u8fd913\u4e2a\u6570\u5faa\u73af\uff0c\u5168\u662f\u9898\u4e2d\u5df2\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee540\u4e0d\u80fd\u6210\u529f\u63d2\u5165\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u5bf9\u4e8c\u6b21\u5269\u4f59\u7684\u8ba8\u8bba\u5bf9\u8fd9\u4e2a\u5faa\u73af\u7ed9\u51fa\u89e3\u91ca\u3002 \u5148\u8f6c\u6362\u4e00\u4e0b\u63d2\u5165\u4f4d\u7f6e\u8868\u8fbe\u5f0f\uff1a \\((40+i^2) mod{13}=(40 mod{13}+i^2 mod{13})mod{13}=(1+i^2 mod{13})mod{13},(i=0,1,2, \\cdots)\\)\uff0c \u8fd9\u4e2a\u7ed3\u679c\u53ef\u80fd\u7684\u53d6\u503c\u4e2a\u6570\uff08\u4e5f\u5c31\u662f\u53ef\u63d2\u5165\u4f4d\u7f6e\u4e2a\u6570\uff09\uff0c\u53d6\u51b3\u4e8e $i^2mod{13}\u7684\u503c\u7684\u4e2a\u6570 $\u3002</p> <p>\u9996\u5148\uff0c\u53ef\u4ee5\u786e\u5b9a\u6a21\u966413\u7684\u4e8c\u6b21\u5269\u4f59\u7684\u4e2a\u6570\uff1a\\(\\frac{p-1}{2}=\\frac{13-1}{2}=6\\)\u3002 \u5728\u8fd9\u9053\u9898\u91cc\uff0c\u6a21\u6570\u7684\u7ed3\u679c\u53ef\u4ee5\u4e3a0\uff0c\u6545\u5728\u6563\u5217\u4e2d\u6709 \\(6+1=7\\) \u4e2a\u53ef\u63d2\u5165\u4f4d\u7f6e\u3002\u63a5\u7740\u6211\u4eec\u5c31\u4ec5\u9700\u5224\u65ad\u6240\u7ed9\u7684positions\u662f\u5426\u4e3a\u8fd97\u4e2a\u53ef\u63d2\u5165\u4f4d\u7f6e\u3002\uff08\u5b9e\u9645\u4e0a\u5f97\u5230\u7684\u5faa\u73af\u5df2\u7ecf\u8bc1\u5b9e\u4e86\u786e\u5b9e\u662f\u8fd97\u4e2a\uff09</p> <p>\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6b27\u62c9\u51c6\u5219\uff0c\u5c06\u6240\u7ed9\u7684position\u6807\u53f7\u51cf\u53bb1\u540e\u6c426\u6b21\u65b9\u7136\u540e\u6a21\u966413\uff0c\u770b\u770b\u7ed3\u679c\u662f\u4e0d\u662f1\uff08\u6b64\u65f6\u5373\u4e3a\u6a2113\u7684\u4e8c\u6b21\u5269\u4f59\uff09\u6216\u80050\u3002 \u6ce8\u610f\uff1a0\u51cf\u53bb1\u7ed3\u679c\u53d612\uff0c\u56e0\u4e3a \\(1+12=13\\equiv0 mod{13}\\)</p> <p>\u4e0b\u9762\u662f\u9a8c\u8bc1\u7684Python\u4ee3\u7801\uff1a</p> <pre><code>positions=[0,1,2,4,5,10,11]\nres=[0,1]\np=13\nfor position in positions:\n    if position==0:\n        position=13\n    if (position-1)**((p-1)/2)%13 in res:\n        print(f\"position {position%13} is not insertable\")\n</code></pre>"},{"location":"study/math/linear%20algebra/","title":"Linear algebra","text":"<p>Here are some linear algebra knowledge.</p>","tags":["Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/","title":"SVD","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#introduction","title":"Introduction","text":"<p>SVD(singular value decomposition) is a mathematical method to process matrix. SVD can help extract the key traits of the number in a matrix. Apparently we can use it to process images because images are expressed as matries in computer science. This article is aimed to figure out why and how the SVD can extract the traits of the matrix. Plus I want to give several examples of its application in computere science.  </p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd_1","title":"SVD","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#start-from-one-way-to-factorize-matrix","title":"Start from one way to factorize matrix","text":"<p>Here is a matrix with \\(rank=1\\):</p> \\[ A=\\begin{pmatrix}   1&amp;2&amp;3 \\\\   1&amp;2&amp;3 \\end{pmatrix} \\] <p>It can be written as a column times a row:</p> \\[ A=\\begin{pmatrix}   1&amp;2&amp;3 \\\\   1&amp;2&amp;3 \\end{pmatrix}=\\begin{pmatrix}   1 \\\\   1 \\end{pmatrix}\\begin{pmatrix}   1&amp;2&amp;3 \\end{pmatrix} \\] <p>We can say the matrix is decomposed as a column times a row and more generally, for any matrix, it can be decomposed as the sum of \\(column \\times row\\) with different coefficients. A coefficient decides the weight of the specific \\(column \\times row\\) in the whole sum. Here is an example:</p> \\[ A=\\begin{pmatrix}   a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}=a\\begin{pmatrix}   1 \\\\   0 \\end{pmatrix}\\begin{pmatrix}   1&amp;0&amp;0 \\end{pmatrix}+b\\begin{pmatrix}   0 \\\\   1 \\end{pmatrix}\\begin{pmatrix}   0&amp;1&amp;0 \\end{pmatrix} \\] <p>It can be formalised as</p> \\[ A=\\sigma_1{u_1}v_1^{T}+\\sigma_2u_2v_2^{T} \\] <p>Here \\(a\\)(\\(\\sigma_1\\)) is the weight of the first \\(column \\times row\\) on the left and \\(b\\)(\\(\\sigma_2\\)) is the only other one. If \\(a\\) is much more larger than \\(b\\), we can neglect the second product to approximate \\(A\\) as only one \\(column \\times row\\) with its coefficient. This is useful to store the matrix \\(A\\) with less space.  </p> <p>But where is the trait? Let's get it now: \\(A\\) is by \\(m\\times n\\), and suppose it has been decomposed as follow:</p> \\[ A=\\sigma_1{u_1}v_1^{T}+\\sigma_2u_2v_2^{T}+\\cdots+\\sigma_n u_n v_n^{T} \\tag{1} \\] <p>where \\(\\sigma_1&gt;\\sigma_2&gt;\\cdots&gt;\\sigma_n\\).</p> <p>We can take in equation (1) in this way: \\(\\sigma_i\\) is the weight, \\(u_i\\) is the trait vector and \\(v_i^{T}\\) is the combination vector who gives a matrix \\(A_i\\) of \\(m \\times n\\) by \\(u_i v_i^{T}\\), whose columns are the multiple of \\(u_i\\) with their coefficients in \\(v_i^{T}\\).</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd-form","title":"SVD form","text":"<p>In matrix notation and more formalised, the former example could be written</p> \\[ A=\\begin{pmatrix}   a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}=\\begin{pmatrix}   1&amp;0 \\\\   0&amp;1 \\end{pmatrix}\\begin{pmatrix}    a&amp;0&amp;0 \\\\   0&amp;b&amp;0 \\end{pmatrix}\\begin{pmatrix}   1&amp;0&amp;0 \\\\   0&amp;1&amp;0 \\\\   0&amp;0&amp;1 \\end{pmatrix} \\] <p>In a general form of \\(A_{m\\times n}\\), the SVD wants to write \\(A\\) as</p> \\[ A=U\\Sigma V^T \\tag{2} \\] <p>\\(U_{m\\times m}\\) is called the left singular matrix with left singular vectors as its colomns and \\(V^{T}_{n\\times n}\\) is the right one. \\(\\Sigma_{m\\times n}\\) has singular values \\(\\sigma_i\\) arranged in descending order in position \\(\\Sigma_{ii}\\)  and zeros in other positions.  </p> <p>Usually, \\(U\\) and \\(V\\) are orthogonal matrix. Therefore, \\(V^{-1}=V^{T}\\), and multiply \\(V\\) in both side of equation (2) we can get another form of it and it is where equation (2) comes from:</p> \\[ AV=U\\Sigma \\tag{3} \\] <p>The idea is the same as that of diagonalising a real and symmetric square matrix with orthogonal matrix:</p> \\[ A=Q\\Lambda Q^T \\Leftrightarrow AQ=Q\\Lambda \\] <p>where \\(\\Lambda\\) is a diagonal matrix with eigen values of \\(A\\) and \\(Q\\) is the orthogonal matrix with corresponding orthonormal eigen vectors.  </p> <p>Back to equation (3), rewrite it with specific vectors:</p> \\[ A\\begin{pmatrix} v_1&amp;v_2&amp;\\cdots &amp;v_n \\end{pmatrix}=\\begin{pmatrix} u_1&amp;u_2&amp;\\cdots &amp;u_m \\end{pmatrix}\\begin{pmatrix} \\sigma_1&amp;0&amp;\\cdots &amp;0 \\\\ 0       &amp;\\sigma_2 &amp;\\cdots&amp;0\\\\ \\vdots &amp;\\vdots&amp;\\cdots&amp;0 \\end{pmatrix}_{m\\times n} \\] <p>Suppose there are \\(\\sigma_1\\) to \\(\\sigma_r\\). Then we have</p> \\[ Av_i=\\sigma_i u_i, i=1,2,\\cdots,r \\tag{4} \\] <p>What we need to do is find these singular values \\(\\sigma_i\\) and corresponding sigular vectors \\(v_i\\) and \\(u_i\\), where \\(u_i\\) can be given by \\(v_i\\) and \\(\\sigma_i\\) with equation (4).  </p> <p>Transpose both sides of equation (2):</p> \\[ A^T=V\\Sigma^T U^T \\] <p>Then multiply with \\(A\\):</p> \\[ AA^T=(U\\Sigma V^T)(V\\Sigma^T U^T)=U(\\Sigma\\Sigma^T)U^T \\tag{5} \\] <p>\\((\\Sigma\\Sigma^T)\\) is a \\({m\\times m}\\) matrix with \\(\\sigma_1^2,\\sigma_2^2,\\cdots,\\sigma_r^2\\) and zeros on \\((\\Sigma\\Sigma^T)_{ii}\\) and zero otherwise. Therefore, \\(\\sigma_i^2(i=1,2,...,r)\\) are eigenvalues of \\(AA^T\\), with \\(u_i\\) being their corresponding eigenvectors. Similarly, we can also get \\(\\sigma_i^2(i=1,2,...,r)\\) are eigenvalues of \\(A^TA\\), with \\(v_i\\) being their corresponding eigenvectors.</p> <ul> <li>Conclusion: Now let's summarize the whole process of SVD. Our aim is to write \\(A\\) as \\(U\\Sigma V^T\\)</li> </ul>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svd-applicationpca","title":"SVD application\u2014\u2014PCA","text":"<p>PCA(principal component analysis) is a dimensionality reduction technique used in statistics and machine learning. It transforms a dataset with many correlated variables into a smaller set of uncorrelated variables called principal components, while preserving as much variance as possible. SVD is an effective way to implement PCA.</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#a-visulized-example","title":"A visulized example","text":"<p>Take \\(A_{m\\times n}\\) in this way: A set of \\(n\\) samples with \\(m\\) variables of measurement. Here is an example from reference[1] listed last.  </p> <p>Suppose we have \\(n\\) different points in a 2-D plane and we want to find out the principal direction of these points, namely a line that will be as close as possible to the points.  </p> <p>First, we center each of the measurement: \\(x,y\\) in this example. Substract \\(\\bar{x}\\) and \\(\\bar{y}\\) for each \\(x_i\\) and \\(y_i\\). We can get a matrix \\(A_{2\\times n}\\) with each of its row having average of \\(0\\).</p> <p>We can draw these centered points in a coordinate. The center of these points is the origin. It helps a lot when we try to find the direction formed by these points.</p> <p>\\(R^2\\) or a subspace in \\(R^m\\)\"&gt;</p> <p>Now consider doing SVD on \\(A\\):</p> \\[ A=U\\Sigma V^T=\\begin{pmatrix} u_1&amp;u_2 \\end{pmatrix}\\Sigma \\begin{pmatrix} v_1&amp;v_2&amp;\\cdots&amp;v_n \\end{pmatrix}^T \\] <p>The leading sigular vector with bigger sigular value shows the direction in the former scatter graph for the reasons we talk about above.  </p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#least-perpendicular-squares","title":"Least perpendicular squares","text":"<p>Also this direction is the direction with least perpendicular squares.</p> <p>Namely, the sum of squared distances from the points to the line is a minimum.  </p> <p>Proof: Consider a triangle formed by the origin, the line and the point \\(a_i\\)(a vector with\\((x_i,y_i)\\)). Using Pythagorean theorem: $$ ||a_i||^2=|a_i^Tu_1|^2+|a_i^Tu_2|^2 $$</p> <p>The first term on the right is the projection of \\(a_i\\) on the direction of \\(u_1\\)(unit vector), namely the principal direction and the second term is the distance square we want. Sum all the distance squares:</p> \\[ d_{sum}=\\sum_{i=1}^{n}|a_i^Tu_2|^2=\\sum_{i=1}^{n}||a_i||^2-\\sum_{i=1}^{n}|a_i^Tu_1|^2 \\] <p>The first term on the right is a constant for given points and the second term can be written as</p> \\[ \\sum_{i=1}^{n}|a_i^Tu_1|^2=\\begin{pmatrix} a_1^Tu_1&amp;a_2^Tu_1\\cdots&amp;a_n^Tu_1 \\end{pmatrix}\\begin{pmatrix} a_1^Tu_1\\\\ a_2^Tu_1\\\\ \\vdots\\\\ a_n^Tu_1 \\end{pmatrix}=u_1^TAA^Tu_1 \\] <p>Minimise \\(d_{sum}\\) means maximise \\(u_1^TAA^Tu_1\\). Of course it arrives it maximum when \\(u_1\\) is the singular vector for the maximum singular value. This cooresponds with the PCA by SVD.</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#the-general-form","title":"The general form","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#application-in-computer-science","title":"Application in computer science","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#face-recognition","title":"Face recognition","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#svdfrom-the-operator-perspective","title":"SVD\u2014\u2014from the operator perspective","text":"","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#polar-decomposition","title":"Polar decomposition","text":"<p>\\(A=U\\Sigma V^T=(UV^T) (V\\Sigma V^T)=QS\\)</p>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/linear%20algebra/SVD/#references","title":"References","text":"<ul> <li>[1] Chapter 7 Introduction to linear algebra 5th by Gilbert Strang  </li> <li>[2] Eigenface Wiki</li> <li>[3] Chapter 7 Linear algebra done right 4th by Sheldon Axler</li> </ul>","tags":["Math","Linear Algebra","Math","Linear Algebra"]},{"location":"study/math/maths%20analysis/maths%20analysis/","title":"Maths","text":""},{"location":"study/math/maths%20analysis/maths%20analysis/#calculus","title":"Calculus","text":"\\[ \\sum_{i=1}^{n}i^2=\\frac{n(n+1)(2n+1)}{6} \\]"},{"location":"study/math/probability/","title":"probability theorem","text":"<p>This is the probability theorem section.</p>"}]}